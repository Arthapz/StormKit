// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <span>
#include <string>
#include <vector>

#include <stormkit/Core/AssertMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

#include <stormkit/Core/Concepts.hpp>
#include <stormkit/Core/Types.hpp>

#include <stormkit/gpu/core/Types.hpp>

export module stormkit.engine.render.framegraph.GraphResource;

import stormkit.engine.render.framegraph.GraphID;

export namespace stormkit::engine {
    struct BufferDescription {
        core::RangeExtent size;
    };

    struct ImageDescription {
        core::math::ExtentU extent;
        gpu::ImageType type;
        gpu::PixelFormat format;

        core::UInt32 layers = 1u;

        std::optional<gpu::ClearValue> clear_value;
    };

    template<class T>
    concept ResourceDescriptionType =
        core::Is<T, BufferDescription> || core::Is<T, ImageDescription>;

    class STORMKIT_API GraphResourceBase {
      public:
        GraphResourceBase(std::string name, GraphID creator);
        virtual ~GraphResourceBase();

        GraphResourceBase(const GraphResourceBase&)                    = delete;
        auto operator=(const GraphResourceBase&) -> GraphResourceBase& = delete;

        GraphResourceBase(GraphResourceBase&&) noexcept;
        auto operator=(GraphResourceBase&&) noexcept -> GraphResourceBase&;

        auto id() const noexcept -> GraphID;
        auto name() const noexcept -> const std::string&;
        auto transient() const noexcept -> bool;
        auto creator() const noexcept -> GraphID;
        auto writers() const noexcept -> std::span<const GraphID>;
        auto readers() const noexcept -> std::span<const GraphID>;
        auto refCount() const noexcept -> core::RangeExtent;

      private:
        GraphID m_id;
        std::string m_name;

        GraphID m_creator;

        std::vector<GraphID> m_writers;
        std::vector<GraphID> m_readers;

        core::RangeExtent m_ref_count;

        friend class GraphTaskBuilder;  // TODO rework this
        friend class FrameGraphBuilder; // TODO rework this
    };

    template<ResourceDescriptionType D>
    class STORMKIT_PUBLIC GraphResource: public GraphResourceBase {
      public:
        using Description = D;

        GraphResource(std::string name, GraphID creator, Description&& description);
        ~GraphResource() override;

        GraphResource(const GraphResource&)                    = delete;
        auto operator=(const GraphResource&) -> GraphResource& = delete;

        GraphResource(GraphResource&&) noexcept;
        auto operator=(GraphResource&&) noexcept -> GraphResource&;

        auto description() const noexcept -> const Description&;

      private:
        Description m_description;
    };

    using GraphBuffer = GraphResource<BufferDescription>;
    using GraphImage  = GraphResource<ImageDescription>;

    /////////////////////////////////////
    /////////////////////////////////////
    inline GraphResourceBase::GraphResourceBase(std::string name, GraphID creator)
        : m_creator { creator }, m_name { std::move(name) } {
        static GraphID s_next_id = 0;

        m_id = s_next_id++;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline GraphResourceBase::~GraphResourceBase() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline GraphResourceBase::GraphResourceBase(GraphResourceBase&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::operator=(GraphResourceBase&& other) noexcept
        -> GraphResourceBase& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::id() const noexcept -> GraphID {
        return m_id;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::name() const noexcept -> const std::string& {
        return m_name;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::transient() const noexcept -> bool {
        return m_creator != INVALID_ID;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::creator() const noexcept -> GraphID {
        return m_creator;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::writers() const noexcept -> std::span<const GraphID> {
        return m_writers;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::readers() const noexcept -> std::span<const GraphID> {
        return m_readers;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphResourceBase::refCount() const noexcept -> core::RangeExtent {
        return m_ref_count;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    GraphResource<D>::GraphResource(std::string name, GraphID creator, Description&& description)
        : GraphResourceBase { std::move(name), creator },
          m_description { std::forward<Description>(description) } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    GraphResource<D>::~GraphResource() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    GraphResource<D>::GraphResource(GraphResource&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    auto GraphResource<D>::operator=(GraphResource&& other) noexcept -> GraphResource& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    auto GraphResource<D>::description() const noexcept -> const Description& {
        return m_description;
    }
} // namespace stormkit::engine
