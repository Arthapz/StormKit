// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/AssertMacro.hpp>
#include <stormkit/Core/MemoryMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

#include <stormkit/Core/Types.hpp>

#include <stormkit/gpu/Fwd.hpp>

export module stormkit.engine.render.framegraph.GraphTask;

import stormkit.engine.render.framegraph.GraphResource;
import stormkit.engine.render.framegraph.GraphID;

export namespace stormkit::engine {
    class GraphTaskBuilder;

    class STORMKIT_API GraphTaskBase {
      public:
        enum class Type {
            Graphics,
            Compute
        };

        GraphTaskBase(std::string name, Type type = Type::Graphics, bool cull_imune = false);
        virtual ~GraphTaskBase();

        GraphTaskBase(const GraphTaskBase&)                    = delete;
        auto operator=(const GraphTaskBase&) -> GraphTaskBase& = delete;

        GraphTaskBase(GraphTaskBase&&) noexcept;
        auto operator=(GraphTaskBase&&) noexcept -> GraphTaskBase&;

        auto id() const noexcept -> GraphID;
        auto name() const noexcept -> const std::string&;
        auto type() const noexcept -> Type;
        auto cullImune() const noexcept -> bool;
        auto refCount() const noexcept -> core::RangeExtent;

        auto creates() const noexcept -> std::span<const GraphID>;
        auto writes() const noexcept -> std::span<const GraphID>;
        auto reads() const noexcept -> std::span<const GraphID>;

        auto setCullImune(bool imune) noexcept -> void;

      protected:
        virtual auto setup(GraphTaskBuilder& builder) -> void                              = 0;
        virtual auto execute(gpu::RenderPass *renderpass, gpu::CommandBuffer& cmb) -> void = 0;

        friend class FrameGraphBuilder; // TODO rework this

      private:
        GraphID m_id;
        std::string m_name;
        Type m_type;
        bool m_cull_imune;
        core::RangeExtent m_ref_count = 0;

        std::vector<GraphID> m_creates;
        std::vector<GraphID> m_writes;
        std::vector<GraphID> m_reads;

        friend class GraphTaskBuilder;  // TODO rework this
        friend class FrameGraphBuilder; // TODO rework this
    };

    template<class T>
    class STORMKIT_PUBLIC GraphTask: public GraphTaskBase {
      public:
        using TaskData      = T;
        using SetupCallback = std::function<void(T&, GraphTaskBuilder&)>;
        using ExecuteCallback =
            std::function<void(const T&, gpu::RenderPass *, gpu::CommandBuffer&)>;

        GraphTask(std::string name,
                  SetupCallback&& setup,
                  ExecuteCallback&& execute,
                  Type type       = Type::Graphics,
                  bool cull_imune = false);
        ~GraphTask() override;

        GraphTask(const GraphTask&)                    = delete;
        auto operator=(const GraphTask&) -> GraphTask& = delete;

        GraphTask(GraphTask&&) noexcept                    = default;
        auto operator=(GraphTask&&) noexcept -> GraphTask& = default;

        auto data() const noexcept -> const TaskData&;

      protected:
        auto setup(GraphTaskBuilder& builder) -> void override;
        auto execute(gpu::RenderPass *renderpass, gpu::CommandBuffer& cmb) -> void override;

      private:
        TaskData m_data;

        SetupCallback m_setup;
        ExecuteCallback m_execute;
    };

    /////////////////////////////////////
    /////////////////////////////////////
    inline GraphTaskBase::GraphTaskBase(std::string name, Type type, bool cull_imune)
        : m_name { std::move(name) }, m_type { type }, m_cull_imune { cull_imune } {
        static GraphID s_next_id = 0;

        m_id = s_next_id++;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline GraphTaskBase::~GraphTaskBase() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline GraphTaskBase::GraphTaskBase(GraphTaskBase&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::operator=(GraphTaskBase&& other) noexcept
        -> GraphTaskBase& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::id() const noexcept -> GraphID {
        return m_id;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::name() const noexcept -> const std::string& {
        return m_name;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::type() const noexcept -> Type {
        return m_type;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::cullImune() const noexcept -> bool {
        return m_cull_imune;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::refCount() const noexcept -> core::RangeExtent {
        return m_ref_count;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::creates() const noexcept -> std::span<const GraphID> {
        return m_creates;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::writes() const noexcept -> std::span<const GraphID> {
        return m_writes;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::reads() const noexcept -> std::span<const GraphID> {
        return m_reads;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto GraphTaskBase::setCullImune(bool imune) noexcept -> void {
        m_cull_imune = imune;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class TaskData>
    GraphTask<TaskData>::GraphTask(std::string name,
                                   SetupCallback&& setup,
                                   ExecuteCallback&& execute,
                                   Type type,
                                   bool cull_imune)
        : GraphTaskBase { std::move(name), type, cull_imune }, m_setup { std::move(setup) },
          m_execute { std::move(execute) } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class TaskData>
    GraphTask<TaskData>::~GraphTask() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<class TaskData>
    auto GraphTask<TaskData>::data() const noexcept -> const TaskData& {
        return m_data;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class TaskData>
    auto GraphTask<TaskData>::setup(GraphTaskBuilder& builder) -> void {
        m_setup(m_data, builder);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class TaskData>
    auto GraphTask<TaskData>::execute(gpu::RenderPass *renderpass, gpu::CommandBuffer& cmb)
        -> void {
        m_execute(m_data, renderpass, cmb);
    }
} // namespace stormkit::engine
