// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <iterator>
#include <memory>
#include <optional>
#include <ranges>
#include <vector>

#include <list>

#include <stormkit/Core/MemoryMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

#include <stormkit/Core/Types.hpp>

#include <stormkit/gpu/Fwd.hpp>

#include <stormkit/gpu/resource/Buffer.hpp>

export module stormkit.engine.render.core.BlockBuffer;

import stormkit.Engine;
import stormkit.engine.EngineObject;

export namespace stormkit::engine {
    class STORMKIT_API BlockBuffer: public EngineObject {
      public:
        struct Block {
            using Handle = core::Handle64<Block>;

            core::RangeExtent size;
            core::RangeExtent offset;

            bool free;

            Handle handle;
        };

        BlockBuffer(Engine& engine, const gpu::Buffer::CreateInfo& info);
        ~BlockBuffer();

        BlockBuffer(const BlockBuffer&)                    = delete;
        auto operator=(const BlockBuffer&) -> BlockBuffer& = delete;

        BlockBuffer(BlockBuffer&&) noexcept;
        auto operator=(BlockBuffer&&) noexcept -> BlockBuffer&;

        [[nodiscard]] auto size() const noexcept -> core::RangeExtent;
        [[nodiscard]] auto freeSpace() const noexcept -> core::RangeExtent;

        [[nodiscard]] auto requestBlock(core::RangeExtent size) noexcept -> Block::Handle;
        auto freeBlock(Block::Handle handle) -> void;

        [[nodiscard]] auto getBlock(Block::Handle handle) -> const Block&;

        auto defragment() noexcept -> void;

        [[nodiscard]] auto gpuBuffer() const noexcept -> const gpu::Buffer&;

      private:
        std::list<Block> m_blocks;
        gpu::Buffer m_buffer;

        core::RangeExtent m_size;
        core::RangeExtent m_free_space;

        core::UInt64 m_next_handle;
    };

    DECLARE_PTR_AND_REF(BlockBuffer);

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto BlockBuffer::size() const noexcept -> core::RangeExtent {
        return m_size;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto BlockBuffer::freeSpace() const noexcept -> core::RangeExtent {
        return m_free_space;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto BlockBuffer::getBlock(Block::Handle handle) -> const Block& {
        auto it = std::ranges::find_if(m_blocks, [&](const auto& b) { return b.handle == handle; });
        STORMKIT_ENSURES(it != std::ranges::cend(m_blocks));
        return *it;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto BlockBuffer::gpuBuffer() const noexcept -> const gpu::Buffer& {
        return m_buffer;
    }
} // namespace stormkit::engine
