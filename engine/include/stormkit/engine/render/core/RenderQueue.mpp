// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

#pragma once

#include <stormkit/core/Types.mpp>

#include <stormkit/wsi/Fwd.hpp>

#include <stormkit/gpu/Fwd.hpp>

#include <stormkit/gpu/resource/ImageView.mpp>

#include <stormkit/engine/Fwd.hpp>

namespace stormkit::engine {
    class STORMKIT_PUBLIC RenderQueue {
      public:
        using ID                         = core::UInt64;
        static constexpr auto INVALID_ID = std::numeric_limits<ID>::max();

        RenderQueue();
        ~RenderQueue();

        RenderQueue(const RenderQueue &) = delete;
        auto operator=(const RenderQueue &) -> RenderQueue & = delete;

        RenderQueue(RenderQueue &&) noexcept;
        auto operator=(RenderQueue &&) noexcept -> RenderQueue &;

        auto addMesh(const MeshComponent &mesh) -> ID;
        auto removeMesh(ID id) -> void;

        auto update() -> void;

      private:
        struct RenderEntry {
            RenderEntry(ID _id, const MeshComponent &_mesh) noexcept
                : id { _id }, mesh { &_mesh } {};

            ID id;

            core::USize vertex_buffer_id;
            core::USize vertex_buffer_offset;

            const MeshComponent *mesh;
        };

        std::mutex m_mutex;

        ID m_next_id = 0;
        std::vector<RenderEntry> m_entries;

        std::vector<RenderEntry> m_to_be_added;
        std::vector<ID> m_to_be_removed;

        std::vector<gpu::Buffer> m_vertex_buffers;
    };
} // namespace stormkit::engine
