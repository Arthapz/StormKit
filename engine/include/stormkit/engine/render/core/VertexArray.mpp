// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.engine.render.renderqueue;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::wsi - ///////////
    #include <stormkit/wsi/Fwd.hpp>

    /////////// - StormKit::gpu - ///////////
    #include <stormkit/gpu/Fwd.hpp>
    #include <stormkit/gpu/pipeline/VertexBindingDescription.mpp>
    #include <stormkit/gpu/pipeline/VertexInputAttributeDescription.mpp>

    #include <stormkit/gpu/resource/ImageView.mpp>

    /////////// - StormKit::engine - ///////////
    #include <stormkit/engine/Fwd.hpp>
#endif

    namespace stormkit::engine {
        struct Vertex {
            core::Vector3f position = { 0.f, 0.f, 0.f };
            core::Vector3f normal   = { 1.f, 1.f, 1.f };
            core::Vector3f color    = { 1.f, 1.f, 1.f };
            core::Vector2f uv       = { 0.f, 0.f };
        };

        struct VertexView {
            VertexView(core::Vector3f &_position,
                       core::Vector3f &_normal,
                       core::Vector3f &_color,
                       core::Vector2f &_uv)
                : position { &_position }, normal { &_normal }, color { &_color }, uv { &_uv } {}

            core::Vector3f *position;
            core::Vector3f *normal;
            core::Vector3f *color;
            core::Vector2f *uv;
        };

        class STORMKIT_PUBLIC VertexArray {
          public:
            using Iterator      = std::vector<VertexView>::iterator;
            using ConstIterator = std::vector<VertexView>::const_iterator;

            VertexArray();
            VertexArray(std::span<const Vertex> vertices);
            ~VertexArray();

            VertexArray(const VertexArray &);
            auto operator=(const VertexArray &) -> VertexArray &;

            VertexArray(VertexArray &&) noexcept;
            auto operator=(VertexArray &&) noexcept -> VertexArray &;

            auto resize(core::USize size) -> void;

            auto addVertices(std::span<const Vertex> vertices) -> void;
            auto addVertex(const Vertex &vertex) -> void;
            auto removeVertex(core::USize position) -> void;
            auto removeVertices(core::USize first, core::USize count) -> void;

            auto data() noexcept -> std::span<VertexView>;
            auto data() const noexcept -> std::span<const VertexView>;

            auto begin() noexcept -> Iterator;
            auto begin() const noexcept -> ConstIterator;
            auto cbegin() const noexcept -> ConstIterator;

            auto end() noexcept -> Iterator;
            auto end() const noexcept -> ConstIterator;
            auto cend() const noexcept -> ConstIterator;

            auto positions() const noexcept -> std::span<const core::Vector3f>;
            auto normals() const noexcept -> std::span<const core::Vector3f>;
            auto colors() const noexcept -> std::span<const core::Vector3f>;
            auto uvs() const noexcept -> std::span<const core::Vector2f>;

            static auto bindingDescriptions() noexcept
                -> std::span<const stormkit::gpu::VertexBindingDescription>;
            static auto attributesDescriptions() noexcept
                -> std::span<const stormkit::gpu::VertexInputAttributeDescription>;

          private:
            std::vector<core::Vector3f> m_positions;
            std::vector<core::Vector3f> m_normals;
            std::vector<core::Vector3f> m_colors;
            std::vector<core::Vector2f> m_uvs;

            std::vector<VertexView> m_vertices;

            core::USize m_size = 0;
        };
    } // namespace stormkit::engine
