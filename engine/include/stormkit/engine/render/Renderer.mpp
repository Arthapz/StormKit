// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.engine.render.renderer;

/////////// - STL - ///////////
import <vector>;

/////////// - StormKit::render - ///////////
import stormkit.gpu.core.vulkan;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::entities - ///////////
    #include <stormkit/entities/Fwd.hpp>

    /////////// - StormKit::wsi - ///////////
    #include <stormkit/wsi/Fwd.hpp>

    /////////// - StormKit::gpu - ///////////
    #include <stormkit/gpu/Fwd.hpp>
    #include <stormkit/gpu/core/CommandBuffer.mpp>

    #include <stormkit/gpu/resource/ImageView.mpp>

    /////////// - StormKit::gpu - ///////////
    #include <stormkit/engine/Fwd.hpp>
    #include <stormkit/engine/render/framegraph/GraphResource.mpp>
#endif

    namespace stormkit::engine {
        class STORMKIT_PUBLIC Renderer {
          public:
            explicit Renderer(Engine &engine);
            ~Renderer();

            Renderer(const Renderer &) = delete;
            auto operator=(const Renderer &) -> Renderer & = delete;

            Renderer(Renderer &&) noexcept;
            auto operator=(Renderer &&) noexcept -> Renderer &;

            auto setBuildFrameGraphCallback(BuildFrameGraphCallback callback) -> void;

            auto instance() const noexcept -> const gpu::Instance &;
            auto device() const noexcept -> const gpu::Device &;
            auto surface() const noexcept -> const gpu::Surface &;

            auto pipelineCache() noexcept -> gpu::PipelineCache &;
            auto pipelineCache() const noexcept -> const gpu::PipelineCache &;

          private:
            enum class FrameGraphState { Updated, Old };

            auto threadLoop() -> void;
            auto rebuildFrameGraph() -> void;

            Engine *m_engine = nullptr;
            BuildFrameGraphCallback m_build_framegraph;

            gpu::InstanceOwnedPtr m_instance;
            gpu::DeviceOwnedPtr m_device;
            gpu::SurfaceOwnedPtr m_surface;

            std::atomic_bool m_stop_thread = false;
            std::thread m_render_thread;

            std::atomic_bool m_updated = true;
            RenderQueueOwnedPtr m_render_queue;
            FrameGraphBuilderOwnedPtr m_builder;

            gpu::PipelineCacheOwnedPtr m_pipeline_cache;

            std::vector<BakedFrameGraphOwnedPtr> m_framegraphs;
            std::vector<FrameGraphState> m_framegraph_states;
        };
    } // namespace stormkit::engine

#include "Renderer.inl"
