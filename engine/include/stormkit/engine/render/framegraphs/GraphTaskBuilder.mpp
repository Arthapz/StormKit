// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.engine.render.renderer;

/////////// - STL - ///////////
import <vector>;

/////////// - StormKit::render - ///////////
import stormkit.gpu.core.vulkan;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Types.mpp>

    #include <stormkit/engine/render/framegraphs/FrameGraphBuilder.mpp>
    #include <stormkit/engine/render/framegraphs/Fwd.hpp>
#endif

    namespace stormkit::engine {
        class STORMKIT_PUBLIC GraphTaskBuilder {
          public:
            GraphTaskBuilder(GraphTaskBase &task, FrameGraphBuilder &framegraph) noexcept;
            ~GraphTaskBuilder() noexcept;

            GraphTaskBuilder(const GraphTaskBuilder &) noexcept;
            auto operator=(const GraphTaskBuilder &) noexcept -> GraphTaskBuilder &;

            GraphTaskBuilder(GraphTaskBuilder &&) noexcept;
            auto operator=(GraphTaskBuilder &&) noexcept -> GraphTaskBuilder &;

            template<typename Description>
            auto create(std::string name, Description &&description)
                -> const GraphResource<Description> &;

            template<typename Description>
            auto read(GraphResource<Description> &resource) -> GraphResource<Description> &;

            template<typename Description>
            auto write(GraphResource<Description> &resource) -> GraphResource<Description> &;

          private:
            GraphTaskBase *m_task           = nullptr;
            FrameGraphBuilder *m_framegraph = nullptr;
        };
    } // namespace stormkit::engine

#include "GraphTaskBuilder.inl"
