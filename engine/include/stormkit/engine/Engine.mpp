// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <iterator>
#include <memory>
#include <optional>
#include <ranges>
#include <vector>

#include <stormkit/Core/MemoryMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

#include <stormkit/Core/ThreadPool.hpp>
#include <stormkit/Core/Types.hpp>

#include <stormkit/wsi/EventHandler.hpp>
#include <stormkit/wsi/Fwd.hpp>

#include <stormkit/gpu/core/Surface.hpp>

export module stormkit.Engine;

import stormkit.entities.EntityManager;

export namespace stormkit::engine {
    class Renderer;
    DECLARE_PTR_AND_REF(Renderer);

    class STORMKIT_API Engine {
      public:
        explicit Engine(wsi::Window& window);
        explicit Engine(const core::math::ExtentU& extent,
                        gpu::Surface::Buffering buffering = gpu::Surface::Buffering::Triple);

        ~Engine();

        Engine(const Engine&)                    = delete;
        auto operator=(const Engine&) -> Engine& = delete;

        Engine(Engine&&) noexcept;
        auto operator=(Engine&&) noexcept -> Engine&;

        auto world() noexcept -> entities::EntityManager&;
        auto world() const noexcept -> const entities::EntityManager&;

        auto window() const noexcept -> wsi::Window&;

        auto threadPool() noexcept -> core::ThreadPool&;
        auto threadPool() const noexcept -> const core::ThreadPool&;

        auto renderer() noexcept -> Renderer&;

        auto run(const int argc, const char **argv) -> stormkit::core::Int32;

      private:
        wsi::Window *m_window = nullptr;
        std::unique_ptr<wsi::EventHandler> m_event_handler;

        core::ThreadPool m_thread_pool;

        std::unique_ptr<Renderer> m_renderer;

        entities::EntityManager m_world;

        std::unique_ptr<log::Logger> m_logger;

        bool m_fullscreen_enabled = false;
    };

    DECLARE_PTR_AND_REF(Engine);

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Engine::world() noexcept -> entities::EntityManager& {
        return m_world;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Engine::world() const noexcept -> const entities::EntityManager& {
        return m_world;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Engine::window() const noexcept -> wsi::Window& {
        return *m_window;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Engine::threadPool() noexcept -> core::ThreadPool& {
        return m_thread_pool;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Engine::threadPool() const noexcept -> const core::ThreadPool& {
        return m_thread_pool;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Engine::renderer() noexcept -> Renderer& {
        return *m_renderer;
    }
} // namespace stormkit::engine
