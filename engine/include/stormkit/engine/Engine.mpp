// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

#pragma once

#include <stormkit/core/ThreadPool.mpp>
#include <stormkit/core/Types.mpp>

#include <stormkit/wsi/EventHandler.mpp>
#include <stormkit/wsi/Fwd.hpp>

#include <stormkit/entities/EntityManager.mpp>

#include <stormkit/engine/Fwd.hpp>

namespace stormkit::engine {
    class STORMKIT_PUBLIC Engine {
      public:
        explicit Engine(wsi::Window &window);
        ~Engine();

        Engine(const Engine &) = delete;
        auto operator=(const Engine &) -> Engine & = delete;

        Engine(Engine &&) noexcept;
        auto operator=(Engine &&) noexcept -> Engine &;

        auto world() noexcept -> entities::EntityManager &;
        auto world() const noexcept -> const entities::EntityManager &;

        auto window() const noexcept -> wsi::Window &;

        auto threadPool() noexcept -> core::ThreadPool &;
        auto threadPool() const noexcept -> const core::ThreadPool &;

        auto renderer() noexcept -> Renderer &;

        auto run(const int argc, const char **argv) -> stormkit::core::Int32;

      private:
        wsi::Window *m_window = nullptr;
        wsi::EventHandler m_event_handler;

        core::ThreadPool m_thread_pool;

        RendererOwnedPtr m_renderer;

        entities::EntityManager m_world;

        bool m_fullscreen_enabled = false;
    };

} // namespace stormkit::engine

#include "Engine.inl"
