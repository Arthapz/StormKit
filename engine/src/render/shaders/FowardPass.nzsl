[nzsl_version("1.0")]

module Shader;

struct VertIn
{
    [location(0)] position: vec3[f32],
    [location(1)] normal: vec3[f32],
    [location(2)] color: vec3[f32],
    [location(3)] uv: vec2[f32]
}

struct VertOut
{
    [builtin(position)] position: vec4[f32],
    [location(0)] normal: vec3[f32],
    [location(1)] color: vec3[f32],
    [location(2)] uv: vec2[f32]
}

[entry(vert)]
fn main(input: VertIn) -> VertOut
{
    let output: VertOut;

    output.position = vec4[f32](input.position, 1.0);
    output.normal = input.normal;
    output.color = input.color;
    output.uv = input.uv;

    return output;
}

struct FragOut
{
    [location(0)] color: vec4[f32]
}

[entry(frag)]
fn main(input: VertOut) -> FragOut
{
    let output: FragOut;
    output.color = vec4[f32](input.color, 1.);

    return output;
}
