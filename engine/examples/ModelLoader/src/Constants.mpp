// Copryright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/MemoryMacro.hpp>
#include <stormkit/log/LogMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.triangle.constants;

// clang-format on
export {
#else
    
    #include <array>

    /////////// - StormKit::Log - ///////////
    #include <stormkit/core/Memory.mpp>

    /////////// - StormKit::Log - ///////////
    #include <stormkit/log/LogHandler.mpp>

    /////////// - StormKit::Render - ///////////
    #include <stormkit/gpu/core/Types.mpp>

    #include <stormkit/gpu/pipeline/VertexBindingDescription.mpp>
    #include <stormkit/gpu/pipeline/VertexInputAttributeDescription.mpp>

    #include <stormkit/engine/render/core/VertexArray.mpp>
#endif

    static constexpr auto WINDOW_TITLE = "StormKit Model Loading Example";

    static constexpr auto VERTICES = std::array {
        stormkit::engine::Vertex { .position = { 1.f, 1.f, 1.f }, .color = { 1.f, 0.f, 0.f } },
        stormkit::engine::Vertex { .position = { -1.f, 1.f, 1.f }, .color = { 0.f, 1.f, 0.f } },
        stormkit::engine::Vertex { .position = { 0.f, -1.f, 1.f }, .color = { 0.f, 0.f, 1.f } },
    };

    static constexpr auto VERTEX_SHADER_DATA = stormkit::core::makeStaticByteArray(
#include "vertex.vert.spv.h"
    );
    static constexpr auto FRAGMENT_SHADER_DATA = stormkit::core::makeStaticByteArray(
#include "fragment.frag.spv.h"
    );

    LOGGER("StormKit.Triangle");
