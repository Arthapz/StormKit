// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/PlatformMacro.hpp>

#define STATE(TYPE, NAME, MEMBER)              \
    auto NAME() noexcept->TYPE & {             \
        STORMKIT_EXPECTS(m_is_baked == false); \
        return m_state.MEMBER;                 \
    }                                          \
    [[nodiscard]] auto NAME() const noexcept->const TYPE & { return m_state.MEMBER; }

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.render.pipeline.computepipeline;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Memory.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/render/core/Fwd.hpp>
    #include <stormkit/render/core/Types.mpp>
    #include <stormkit/render/core/Vulkan.mpp>

    #include <stormkit/render/pipeline/AbstractPipeline.mpp>
    #include <stormkit/render/pipeline/ComputePipelineState.mpp>

    #include <stormkit/render/pipeline/Fwd.hpp>
#endif

    namespace stormkit::render {
        class STORMKIT_PUBLIC ComputePipeline final: public AbstractPipeline {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Pipeline;

            ComputePipeline(const Device &device, const PipelineCache *cache = nullptr) noexcept;
            ~ComputePipeline() override;

            ComputePipeline(const ComputePipeline &) = delete;
            auto operator=(const ComputePipeline &) -> ComputePipeline & = delete;

            ComputePipeline(ComputePipeline &&) noexcept;
            auto operator=(ComputePipeline &&) noexcept -> ComputePipeline &;

            STATE(ComputePipelineShaderState, shaderState, shader_state)
            STATE(ComputePipelineLayout, layout, layout)

            auto bake() -> void override;

            auto setState(const ComputePipelineState &state) noexcept -> void;
            [[nodiscard]] auto state() noexcept -> ComputePipelineState &;
            [[nodiscard]] auto state() const noexcept -> const ComputePipelineState &;

          private:
            ComputePipelineState m_state = {};
        };
    } // namespace stormkit::render

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#undef STATE

#include "ComputePipeline.inl"
