// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/HashMacro.hpp>
#include <stormkit/core/PlatformMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.render.pipeline.descriptorset;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Memory.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/render/core/Fwd.hpp>
    #include <stormkit/render/core/Types.mpp>
    #include <stormkit/render/core/Vulkan.mpp>

    #include <stormkit/render/resource/Fwd.hpp>

    #include <stormkit/render/pipeline/Fwd.hpp>
#endif

    namespace stormkit::render {
        class STORMKIT_PUBLIC DescriptorSet {
            struct Tag {};

          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Descriptor_Set;

            using Deleter = std::function<void(VkDescriptorSet)>;

            DescriptorSet(const DescriptorPool &pool,
                          std::vector<DescriptorType> type,
                          VkDescriptorSet sets,
                          Deleter deleter,
                          Tag);
            ~DescriptorSet();

            DescriptorSet(const DescriptorSet &) = delete;
            auto operator=(const DescriptorSet &) -> DescriptorSet & = delete;

            DescriptorSet(DescriptorSet &&) noexcept;
            auto operator=(DescriptorSet &&) noexcept -> DescriptorSet &;

            auto update(std::span<const Descriptor> descriptors) -> void;

            [[nodiscard]] auto types() const noexcept -> std::span<const DescriptorType>;

            [[nodiscard]] operator VkDescriptorSet() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkDescriptorSet;
            [[nodiscard]] constexpr auto vkObjectType() const noexcept -> VkObjectType;

            DEVICE_CONST_GETTER
          private:
            const Device *m_device       = nullptr;
            const DescriptorPool *m_pool = nullptr;

            std::vector<DescriptorType> m_types;

            VkDescriptorSet m_descriptor_set;

            Deleter m_deleter;
            friend class DescriptorPool;
        };
    } // namespace stormkit::render

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "DescriptorSet.inl"
