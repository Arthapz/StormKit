// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

#pragma once

#include <stormkit/core/PlatformMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.render.sync.fence;
// clang-format on
export {
#else
    #include <chrono>
    #include <optional>

    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Memory.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/render/core/Enums.mpp>
    #include <stormkit/render/core/Fwd.hpp>
    #include <stormkit/render/core/Vulkan.mpp>
#endif

    namespace stormkit::render {
        class STORMKIT_PUBLIC Fence {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Fence;

            enum class Status { Signaled, Unsignaled };

            explicit Fence(const Device &device);
            ~Fence();

            Fence(const Fence &) = delete;
            auto operator=(const Fence &) -> Fence & = delete;

            Fence(Fence &&) noexcept;
            auto operator=(Fence &&) noexcept -> Fence &;

            auto wait(std::chrono::milliseconds wait_for = std::chrono::milliseconds::max()) const
                -> Result;
            auto reset() -> void;

            [[nodiscard]] auto status() const noexcept -> Status;

            [[nodiscard]] operator VkFence() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkFence;
            [[nodiscard]] constexpr auto vkObjectType() const noexcept -> VkObjectType;

            DEVICE_CONST_GETTER
          private:
            const Device *m_device = nullptr;

            VkFence m_fence = VK_NULL_HANDLE;
        };
    } // namespace stormkit::render

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "Fence.inl"
