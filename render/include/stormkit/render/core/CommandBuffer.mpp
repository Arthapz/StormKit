// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

/////////// - StormKit::core - ///////////
#include <stormkit/core/PlatformMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.render.core.commandbuffer;
// clang-format on
export {
#else
    /////////// - STL - ///////////
    #include <span>

    /////////// - StormKit::color - ///////////
    #include <stormkit/core/Color.mpp>
    #include <stormkit/core/HashMap.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/render/core/Enums.mpp>
    #include <stormkit/render/core/Fwd.hpp>
    #include <stormkit/render/core/MemoryBarrier.mpp>
    #include <stormkit/render/core/Types.mpp>

    #include <stormkit/render/sync/Fwd.hpp>

    #include <stormkit/render/resource/Fwd.hpp>
    #include <stormkit/render/resource/Image.mpp>

    #include <stormkit/render/pipeline/ComputePipeline.mpp>
    #include <stormkit/render/pipeline/Fwd.hpp>
    #include <stormkit/render/pipeline/GraphicsPipeline.mpp>
#endif

    namespace stormkit::render {
        class STORMKIT_PUBLIC CommandBuffer {
            struct Tag {};

          public:
            enum class State { Initial, Recording, Executable };

            static constexpr auto DEBUG_TYPE = DebugObjectType::Command_Buffer;

            using Deleter = std::function<void(VkCommandBuffer)>;

            CommandBuffer(const Queue &queue,
                          CommandBufferLevel level,
                          VkCommandBuffer command_buffer,
                          Deleter deleter,
                          Tag);
            ~CommandBuffer();

            CommandBuffer(const CommandBuffer &) = delete;
            auto operator=(const CommandBuffer &) -> CommandBuffer & = delete;

            CommandBuffer(CommandBuffer &&) noexcept;
            auto operator=(CommandBuffer &&) noexcept -> CommandBuffer &;

            auto reset() noexcept -> void;
            auto submit(std::span<const Semaphore *> wait_semaphores   = {},
                        std::span<const Semaphore *> signal_semaphores = {},
                        Fence *fence = nullptr) const noexcept -> void;

            [[nodiscard]] auto state() const noexcept -> State;
            [[nodiscard]] auto level() const noexcept -> CommandBufferLevel;

            auto beginDebugRegion(std::string_view name,
                                  const core::RGBColorF &color = core::RGBColorDef::White<float>)
                -> void;
            auto insertDebugLabel(std::string_view name,
                                  const core::RGBColorF &color = core::RGBColorDef::White<float>)
                -> void;
            auto endDebugRegion() -> void;

            auto begin(bool one_time_submit                            = false,
                       std::optional<InheritanceInfo> inheritance_info = std::nullopt) -> void;
            auto end() -> void;

            auto
                beginRenderPass(const RenderPass &render_pass,
                                const Framebuffer &framebuffer,
                                std::span<const ClearValue> clear_values = std::array { ClearValue {
                                    ClearColor { .color = core::RGBColorDef::Silver<float> } } },
                                bool secondary_command_buffers           = false) -> void;
            auto nextSubPass() -> void;
            auto endRenderPass() -> void;

            auto bindGraphicsPipeline(const GraphicsPipeline &pipeline) -> void;
            auto bindComputePipeline(const ComputePipeline &pipeline) -> void;

            auto dispatch(core::UInt32 group_count_x,
                          core::UInt32 group_count_y,
                          core::UInt32 group_count_z) -> void;

            auto draw(core::UInt32 vertex_count,
                      core::UInt32 instance_count = 1u,
                      core::UInt32 first_vertex   = 0,
                      core::UInt32 first_instance = 0) -> void;
            auto drawIndexed(core::UInt32 index_count,
                             core::UInt32 instance_count = 1u,
                             core::UInt32 first_index    = 0u,
                             core::Int32 vertex_offset   = 0,
                             core::UInt32 first_instance = 0u) -> void;
            auto drawIndirect(const Buffer &buffer,
                              core::Int32 offset,
                              core::UInt32 draw_count,
                              core::USize stride) -> void;
            auto drawIndexedIndirect(const Buffer &buffer,
                                     core::Int32 offset,
                                     core::UInt32 draw_count,
                                     core::USize stride) -> void;

            auto bindVertexBuffers(std::span<const Buffer *> buffers,
                                   std::span<const core::UInt64> offsets) -> void;
            auto bindIndexBuffer(const Buffer &buffer,
                                 core::UInt64 offset = 0,
                                 bool large_indices  = false) -> void;
            auto bindDescriptorSets(const GraphicsPipeline &pipeline,
                                    std::span<const DescriptorSet *> descriptor_sets,
                                    std::span<const core::UInt32> dynamic_offsets = {}) -> void;
            auto bindDescriptorSets(const ComputePipeline &pipeline,
                                    std::span<const DescriptorSet *> descriptor_sets,
                                    std::span<const core::UInt32> dynamic_offsets = {}) -> void;

            auto copyBuffer(const Buffer &source,
                            const Buffer &destination,
                            core::USize size,
                            core::UInt64 src_offset = 0u,
                            core::UInt64 dst_offset = 0u) -> void;
            auto copyBufferToImage(const Buffer &source,
                                   const Image &destination,
                                   std::span<const BufferImageCopy> buffer_image_copies = {})
                -> void;
            auto copyImageToBuffer(const Image &source,
                                   const Buffer &destination,
                                   std::span<const BufferImageCopy> buffer_image_copies = {})
                -> void;
            auto copyImage(const Image &source,
                           const Image &destination,
                           ImageLayout source_layout,
                           ImageLayout destination_layout,
                           const ImageSubresourceLayers &source_subresource_layers,
                           const ImageSubresourceLayers &destination_subresource_layers,
                           const core::ExtentU &extent) -> void;

            auto resolveImage(const Image &source,
                              const Image &destination,
                              ImageLayout source_layout,
                              ImageLayout destination_layout,
                              const ImageSubresourceLayers &source_subresource_layers      = {},
                              const ImageSubresourceLayers &destination_subresource_layers = {})
                -> void;

            auto blitImage(const Image &source,
                           const Image &destination,
                           ImageLayout source_layout,
                           ImageLayout destination_layout,
                           std::span<const BlitRegion> regions,
                           Filter filter) -> void;

            auto transitionImageLayout(const Image &image,
                                       ImageLayout source_layout,
                                       ImageLayout destination_layout,
                                       const ImageSubresourceRange &subresource_range = {}) -> void;

            auto executeSubCommandBuffers(std::span<const CommandBuffer *> command_buffers) -> void;

            auto setViewport(core::UInt32 first_viewport, std::span<const Viewport> viewports)
                -> void;

            auto setScissor(core::UInt32 first_scissor, std::span<const Scissor> scissors) -> void;

            auto pipelineBarrier(PipelineStageFlag src_mask,
                                 PipelineStageFlag dst_mask,
                                 DependencyFlag dependency,
                                 std::span<const MemoryBarrier> memory_barriers,
                                 std::span<const BufferMemoryBarrier> buffer_memory_barriers,
                                 std::span<const ImageMemoryBarrier> image_memory_barriers) -> void;

            auto pushConstants(const GraphicsPipeline &pipeline,
                               ShaderStageFlag stage,
                               core::ByteConstSpan data,
                               core::UInt32 offset = 0u) -> void;
            auto pushConstants(const ComputePipeline &pipeline,
                               ShaderStageFlag stage,
                               core::ByteConstSpan data,
                               core::UInt32 offset = 0u) -> void;

            [[nodiscard]] operator VkCommandBuffer() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkCommandBuffer;
            [[nodiscard]] constexpr auto vkObjectType() const noexcept -> VkObjectType;

          private:
            CommandBuffer() = delete;

            State m_state              = State::Initial;
            const Queue *m_queue       = nullptr;
            CommandBufferLevel m_level = CommandBufferLevel::Primary;

            VkCommandBuffer m_command_buffer = VK_NULL_HANDLE;

            Deleter m_deleter;
            friend class Queue;
        };

        DECLARE_PTR_AND_REF(CommandBuffer);
    } // namespace stormkit::render

#include "CommandBuffer.inl"

#if defined(STORMKIT_CXX20_MODULES)
}
#endif
