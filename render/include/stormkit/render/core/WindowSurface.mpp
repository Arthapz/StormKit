// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/PlatformMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.render.core.offscreensurface;
// clang-format on
export {
#else
    #include <stormkit/core/Math.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::window - ///////////
    #if STORMKIT_WSI_ENABLED
        #include <stormkit/wsi/Fwd.hpp>
    #else
namespace stormkit::wsi {
    class Window;

    DECLARE_PTR_AND_REF(Window);
} // namespace stormkit::wsi
    #endif

    /////////// - StormKit::render - ///////////
    #include <stormkit/render/core/Enums.mpp>
    #include <stormkit/render/core/Fwd.hpp>
    #include <stormkit/render/core/Surface.mpp>
#endif

    namespace stormkit::render {
        class STORMKIT_PUBLIC WindowSurface final: public Surface {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Surface;

            WindowSurface(const wsi::Window &window,
                          const Instance &instance,
                          Buffering buffering = Buffering::Swapchain);
            ~WindowSurface() override;

            WindowSurface(const WindowSurface &) = delete;
            auto operator=(const WindowSurface &) -> WindowSurface & = delete;

            WindowSurface(WindowSurface &&) noexcept;
            auto operator=(WindowSurface &&) noexcept -> WindowSurface &;

            auto initialize(const Device &device) -> void override;
            auto recreate() -> void override;
            auto destroy() -> void override;

            [[nodiscard]] auto acquireNextFrame() -> Frame override;
            auto present(const Frame &frame) -> void override;

            [[nodiscard]] operator VkSurfaceKHR() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkSurfaceKHR;
            [[nodiscard]] constexpr auto vkObjectType() const noexcept -> VkObjectType;

          private:
            WindowSurface() = delete;

            auto createSwapchain() -> void;
            auto destroySwapchain() -> void;

            auto chooseSwapSurfaceFormat(std::span<const VkSurfaceFormatKHR> formats) noexcept
                -> VkSurfaceFormatKHR;
            auto chooseSwapPresentMode(std::span<const VkPresentModeKHR> present_modes) noexcept
                -> VkPresentModeKHR;
            auto chooseSwapExtent(const VkSurfaceCapabilitiesKHR &capabilities) noexcept
                -> VkExtent2D;
            auto chooseImageCount(const VkSurfaceCapabilitiesKHR &capabilities) noexcept
                -> core::UInt32;

            const wsi::Window *m_window = nullptr;

            bool m_initialized = false;

            VkSurfaceKHR m_surface         = VK_NULL_HANDLE;
            VkSwapchainKHR m_swapchain     = VK_NULL_HANDLE;
            VkSwapchainKHR m_old_swapchain = VK_NULL_HANDLE;
        };

        DECLARE_PTR_AND_REF(WindowSurface);
    } // namespace stormkit::render

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "WindowSurface.inl"
