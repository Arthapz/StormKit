// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/HashMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.render.resource.types;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Color.mpp>
    #include <stormkit/core/Math.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/render/core/Enums.mpp>

    #include <stormkit/render/Fwd.hpp>

    #include <stormkit/render/resource/ImageSubresourceLayers.mpp>
    #include <stormkit/render/resource/ImageSubresourceRange.mpp>
#endif

    namespace stormkit::render {
        struct Viewport {
            core::Vector2f position;
            core::ExtentF extent;
            core::Vector2f depth;
        };

        struct Scissor {
            core::Vector2i offset;
            core::ExtentU extent;
        };

        struct ClearColor {
            core::RGBColorF color = stormkit::core::RGBColorDef::Silver<float>;
        };

        struct ClearDepthStencil {
            float depth          = 1.f;
            core::UInt32 stencil = 0;
        };

        using ClearValue = std::variant<ClearColor, ClearDepthStencil>;

        struct InheritanceInfo {
            const RenderPass *render_pass  = nullptr;
            core::uint32 subpass           = 0;
            const Framebuffer *framebuffer = nullptr;
        };

        struct BufferImageCopy {
            core::UInt32 buffer_offset;
            core::UInt32 buffer_row_length;
            core::UInt32 buffer_image_height;

            ImageSubresourceLayers subresource_layers;

            core::Vector3i offset;
            core::ExtentU extent;
        };

        struct BlitRegion {
            ImageSubresourceLayers source;
            ImageSubresourceLayers destination;

            std::array<core::ExtentI, 2> source_offset;
            std::array<core::ExtentI, 2> destination_offset;
        };

        struct PushConstantRange {
            ShaderStageFlag stages;
            core::UInt32 offset;
            core::USize size;
        };

        struct BufferDescriptor {
            DescriptorType type = DescriptorType::Uniform_Buffer;
            core::UInt32 binding;
            const Buffer *buffer;
            core::UInt32 range;
            core::UInt32 offset;
        };

        struct ImageDescriptor {
            DescriptorType type = DescriptorType::Combined_Image_Sampler;
            core::UInt32 binding;
            ImageLayout layout;
            const ImageView *image_view;
            const Sampler *sampler;
        };

        using Descriptor = std::variant<BufferDescriptor, ImageDescriptor>;
        using ClearValue = std::variant<ClearColor, ClearDepthStencil>;
        using SpirvID    = core::UInt32;
    } // namespace stormkit::render

    HASH_FUNC(stormkit::render::Viewport)
    HASH_FUNC(stormkit::render::Scissor)
    HASH_FUNC(stormkit::render::BufferDescriptor)
    HASH_FUNC(stormkit::render::ImageDescriptor)
    HASH_FUNC(stormkit::render::Descriptor)

#if defined(STORMKIT_CXX20_MODULES)
}
#endif
