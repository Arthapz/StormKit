// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/PlatformMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.render.resource.shader;
// clang-format on
export {
#else
    #include <filesystem>

    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Memory.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/render/core/Enums.mpp>
    #include <stormkit/render/core/Fwd.hpp>
    #include <stormkit/render/core/Types.mpp>
    #include <stormkit/render/core/Vulkan.mpp>

//#include <storm/render/pipeline/DescriptorSetLayout.mpp>
#endif

    namespace stormkit::render {
        class STORMKIT_PUBLIC Shader {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Shader_Module;

            Shader(std::filesystem::path filepath, ShaderStageFlag type, const Device &device);
            Shader(core::ByteConstSpan data, ShaderStageFlag type, const Device &device);
            Shader(std::span<const SpirvID> data, ShaderStageFlag type, const Device &device);
            ~Shader();

            Shader(const Shader &) = delete;
            auto operator=(const Shader &) -> Shader & = delete;

            Shader(Shader &&) noexcept;
            auto operator=(Shader &&) noexcept -> Shader &;

            [[nodiscard]] auto type() const noexcept -> ShaderStageFlag;
            [[nodiscard]] auto source() const noexcept -> core::ByteConstSpan;
            // const DescriptorSetLayout &descriptorSetLayout() const noexcept;

            [[nodiscard]] operator VkShaderModule() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkShaderModule;
            [[nodiscard]] constexpr auto vkObjectType() const noexcept -> VkObjectType;

            DEVICE_CONST_GETTER
          private:
            Shader() = delete;

            auto compile() noexcept -> void;
            auto reflect() noexcept -> void;

            const Device *m_device = nullptr;

            ShaderStageFlag m_type   = ShaderStageFlag::None;
            core::ByteArray m_source = {};

            VkShaderModule m_shader_module = VK_NULL_HANDLE;
            // DescriptorSetLayout m_descriptor_set_layout;
        };
    } // namespace stormkit::render

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "Shader.inl"
