// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;


#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Engine:Renderer.GraphResource;

import std;

import stormkit.Core;


import :Vulkan;

import :Renderer.GraphID;

export namespace stormkit::engine {
    struct BufferDescription {
        core::RangeExtent size;
    };

    struct ImageDescription {
        core::math::ExtentU extent;
        vk::ImageType       type;
        vk::Format          format;

        core::UInt32 layers = 1u;

        std::optional<vk::ClearValue> clear_value;
    };

    template<class T>
    concept ResourceDescriptionType =
        core::Is<T, BufferDescription> || core::Is<T, ImageDescription>;

    template<ResourceDescriptionType D>
    class STORMKIT_API GraphResource {
      public:
        using Description = D;

        GraphResource(std::string name, Description&& description, GraphID creator);
        virtual ~GraphResource();

        GraphResource(const GraphResource&)                    = delete;
        auto operator=(const GraphResource&) -> GraphResource& = delete;

        GraphResource(GraphResource&&) noexcept;
        auto operator=(GraphResource&&) noexcept -> GraphResource&;

        [[nodiscard]] auto id() const noexcept -> GraphID;
        [[nodiscard]] auto name() const noexcept -> const std::string&;
        [[nodiscard]] auto transient() const noexcept -> bool;
        [[nodiscard]] auto creator() const noexcept -> GraphID;
        [[nodiscard]] auto writers() const noexcept -> const std::vector<GraphID>&;
        [[nodiscard]] auto readers() const noexcept -> const std::vector<GraphID>&;
        [[nodiscard]] auto refCount() const noexcept -> core::RangeExtent;
        [[nodiscard]] auto description() const noexcept -> const Description&;

      private:
        std::string m_name;
        Description m_description;
        GraphID     m_id;

        GraphID m_creator;

        std::vector<GraphID> m_writers;
        std::vector<GraphID> m_readers;

        core::RangeExtent m_ref_count;

        friend class GraphTaskBuilder;  // TODO rework this
        friend class FrameGraphBuilder; // TODO rework this
    };

    using GraphBuffer = GraphResource<BufferDescription>;
    using GraphImage  = GraphResource<ImageDescription>;
} // namespace stormkit::engine

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::engine {
    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE GraphResource<D>::GraphResource(std::string   name,
                                                          Description&& description,
                                                          GraphID       creator)
        : m_creator { creator }, m_name { std::move(name) },
          m_description { std::forward<Description>(description) } {
        static GraphID s_next_id = 0;

        m_id = s_next_id++;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE GraphResource<D>::~GraphResource() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE GraphResource<D>::GraphResource(GraphResource&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::operator=(GraphResource&& other) noexcept
        -> GraphResource& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::id() const noexcept -> GraphID {
        return m_id;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::name() const noexcept -> const std::string& {
        return m_name;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::transient() const noexcept -> bool {
        return m_creator != INVALID_ID;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::creator() const noexcept -> GraphID {
        return m_creator;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::writers() const noexcept
        -> const std::vector<GraphID>& {
        return m_writers;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::readers() const noexcept
        -> const std::vector<GraphID>& {
        return m_readers;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::refCount() const noexcept -> core::RangeExtent {
        return m_ref_count;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<ResourceDescriptionType D>
    STORMKIT_FORCE_INLINE auto GraphResource<D>::description() const noexcept
        -> const Description& {
        return m_description;
    }
} // namespace stormkit::engine
