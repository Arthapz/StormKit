// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Engine:Renderer.BakedFrameGraph;

import std;

import stormkit.Core;

import :Renderer.GraphID;
import :Renderer.RenderSurface;

export namespace stormkit::engine {
    class FrameGraphBuilder;

    class STORMKIT_API BakedFrameGraph {
        struct Data {
            struct Task {
                GraphID id;

                vk::raii::CommandBuffer cmb;

                std::vector<vk::ClearValue> clear_values = {};
                vk::raii::RenderPass        renderpass;
                vk::raii::Framebuffer       framebuffer;
            };

            std::vector<Task>                tasks;
            std::vector<vk::raii::Image>     images      = {};
            std::vector<vk::raii::ImageView> image_views = {};
            std::vector<vk::raii::Buffer>    buffers     = {};

            core::DeferInit<vk::raii::CommandPool>   raster_command_pool;
            core::DeferInit<vk::raii::CommandBuffer> main_cmb;
            core::DeferInit<vk::raii::CommandBuffer> blit_cmb;

            core::DeferInit<vk::raii::Semaphore> semaphore;
        };

      public:
        BakedFrameGraph(const FrameGraphBuilder& builder,
                        Data                  && data,
                        BakedFrameGraph         *old = nullptr);
        ~BakedFrameGraph();

        BakedFrameGraph(const BakedFrameGraph&)                    = delete;
        auto operator=(const BakedFrameGraph&) -> BakedFrameGraph& = delete;

        BakedFrameGraph(BakedFrameGraph&&) noexcept;
        auto operator=(BakedFrameGraph&&) noexcept -> BakedFrameGraph&;

        auto execute(RenderSurface::Frame& frame) -> void;

        auto setBackbuffer(vk::raii::ImageView& backbuffer) -> void;

      private:
        const FrameGraphBuilder *m_builder = nullptr;

        vk::raii::ImageView *m_backbuffer = nullptr;

        Data m_data;

        friend class FrameGraphBuilder;
    };
} // namespace stormkit::engine

namespace stormkit::engine {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE BakedFrameGraph::~BakedFrameGraph() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    BakedFrameGraph::BakedFrameGraph(BakedFrameGraph&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto BakedFrameGraph::operator=(BakedFrameGraph&& other) noexcept
        -> BakedFrameGraph& = default;
} // namespace stormkit::engine
