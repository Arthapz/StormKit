// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Engine:Renderer.BakedFrameGraph;

import std;

import stormkit.Core;
import stormkit.Gpu;

import :Renderer.GraphID;

export namespace stormkit::engine {
    class FrameGraphBuilder;

    class STORMKIT_API BakedFrameGraph {
        struct Data {
            struct Task {
                GraphID id;

                gpu::CommandBuffer cmb;

                std::vector<gpu::ClearValue> clear_values = {};
                gpu::RenderPass              renderpass;
                gpu::FrameBuffer             framebuffer;
            };

            std::vector<Task>           tasks;
            std::vector<gpu::Image>     images      = {};
            std::vector<gpu::ImageView> image_views = {};
            std::vector<gpu::Buffer>    buffers     = {};

            core::DeferInit<gpu::CommandPool>   raster_command_pool;
            core::DeferInit<gpu::CommandBuffer> main_cmb;
            core::DeferInit<gpu::CommandBuffer> blit_cmb;

            core::DeferInit<gpu::Semaphore> semaphore;
        };

      public:
        struct Frame {};

        BakedFrameGraph(const FrameGraphBuilder& builder,
                        Data                  && data,
                        BakedFrameGraph         *old = nullptr);
        ~BakedFrameGraph();

        BakedFrameGraph(const BakedFrameGraph&)                    = delete;
        auto operator=(const BakedFrameGraph&) -> BakedFrameGraph& = delete;

        BakedFrameGraph(BakedFrameGraph&&) noexcept;
        auto operator=(BakedFrameGraph&&) noexcept -> BakedFrameGraph&;

        auto execute(Frame& frame) -> void;

        auto setBackbuffer(gpu::ImageView& backbuffer) -> void;

      private:
        const FrameGraphBuilder *m_builder = nullptr;

        gpu::ImageView *m_backbuffer = nullptr;

        Data m_data;

        friend class FrameGraphBuilder;
    };
} // namespace stormkit::engine

namespace stormkit::engine {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE BakedFrameGraph::~BakedFrameGraph() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    BakedFrameGraph::BakedFrameGraph(BakedFrameGraph&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto BakedFrameGraph::operator=(BakedFrameGraph&& other) noexcept
        -> BakedFrameGraph& = default;
} // namespace stormkit::engine
