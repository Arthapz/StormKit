// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Engine:ShapeRenderer;

import :Core;
import :Renderer;

export namespace stormkit::engine {
    class ShapeRenderer {
        struct Tag {};

      public:
        ShapeRenderer(const Renderer& renderer, Tag);
        ~ShapeRenderer();

        ShapeRenderer(const ShapeRenderer&)                    = delete;
        auto operator=(const ShapeRenderer&) -> ShapeRenderer& = delete;

        ShapeRenderer(ShapeRenderer&&) noexcept;
        auto operator=(ShapeRenderer&&) noexcept -> ShapeRenderer&;

        [[nodiscard]] static auto create(const Renderer& renderer) noexcept -> ShapeRenderer;
        [[nodiscard]] static auto
            allocate(const Renderer& renderer) noexcept -> std::unique_ptr<ShapeRenderer>;

        auto updateFrameGraph(FrameGraphBuilder& graph,
                              std::atomic_bool&  rebuild_graph) noexcept -> void;

      private:
        Borrowed<const Renderer> m_renderer;
    };
} // namespace stormkit::engine

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::engine {
    ShapeRenderer::ShapeRenderer(const Renderer& renderer, Tag) : m_renderer { renderer } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE ShapeRenderer::~ShapeRenderer() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE ShapeRenderer::ShapeRenderer(ShapeRenderer&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        ShapeRenderer::operator=(ShapeRenderer&&) noexcept -> ShapeRenderer& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        ShapeRenderer::create(const Renderer& renderer) noexcept -> ShapeRenderer {
        return ShapeRenderer { renderer, Tag {} };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto ShapeRenderer::allocate(const Renderer& renderer) noexcept
        -> std::unique_ptr<ShapeRenderer> {
        return std::make_unique<ShapeRenderer>(renderer, Tag {});
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto ShapeRenderer::updateFrameGraph(FrameGraphBuilder& graph,
                                         std::atomic_bool&  rebuild_graph) noexcept -> void {
    }
} // namespace stormkit::engine
