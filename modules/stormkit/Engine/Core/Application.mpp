// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Engine:Core.Application;

import std;

import stormkit.Core;
import stormkit.Entities;
import stormkit.Wsi;

import :Renderer;

export namespace stormkit::engine {
    enum class ApplicationError {
        FailedToInitializeWindow,
        FailedToInitializeRenderer
    };

    constexpr auto errorString(ApplicationError err) {
        if (err == ApplicationError::FailedToInitializeWindow) return "Failed to create window";
        else if (err == ApplicationError::FailedToInitializeRenderer)
            return "Failed to Initialize Renderer";

        std::unreachable();

        return "";
    }

    class STORMKIT_API Application final {
        struct PrivateTag {};

      public:
        static constexpr auto DEFAULT_WINDOW_TITLE = "StormKit-Engine";

        template<typename T>
        using Expected = std::expected<T, ApplicationError>;

        Application(std::string_view           application_name,
                    const core::math::ExtentU& window_extent,
                    std::string                window_title,
                    PrivateTag);
        ~Application();

        Application(const Application&)                    = delete;
        auto operator=(const Application&) -> Application& = delete;

        Application(Application&&) noexcept;
        auto operator=(Application&&) noexcept -> Application&;

        static auto create(std::string_view           application_name,
                           const core::math::ExtentU& window_extent,
                           std::string                window_title = DEFAULT_WINDOW_TITLE) noexcept
            -> Expected<Application>;
        static auto allocate(std::string_view           application_name,
                             const core::math::ExtentU& window_extent,
                             std::string window_title = DEFAULT_WINDOW_TITLE) noexcept
            -> Expected<std::unique_ptr<Application>>;

        auto world(this auto& self) noexcept -> decltype(auto);
        auto window(this auto& self) noexcept -> decltype(auto);
        auto eventHandler(this auto& self) noexcept -> decltype(auto);

        auto update() -> void;

      private:
        core::DeferInit<wsi::Window>       m_window;
        core::DeferInit<Renderer>          m_renderer;
        core::DeferInit<wsi::EventHandler> m_event_handler;

        core::DeferInit<entities::EntityManager> m_world;
    };
} // namespace stormkit::engine

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::engine {
    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE Application::~Application() = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE Application::Application(Application&&) noexcept = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Application::operator=(Application&&) noexcept -> Application& = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Application::create(std::string_view           application_name,
                            const core::math::ExtentU& window_extent,
                            std::string window_title) noexcept -> Expected<Application> try {
        return Application { application_name,
                             window_extent,
                             std::move(window_title),
                             PrivateTag {} };
    } catch (ApplicationError err) { return std::unexpected { err }; }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Application::allocate(std::string_view           application_name,
                                                     const core::math::ExtentU& window_extent,
                                                     std::string window_title) noexcept
        -> Expected<std::unique_ptr<Application>> try {
        return std::make_unique<Application>(application_name,
                                             window_extent,
                                             std::move(window_title),
                                             PrivateTag {});
    } catch (ApplicationError err) { return std::unexpected { err }; }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Application::world(this auto& self) noexcept -> decltype(auto) {
        return self.m_world.get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Application::window(this auto& self) noexcept -> decltype(auto) {
        return self.m_window.get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Application::eventHandler(this auto& self) noexcept -> decltype(auto) {
        return self.m_event_handler.get();
    }

} // namespace stormkit::engine
