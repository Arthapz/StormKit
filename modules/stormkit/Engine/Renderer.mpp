// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Engine:Renderer;

import std;

import stormkit.Core;
import stormkit.Wsi;
import stormkit.Gpu;

export {
    namespace stormkit::engine {
        class STORMKIT_API Renderer final {
            struct PrivateTag {};

          public:
            Renderer(std::string_view                                 application_name,
                     std::optional<core::NakedRef<const wsi::Window>> window,
                     PrivateTag);
            ~Renderer();

            Renderer(const Renderer&)                    = delete;
            auto operator=(const Renderer&) -> Renderer& = delete;

            Renderer(Renderer&&) noexcept;
            auto operator=(Renderer&&) noexcept -> Renderer&;

            static auto create(std::string_view                                 application_name,
                               std::optional<core::NakedRef<const wsi::Window>> window) noexcept
                -> gpu::Expected<Renderer>;
            static auto allocate(std::string_view                                 application_name,
                                 std::optional<core::NakedRef<const wsi::Window>> window) noexcept
                -> gpu::Expected<std::unique_ptr<Renderer>>;

            auto startRendering() noexcept -> void;

          private:
            auto doInit(std::string_view, std::optional<core::NakedRef<const wsi::Window>>) noexcept
                -> gpu::Expected<void>;
            auto doInitInstance(std::string_view) noexcept -> gpu::Expected<void>;
            auto doInitDevice() noexcept -> gpu::Expected<void>;

            auto threadLoop(std::stop_token) noexcept -> void;

            bool                           m_validation_layers_enabled = false;
            core::DeferInit<gpu::Instance> m_instance;
            core::DeferInit<gpu::Device>   m_device;

            std::jthread m_render_thread;
        };
    } // namespace stormkit::engine
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::engine {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    Renderer::Renderer(std::string_view                                 application_name,
                       std::optional<core::NakedRef<const wsi::Window>> window,
                       PrivateTag) {
        doInit(application_name, std::move(window)).transform_error(core::throwError());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Renderer::~Renderer() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Renderer::Renderer(Renderer&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Renderer::operator=(Renderer&&) noexcept -> Renderer& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Renderer::create(std::string_view                                 application_name,
                         std::optional<core::NakedRef<const wsi::Window>> window) noexcept
        -> gpu::Expected<Renderer> try {
        return Renderer { application_name, std::move(window), PrivateTag {} };
    } catch (const gpu::Result& err) { return std::unexpected { err }; }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Renderer::allocate(std::string_view                                 application_name,
                           std::optional<core::NakedRef<const wsi::Window>> window) noexcept
        -> gpu::Expected<std::unique_ptr<Renderer>> try {
        return std::make_unique<Renderer>(application_name, std::move(window), PrivateTag {});
    } catch (const gpu::Result& err) { return std::unexpected { err }; }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Renderer::startRendering() noexcept -> void {
        m_render_thread = std::jthread { std::bind_front(&Renderer::threadLoop, this) };
        core::setThreadName(m_render_thread, "StormKit:RenderThread");
    }
} // namespace stormkit::engine
