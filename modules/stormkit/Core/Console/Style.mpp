// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/FlagsMacro.hpp>
#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Core:Console.Style;

import std;
import frozen;

import :TypeSafe.Boolean;
import :TypeSafe.Flags;
import :Meta.Traits;

export namespace stormkit::core {
    enum class ConsoleColor {
        Red,
        Green,
        Yellow,
        Blue,
        Magenta,
        Cyan,
        White,
        Black,
        Bright_Red,
        Bright_Green,
        Bright_Yellow,
        Bright_Blue,
        Bright_Magenta,
        Bright_Cyan,
        Bright_White,
        Bright_Black,
    };

    enum class StyleModifier {
        None      = 0x0,
        Bold      = 0x1,
        Faint     = 0x2,
        Italic    = 0x4,
        Inverse   = 0x8,
        Underline = 0xA
    };

    template<typename T>
    struct Stylized {
        T                           value;
        std::optional<ConsoleColor> fg;
        std::optional<ConsoleColor> bg;
        StyleModifier               modifiers = StyleModifier::None;
    };

    struct ConsoleStyle {
        template<typename T>
        [[nodiscard]] constexpr auto operator|(T&& value) const noexcept -> Stylized<T>;
        std::optional<ConsoleColor>  fg;
        std::optional<ConsoleColor>  bg;
        StyleModifier                modifiers = StyleModifier::None;
    };

    inline constexpr auto RedTextStyle     = ConsoleStyle { .fg = ConsoleColor::Red };
    inline constexpr auto GreenTextStyle   = ConsoleStyle { .fg = ConsoleColor::Green };
    inline constexpr auto YellowTextStyle  = ConsoleStyle { .fg = ConsoleColor::Yellow };
    inline constexpr auto BlueTextStyle    = ConsoleStyle { .fg = ConsoleColor::Blue };
    inline constexpr auto MagentaTextStyle = ConsoleStyle { .fg = ConsoleColor::Magenta };
    inline constexpr auto CyanTextStyle    = ConsoleStyle { .fg = ConsoleColor::Cyan };
    inline constexpr auto WhiteTextStyle   = ConsoleStyle { .fg = ConsoleColor::White };
    inline constexpr auto BlackTextStyle   = ConsoleStyle { .fg = ConsoleColor::Black };
} // namespace stormkit::core

//
export {
    FLAG_ENUM(stormkit::core::StyleModifier)
}

export namespace std {
    template<typename T, class CharT>
    struct formatter<stormkit::core::Stylized<T>, CharT>
        : formatter<stormkit::core::CanonicalType<T>, CharT> {
        template<class FormatContext>
        auto format(const stormkit::core::Stylized<T>& stylized, FormatContext& ctx) const noexcept
            -> decltype(ctx.out());
    };
} // namespace std

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

using namespace std::literals;
using namespace frozen::string_literals;

namespace stormkit::core {
    namespace { namespace ecma48 {
        constexpr auto Foreground = frozen::make_unordered_map<ConsoleColor, frozen::string>({
            { ConsoleColor::Black,          "\x1B[30m"_s },
            { ConsoleColor::Red,            "\x1B[31m"_s },
            { ConsoleColor::Green,          "\x1B[32m"_s },
            { ConsoleColor::Yellow,         "\x1B[33m"_s },
            { ConsoleColor::Blue,           "\x1B[34m"_s },
            { ConsoleColor::Magenta,        "\x1B[35m"_s },
            { ConsoleColor::Cyan,           "\x1B[36m"_s },
            { ConsoleColor::White,          "\x1B[37m"_s },
            { ConsoleColor::Bright_Black,   "\x1B[90m"_s },
            { ConsoleColor::Bright_Red,     "\x1B[91m"_s },
            { ConsoleColor::Bright_Green,   "\x1B[92m"_s },
            { ConsoleColor::Bright_Yellow,  "\x1B[93m"_s },
            { ConsoleColor::Bright_Blue,    "\x1B[94m"_s },
            { ConsoleColor::Bright_Magenta, "\x1B[95m"_s },
            { ConsoleColor::Bright_Cyan,    "\x1B[96m"_s },
            { ConsoleColor::Bright_White,   "\x1B[97m"_s },
        });

        constexpr auto Background = frozen::make_unordered_map<ConsoleColor, frozen::string>({
            { ConsoleColor::Black,          "\x1B[40m"_s  },
            { ConsoleColor::Red,            "\x1B[41m"_s  },
            { ConsoleColor::Green,          "\x1B[42m"_s  },
            { ConsoleColor::Yellow,         "\x1B[43m"_s  },
            { ConsoleColor::Blue,           "\x1B[44m"_s  },
            { ConsoleColor::Magenta,        "\x1B[45m"_s  },
            { ConsoleColor::Cyan,           "\x1B[46m"_s  },
            { ConsoleColor::White,          "\x1B[47m"_s  },
            { ConsoleColor::Bright_Black,   "\x1B[100m"_s },
            { ConsoleColor::Bright_Red,     "\x1B[101m"_s },
            { ConsoleColor::Bright_Green,   "\x1B[102m"_s },
            { ConsoleColor::Bright_Yellow,  "\x1B[103m"_s },
            { ConsoleColor::Bright_Blue,    "\x1B[104m"_s },
            { ConsoleColor::Bright_Magenta, "\x1B[105m"_s },
            { ConsoleColor::Bright_Cyan,    "\x1B[106m"_s },
            { ConsoleColor::Bright_White,   "\x1B[107m"_s },
        });

        constexpr auto Reset     = "\x1B[0m"sv;
        constexpr auto Bold      = "\x1B[1m"sv;
        constexpr auto Faint     = "\x1B[2m"sv;
        constexpr auto Italic    = "\x1B[3m"sv;
        constexpr auto Underline = "\x1B[4m"sv;
        constexpr auto Inverse   = "\x1B[7m"sv;
    }} // namespace ::ecma48

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto ConsoleStyle::operator|(T&& value) const noexcept
        -> Stylized<T> {
        return { std::forward<T>(value), fg, bg, modifiers };
    }
} // namespace stormkit::core

//
namespace std {
    using namespace stormkit::core;

    template<typename T, class CharT>
    template<class FormatContext>
    STORMKIT_FORCE_INLINE auto
        formatter<Stylized<T>, CharT>::format(const Stylized<T>& stylized,
                                              FormatContext&     ctx) const noexcept
        -> decltype(ctx.out()) {
        auto&& out = ctx.out();

        const auto attributes = [&stylized] noexcept {
            auto out = std::string {};
            out.reserve(14);
            if (stylized.fg) out += std::string_view { ecma48::Foreground.at(*stylized.fg) };
            if (stylized.bg) out += std::string_view { ecma48::Background.at(*stylized.bg) };
            if (checkFlag(stylized.modifiers, StyleModifier::Bold)) out += ecma48::Bold;
            if (checkFlag(stylized.modifiers, StyleModifier::Faint)) out += ecma48::Faint;
            if (checkFlag(stylized.modifiers, StyleModifier::Italic)) out += ecma48::Italic;
            if (checkFlag(stylized.modifiers, StyleModifier::Inverse)) out += ecma48::Inverse;
            if (checkFlag(stylized.modifiers, StyleModifier::Underline)) out += ecma48::Underline;
            return out;
        }();

        return format_to(out, "{}{}{}", attributes, stylized.value, ecma48::Reset);
    }
} // namespace std
