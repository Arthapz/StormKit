// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Core:Containers.Utils;

import std;

import :Meta;
import :Utils.Byte;

export namespace stormkit::core {
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto merge(T& output, const U&... ranges) noexcept -> void;

    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto concat(const T& first, const U&... others) noexcept -> std::vector<RangeType<T>>;

    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto moveAndMerge(T& output, U&&... ranges) noexcept -> void;

    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto moveAndConcat(T&& first, U&&... others) noexcept -> std::vector<RangeType<T>>;

    template<class T, typename... Args>
        requires((core::Is<T, Args> and ...) or (std::convertible_to<T, Args> and ...) or
                 (std::constructible_from<T, Args> and ...))
    constexpr auto makeStaticArray(T&& first, Args&&... args) noexcept -> decltype(auto);

    template<class T, typename... Args>
        requires((core::Is<T, Args> and ...) or (std::convertible_to<T, Args> and ...) or
                 (std::constructible_from<T, Args> and ...))
    constexpr auto makeArray(T&& first, Args&&... args) noexcept -> decltype(auto);

    template<std::ranges::range T>
    constexpr auto viewAsBytes(T& data) -> decltype(auto);

    template<typename T>
    constexpr auto viewAs(std::span<core::LikeCVType<T, core::Byte>> data) -> decltype(auto);

    template<std::ranges::range R1,
             std::ranges::range R2,
             class Pred  = std::ranges::equal_to,
             class Proj1 = std::identity,
             class Proj2 = std::identity>
        requires std::indirectly_comparable<std::ranges::iterator_t<R1>,
                                            std::ranges::iterator_t<R2>,
                                            Pred,
                                            Proj1,
                                            Proj2>
    constexpr auto
        findFirstNotOf(R1&& first, R2&& second, Pred pred = {}, Proj1 proj1 = {}, Proj2 proj2 = {})
            -> decltype(auto) {
        auto first1 = std::ranges::begin(first);
        auto last1  = std::ranges::end(first);
        auto first2 = std::ranges::begin(second);
        auto last2  = std::ranges::end(second);

        for (; first2 != last2; ++first2) {
            auto found = false;
            for (auto i = first1; i != last1; ++i) {
                if (std::invoke(pred, std::invoke(proj1, *i), std::invoke(proj2, *first2))) {
                    found = true;
                    break;
                }
            }

            if (not found) return first2;
        }

        return first2;
    }
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto merge(T& output, const U&... ranges) noexcept -> void {
        output.reserve(std::size(output) + (std::ranges::size(ranges) + ...));
        (std::ranges::copy(ranges, std::back_inserter(output)), ...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto concat(const T& first, const U&... others) noexcept
        -> std::vector<RangeType<T>> {
        auto output = std::vector<RangeType<T>> {};
        merge(output, first, others...);

        return output;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto moveAndMerge(T& output, U&&... ranges) noexcept -> void {
        output.reserve(std::size(output) + (std::ranges::size(ranges) + ...));
        (std::ranges::move(std::forward<U>(ranges), std::back_inserter(output)), ...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<std::ranges::range T, std::ranges::range... U>
    constexpr auto moveAndConcat(T&& first, U&&... others) noexcept -> std::vector<RangeType<T>> {
        auto output = std::vector<RangeType<T>> {};
        moveAndMerge(output, std::forward<T>(first), std::forward<U>(others)...);

        return output;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T, typename... Args>
        requires((core::Is<T, Args> and ...) or (std::convertible_to<T, Args> and ...) or
                 (std::constructible_from<T, Args> and ...))
    constexpr auto makeStaticArray(T&& first, Args&&... args) noexcept -> decltype(auto) {
        return std::array { std::forward<T>(first), static_cast<T>(std::forward<Args>(args))... };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T, typename... Args>
        requires((core::Is<T, Args> and ...) or (std::convertible_to<T, Args> and ...) or
                 (std::constructible_from<T, Args> and ...))
    constexpr auto makeArray(T&& first, Args&&... args) noexcept -> decltype(auto) {
        return std::vector { std::forward<T>(first), static_cast<T>(std::forward<Args>(args))... };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<std::ranges::range T>
    constexpr auto viewAsBytes(T& data) -> decltype(auto) {
        using Byte = core::LikeCVType<typename T::value_type, core::Byte>;
        return std::span<Byte> { std::bit_cast<Byte*>(std::ranges::data(data)),
                                 std::ranges::size(data) * sizeof(T) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    constexpr auto viewAs(std::span<core::LikeCVType<T, core::Byte>> data) -> decltype(auto) {
        return std::span<T> { std::bit_cast<T*>(std::ranges::data(data)),
                              std::ranges::size(data) / sizeof(T) };
    }
} // namespace stormkit::core
