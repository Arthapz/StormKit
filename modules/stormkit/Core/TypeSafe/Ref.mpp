// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Core:TypeSafe.Ref;

import std;

import :Meta.Concepts;
import :Meta.Traits;
import :Utils.Assert;
import :TypeSafe.Boolean;

export {
    namespace stormkit { inline namespace core {
        template<typename T>
        class [[nodiscard]] [[gsl::Pointer]] Ref {
          public:
            using ElementType   = T;
            using ReferenceType = ElementType&;
            using PointerType   = ElementType* const;

            // STL compatible
            using element_type = ElementType;
            using pointer      = PointerType;

            constexpr ~Ref() noexcept;

            constexpr Ref(const Ref&) noexcept;
            constexpr Ref(Ref&&) noexcept;

            constexpr auto operator=(const Ref&) noexcept -> Ref& = delete;
            constexpr auto operator=(Ref&&) noexcept -> Ref&;

            [[nodiscard]] constexpr auto get() const noexcept -> PointerType;
            [[nodiscard]] constexpr auto operator->() const noexcept -> PointerType;
            [[nodiscard]] constexpr auto operator*() const noexcept -> ReferenceType;

            constexpr explicit           operator bool() const noexcept;
            [[nodiscard]] constexpr auto hasValue() const noexcept -> Boolean;

            // template<typename Self>
            // constexpr operator std::conditional_t<std::is_const_v<Self>, const T&, T&>(
            //     this Self&& self) noexcept;
            //
            // template<typename Self>
            // constexpr operator std::enable_if<not std::is_const_v<T>, Ref<const T>>(
            //     this Self&& self) noexcept;

            [[nodiscard]] constexpr operator ReferenceType() const noexcept;
            [[nodiscard]] constexpr operator PointerType() const noexcept;

            [[nodiscard]] constexpr auto operator==(std::nullptr_t) const noexcept -> bool;

          private:
            constexpr Ref(ReferenceType value STORMKIT_LIFETIMEBOUND) noexcept;
            constexpr Ref(PointerType value STORMKIT_LIFETIMEBOUND) noexcept;

            PointerType m_value;

            template<meta::IsPointer U>
            friend constexpr auto borrow(const U& value) noexcept -> decltype(auto);

            template<meta::IsNotPointer U>
            friend constexpr auto borrow(const U& value) noexcept -> decltype(auto);

            template<meta::IsPointer U>
                requires meta::IsNotConst<meta::ElementType<U>>
            friend constexpr auto borrowMut(const U& value) noexcept -> decltype(auto);

            template<meta::IsNotPointer U>
                requires meta::IsNotConst<U>
            friend constexpr auto borrowMut(U& value) noexcept -> decltype(auto);

            template<meta::IsPointer U>
            friend constexpr auto borrowLike(const U& value) noexcept -> decltype(auto);

            template<meta::IsNotPointer U>
            friend constexpr auto borrowLike(U& value) noexcept -> decltype(auto);
        };

        template<typename T>
        using OptionalRef = std::optional<Ref<T>>;

        template<meta::IsPointer T>
        [[nodiscard]] constexpr auto borrow(const T& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        template<meta::IsNotPointer T>
        [[nodiscard]] constexpr auto borrow(const T& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        template<meta::IsPointer T>
            requires meta::IsNotConst<meta::ElementType<T>>
        [[nodiscard]] constexpr auto borrowMut(const T& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        template<meta::IsNotPointer T>
            requires meta::IsNotConst<T>
        [[nodiscard]] constexpr auto borrowMut(T& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        template<meta::IsPointer T>
        [[nodiscard]] constexpr auto borrowLike(const T& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        template<meta::IsNotPointer T>
        [[nodiscard]] constexpr auto borrowLike(T& value STORMKIT_LIFETIMEBOUND) noexcept
            -> decltype(auto);

        template<template<typename...> typename Out, typename... Args>
        [[nodiscard]] constexpr auto borrows(const Args&... args) noexcept -> decltype(auto);

        template<template<typename, std::size_t> typename Out = std::array, typename... Args>
        [[nodiscard]] constexpr auto borrows(const Args&... args) noexcept -> decltype(auto);

        template<template<typename...> typename Out, typename... Args>
        [[nodiscard]] constexpr auto borrowMuts(Args&&... args) noexcept -> decltype(auto);

        template<template<typename, std::size_t> typename Out = std::array, typename... Args>
        [[nodiscard]] constexpr auto borrowMuts(Args&&... args) noexcept -> decltype(auto);

        template<template<typename...> class Out = std::vector, std::ranges::range T>
            requires(std::ranges::range<Out<typename T::value_type>>)
        [[nodiscard]] constexpr auto toRefs(const T& range) noexcept -> decltype(auto);

        template<template<typename...> class Out = std::vector, std::ranges::range T>
            requires(std::ranges::range<Out<typename T::value_type>>)
        [[nodiscard]] constexpr auto toMutRefs(const T& range) noexcept -> decltype(auto);
    }} // namespace stormkit::core

    namespace std {
        template<typename T>
        struct pointer_traits<stormkit::core::Ref<T>> {
            using pointer         = typename stormkit::core::Ref<T>::PointerType;
            using element_type    = typename stormkit::core::Ref<T>::ElementType;
            using difference_type = std::ptrdiff_t;
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit { inline namespace core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(ReferenceType value) noexcept : m_value { &value } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(PointerType value) noexcept : m_value { value } {
        core::expects(m_value != nullptr);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::~Ref() noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(const Ref&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::Ref(Ref&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator=(Ref&& other) noexcept -> Ref& {
        // TODO improve
        const_cast<meta::CanonicalType<Ref<T>::PointerType>&>(m_value) = other.m_value;
        return *this;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::get() const noexcept -> PointerType {
        return m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator->() const noexcept -> PointerType {
        return get();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator*() const noexcept -> ReferenceType {
        return *get();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::operator bool() const noexcept {
        return m_value != nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::hasValue() const noexcept -> Boolean {
        return operator bool();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::operator ReferenceType() const noexcept {
        return *m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr Ref<T>::operator PointerType() const noexcept {
        return m_value;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto Ref<T>::operator==(std::nullptr_t) const noexcept -> bool {
        return m_value == nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsPointer T>
    STORMKIT_FORCE_INLINE constexpr auto borrow(const T& value) noexcept -> decltype(auto) {
        return Ref<const meta::ElementType<T>> { std::to_address(value) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsNotPointer T>
    STORMKIT_FORCE_INLINE constexpr auto borrow(const T& value) noexcept -> decltype(auto) {
        if constexpr (meta::IsOptionalType<T>) {
            expects(value != std::nullopt);
            return borrow(&(value.get()));
        } else
            return borrow(&value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsPointer T>
    STORMKIT_FORCE_INLINE constexpr auto borrowLike(const T& value) noexcept -> decltype(auto) {
        return Ref<meta::ElementType<T>> { std::to_address(value) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsNotPointer T>
    STORMKIT_FORCE_INLINE constexpr auto borrowLike(T& value) noexcept -> decltype(auto) {
        if constexpr (meta::IsOptionalType<T>) {
            expects(value != std::nullopt);
            return borrowLike(&(value.get()));
        } else
            return borrowLike(&value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsPointer T>
        requires meta::IsNotConst<meta::ElementType<T>>
    STORMKIT_FORCE_INLINE constexpr auto borrowMut(const T& value) noexcept -> decltype(auto) {
        return Ref<meta::ElementType<T>> { std::to_address(value) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<meta::IsNotPointer T>
        requires meta::IsNotConst<T>
    STORMKIT_FORCE_INLINE constexpr auto borrowMut(T& value) noexcept -> decltype(auto) {
        if constexpr (meta::IsOptionalType<T>) {
            expects(value != std::nullopt);
            return borrowMut(&(value.get()));
        } else
            return borrowMut(&value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> typename Out, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto borrows(const Args&... args) noexcept -> decltype(auto) {
        return Out { { borrow(args)... } };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename, std::size_t> typename Out = std::array, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto borrows(const Args&... args) noexcept -> decltype(auto) {
        return Out { borrow(args)... };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> typename Out, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto borrowMuts(Args&&... args) noexcept -> decltype(auto) {
        return Out { { borrowMut(std::forward<Args>(args))... } };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename, std::size_t> typename Out = std::array, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto borrowMuts(Args&&... args) noexcept -> decltype(auto) {
        return Out { { borrowMut(std::forward<Args>(args))... } };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> class Out = std::vector, std::ranges::range T>
        requires(std::ranges::range<Out<typename T::value_type>>)
    STORMKIT_FORCE_INLINE constexpr auto toRefs(const T& args) noexcept -> decltype(auto) {
        return args
               | std::views::transform([]<class U>(const U& val) static noexcept -> decltype(auto) {
                     return borrow(val);
                 })
               | std::ranges::to<Out>();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<template<typename...> class Out = std::vector, std::ranges::range T>
        requires(std::ranges::range<Out<typename T::value_type>>)
    STORMKIT_FORCE_INLINE constexpr auto toMutRefs(const T& args) noexcept -> decltype(auto) {
        return args
               | std::views::transform(
                   []<class U>(U& val) static noexcept -> decltype(auto) { return borrowMut(val); })
               | std::ranges::to<Out>();
    }
}} // namespace stormkit::core
