// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

#if not defined(__STDCPP_FLOAT32_T__) or not defined(__STDCPP_FLOAT64_T__) \
    or not defined(__STDCPP_FLOAT128_T__)
    #ifdef STORMKIT_LIBCXX
        #include <bits/floatn.h>
    #endif
#endif

export module stormkit.Core:TypeSafe.Float;

import std;

import :Meta.Concepts;

export namespace stormkit::core {
#ifdef __STDCPP_FLOAT16_T__
    using Float16 = std::float16_t;
#else
    using Float16 = _Float16;
#endif

#ifdef __STDCPP_FLOAT32_T__
    using Float32 = std::float32_t;
#else
    using Float32 = _Float32;
#endif
#ifdef __STDCPP_FLOAT64_T__
    using Float64 = std::float64_t;
#else
    using Float64 = _Float64;
#endif
#ifdef __STDCPP_FLOAT128_T__
    using Float128 = std::float128_t;
#else
    // using Float128 = _Float128; // TODO provide a fallback
#endif
    using Float = Float32;

    template<meta::IsFloatingPoint T>
    inline constexpr auto Epsilon = std::numeric_limits<T>::epsilon();
} // namespace stormkit::core
