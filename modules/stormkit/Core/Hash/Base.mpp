// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Core:Hash.Base;

import std;

import :Meta.Concepts;

export namespace stormkit::core {
    using Hash32 = std::uint32_t;
    using Hash64 = std::uint64_t;

    template<class T>
    concept HashValue = core::IsOneOf<T, Hash32, Hash64>;

    constexpr auto hashCombine(HashValue auto& hash, IsHashable auto&& v) noexcept;

    constexpr auto hashCombine(HashValue auto& hash, std::ranges::range auto&& range) noexcept;

    template<typename... Args>
    constexpr auto hashCombine(HashValue auto& hash, Args&&...args) noexcept;
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    constexpr auto hashCombine(HashValue auto& hash, IsHashable auto&& v) noexcept {
        const auto hasher = std::hash<std::remove_cvref_t<decltype(v)>> {};
        hash ^= hasher(std::forward<decltype(v)>(v)) + 0x9e3779b9 + (hash << 6) + (hash >> 2);
    }

    constexpr auto hashCombine(HashValue auto& hash, std::ranges::range auto&& range) noexcept {
        for (auto&& value : range) hashCombine(hash, std::forward<decltype(value)>(value));
    }

    template<typename... Args>
    constexpr auto hashCombine(HashValue auto& hash, Args&&...args) noexcept {
        (hashCombine(hash, std::forward<Args>(args)), ...);
    }
} // namespace stormkit::core