// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

#ifndef STORMKIT_ASSERT
    #define STORMKIT_ASSERT 1
#endif

export module stormkit.Core:Utils.Assert;

import std;

import :Console;
import :Utils.Stacktrace;

export namespace stormkit::core {
    enum class AssertType {
        Assert,
        Expects,
        Ensures
    };

    constexpr auto toString(AssertType t) noexcept -> std::string_view;

    auto assertBase(bool                        cond,
                    AssertType                  type,
                    std::string_view            message,
                    const std::source_location& location = std::source_location::current()) noexcept
        -> void;

    consteval auto compileTimeAssertBase(bool             cond,
                                         AssertType       type,
                                         std::string_view message) noexcept -> void;

    constexpr auto assert(bool                        cond,
                          std::string_view            message,
                          const std::source_location& location
                          = std::source_location::current()) noexcept -> void;

    constexpr auto assert(bool                        cond,
                          const std::source_location& location
                          = std::source_location::current()) noexcept -> void;

    constexpr auto expects(bool                        cond,
                           std::string_view            message,
                           const std::source_location& location
                           = std::source_location::current()) noexcept -> void;

    constexpr auto expects(bool                        cond,
                           const std::source_location& location
                           = std::source_location::current()) noexcept -> void;

    constexpr auto ensures(bool                        cond,
                           std::string_view            message,
                           const std::source_location& location
                           = std::source_location::current()) noexcept -> void;

    constexpr auto ensures(bool                        cond,
                           const std::source_location& location
                           = std::source_location::current()) noexcept -> void;
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

using namespace std::literals;

namespace stormkit::core {
    namespace {
        std::mutex mutex;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto toString(AssertType type) noexcept -> std::string_view {
        switch (type) {
            case AssertType::Assert: return "Assertion";
            case AssertType::Expects: return "Expects";
            case AssertType::Ensures: return "Ensures";
            default: return "Unhandled";
        }

        std::unreachable();
    }

    struct StringLiteral {
        std::array<char, 512> buff;
        std::size_t           size;

        consteval auto view() noexcept -> std::string_view { return { std::data(buff), size }; }
    };

    auto constevalFailure(StringLiteral) -> void;

    /////////////////////////////////////
    /////////////////////////////////////
    consteval auto generateConstevalMessage(AssertType type, std::string_view message) noexcept
        -> StringLiteral {
        auto       result = StringLiteral {};
        const auto str    = "["s + toString(type) + "] " + std::string { message };
        std::ranges::copy(str, std::begin(result.buff));
        result.size = std::size(str);
        return result;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto assertBase(bool                        cond,
                                    AssertType                  type,
                                    std::string_view            message,
                                    const std::source_location& location) noexcept -> void {
        if constexpr (STORMKIT_ASSERT == 1) {
            if (not cond) [[unlikely]] {
                auto lock = std::unique_lock { mutex };
                std::println(getSTDErr(),
                             "[{}] failed in \n"
                             "    > file:     {}\n"
                             "      line:     {}\n"
                             "      function: {}\n"
                             "      reason:  {}",
                             ConsoleStyle { .fg        = ConsoleColor::Red,
                                            .modifiers = StyleModifier::Bold | StyleModifier::Inverse }
                                 | toString(type),
                             ConsoleStyle { .fg = ConsoleColor::Yellow } | location.file_name(),
                             ConsoleStyle { .fg = ConsoleColor::Blue } | location.line(),
                             ConsoleStyle { .fg = ConsoleColor::Green } | location.function_name(),
                             ConsoleStyle { .fg        = ConsoleColor::Red,
                                            .modifiers = StyleModifier::Bold }
                                 | message);

                std::terminate();
            }
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE consteval auto
        compileTimeAssertBase(bool cond, AssertType type, std::string_view message) noexcept
        -> void {
        if (not cond) [[unlikely]] { constevalFailure(generateConstevalMessage(type, message)); }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto
        assert(bool                                         cond,
               std::string_view                             message,
               [[maybe_unused]] const std::source_location& location) noexcept -> void {
#ifdef STORMKIT_COMPILER_MSVC
        if constexpr (std::is_constant_evaluated()) {
#else
        if consteval {
#endif
            compileTimeAssertBase(cond, AssertType::Assert, message);
        } else {
            assertBase(cond, AssertType::Assert, message, location);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto assert(bool                        cond,
                                                const std::source_location& location) noexcept
        -> void {
        assert(cond, "Condition check failed", location);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto
        expects(bool cond, std::string_view message, const std::source_location& location) noexcept
        -> void {
#ifdef STORMKIT_COMPILER_MSVC
        if constexpr (std::is_constant_evaluated()) {
#else
        if consteval {
#endif
            compileTimeAssertBase(cond, AssertType::Expects, message);
        } else {
            assertBase(cond, AssertType::Expects, message, location);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto expects(bool                        cond,
                                                 const std::source_location& location) noexcept
        -> void {
        expects(cond, "Condition check failed", location);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto
        ensures(bool cond, std::string_view message, const std::source_location& location) noexcept
        -> void {
#ifdef STORMKIT_COMPILER_MSVC
        if constexpr (std::is_constant_evaluated()) {
#else
        if consteval {
#endif
            compileTimeAssertBase(cond, AssertType::Ensures, message);
        } else {
            assertBase(cond, AssertType::Ensures, message, location);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto ensures(bool                        cond,
                                                 const std::source_location& location) noexcept
        -> void {
        ensures(cond, "Condition check failed", location);
    }
} // namespace stormkit::core
