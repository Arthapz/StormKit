// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Core:Utils.Monadic;

import std;

import :Meta;

import :Utils.AsCast;
import :Utils.Functional;

export namespace stormkit::core::monadic {
    struct Anything {
        template<typename T>
        operator T&(this auto& self) noexcept;

        template<typename T>
        operator T&&(this auto&& self) noexcept;
    };

    template<typename T>
    [[nodiscard]] constexpr auto as() noexcept -> decltype(auto);
    template<typename T>
    [[nodiscard]] constexpr auto narrow() noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto discard() noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto set(auto& output) noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto emplaceTo(auto& container) noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto equal(auto&& value) noexcept;
    [[nodiscard]] constexpr auto appendTo(std::ranges::range auto& range) noexcept;
    [[nodiscard]] constexpr auto wrap(std::invocable auto&& func) noexcept;
    [[nodiscard]] constexpr auto asByte() noexcept;

    template<typename T,
             std::invocable<T&&>                                First,
             std::invocable<std::invoke_result_t<First, T&&>&&> Second>
    [[nodiscard]] constexpr auto map(First&& first, Second&& second) noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto map(auto&& first, auto&& second) noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto
        either(std::regular_invocable<Anything> auto&&... visitors) noexcept -> decltype(auto);

    template<typename T>
    [[nodiscard]] constexpr auto either(IsUnaryPredicate<T> auto&& predicate,
                                        std::invocable<T> auto&&   true_,
                                        std::invocable<T> auto&& false_) noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto equal() noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto clone() noexcept -> decltype(auto);

    template<typename T>
    [[nodiscard]] constexpr auto init() noexcept -> decltype(auto);

    template<typename T, typename... Args>
    [[nodiscard]] constexpr auto init(Args&&... args) noexcept -> decltype(auto);
} // namespace stormkit::core::monadic

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core::monadic {
    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto as() noexcept -> decltype(auto) {
        return [](auto&& value) noexcept -> decltype(auto) {
            using core::as;
            return as<T>(std::forward<decltype(value)>(value));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto narrow() noexcept -> decltype(auto) {
        return [](auto&& value) noexcept -> decltype(auto) {
            using core::narrow;
            return narrow<T>(std::forward<decltype(value)>(value));
        };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto equal(auto&& value) noexcept {
        return
            [value = std::forward<decltype(value)>(value)](auto&& other) { return value == other; };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto appendTo(std::ranges::range auto& range) noexcept {
        return [&range](auto&& val) {
            range.emplace(std::ranges::cend(range), std::forward<decltype(val)>(val));
        };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto wrap(std::invocable auto&& func) noexcept {
        return [func = std::forward<decltype(func)>(func)](auto&&... args) {
            return func(std::forward<decltype(args)>(args)...);
        };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto asByte() noexcept {
        return [](auto&& val) { return static_cast<std::byte>(val); };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto discard() noexcept -> decltype(auto) {
        return []([[maybe_unused]] auto&& value) noexcept -> void {};
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto set(auto& output) noexcept -> decltype(auto) {
        return [&output](auto&& value) noexcept -> void {
            output = std::forward<decltype(value)>(value);
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto emplaceTo(auto& container) noexcept -> decltype(auto) {
        return [&container](auto&& value) noexcept -> void {
            container.emplace_back(std::forward<decltype(value)>(value));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T,
             std::invocable<T&&>                                First,
             std::invocable<std::invoke_result_t<First, T&&>&&> Second>
    STORMKIT_FORCE_INLINE constexpr auto map(First&&  first,
                                             Second&& second) noexcept -> decltype(auto) {
        return
            [first  = std::forward<decltype(first)>(first),
             second = std::forward<decltype(second)>(second)](T&& args) noexcept -> decltype(auto) {
                return second(first(std::forward<T>(args)));
            };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto map(auto&& first,
                                             auto&& second) noexcept -> decltype(auto) {
        return [first  = std::forward<decltype(first)>(first),
                second = std::forward<decltype(second)>(second)](
                   auto&&... args) noexcept -> decltype(auto) {
            return second(first(std::forward<decltype(args)>(args)...));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto
        either(IsUnaryPredicate<T> auto&& predicate,
               std::invocable<T> auto&&   true_,
               std::invocable<T> auto&&   false_) noexcept -> decltype(auto) {
        [predicate = std::move(predicate), true_ = std::move(true_), false_ = std::move(false_)](
            auto&& elem) noexcept -> decltype(auto) {
            if (predicate(elem)) return first(std::forward<decltype(elem)>(elem));
            return second(elem);
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto equal() noexcept -> decltype(auto) {
        return [](const auto& first, const auto& second) noexcept {
            return core::equal(first, second);
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto
        either(std::regular_invocable<Anything> auto&&... visitors) noexcept -> decltype(auto) {
        return [... visitors =
                    std::forward<decltype(visitors)>(visitors)](auto&& variant) mutable noexcept {
            return std::visit(core::Overloaded { std::forward<decltype(visitors)>(visitors)... },
                              std::forward<decltype(variant)>(variant));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto clone() noexcept -> decltype(auto) {
        return []<typename T>(auto&& value) noexcept(
                   noexcept(std::is_nothrow_copy_constructible_v<PureType<T>>)) {
            return auto(std::forward<T>(value));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto init() noexcept -> decltype(auto) {
        return []<typename... Args>(Args&&... args) noexcept(
                   noexcept(std::is_nothrow_constructible_v<T, Args...>)) -> decltype(auto) {
            return T { std::forward<Args>(args)... };
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto init(Args&&... args) noexcept -> decltype(auto) {
        return [... args = std::forward<Args>(args)]() mutable noexcept(
                   noexcept(std::is_nothrow_constructible_v<T, Args...>)) -> decltype(auto) {
            return T { std::forward<Args>(args)... };
        };
    }
} // namespace stormkit::core::monadic
