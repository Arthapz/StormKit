// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Core:Utils.Monadic;

import std;

import :Meta;

import :TypeSafe.AsCast;
import :Utils.Functional;
import :Utils.Borrowed;

export namespace stormkit::core::monadic {
    struct Anything {
        template<typename T>
        operator T&(this auto& self) noexcept;

        template<typename T>
        operator T&&(this auto&& self) noexcept;
    };

    template<typename T>
    [[nodiscard]] constexpr auto value() noexcept -> decltype(auto);
    template<typename T>
    [[nodiscard]] constexpr auto as() noexcept -> decltype(auto);
    template<typename T>
    [[nodiscard]] constexpr auto narrow() noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto discard() noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto set(auto& output) noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto
        emplaceTo(std::ranges::range auto& container) noexcept -> decltype(auto);
    [[nodiscard]] constexpr auto is(auto&& value) noexcept;
    [[nodiscard]] constexpr auto appendTo(std::ranges::range auto& range) noexcept;
    [[nodiscard]] constexpr auto wrap(auto&& func) noexcept;
    template<auto Func>
    [[nodiscard]] constexpr auto wrap() noexcept;
    [[nodiscard]] constexpr auto asByte() noexcept;

    template<typename T,
             std::invocable<T>                              First,
             std::invocable<std::invoke_result_t<First, T>> Second>
    [[nodiscard]] constexpr auto map(First&& first, Second&& second) noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto map(auto&& first, auto&& second) noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto
        either(std::regular_invocable<Anything> auto&&... visitors) noexcept -> decltype(auto);

    template<typename T>
    [[nodiscard]] constexpr auto either(IsUnaryPredicate<T> auto&& predicate,
                                        std::invocable<T> auto&&   true_,
                                        std::invocable<T> auto&& false_) noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto is() noexcept -> decltype(auto);

    template<typename T>
    [[nodiscard]] constexpr auto is() noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto clone() noexcept -> decltype(auto);

    template<typename T>
    [[nodiscard]] constexpr auto init() noexcept -> decltype(auto);

    template<typename T, typename... Args>
    [[nodiscard]] constexpr auto init(Args&&... args) noexcept -> decltype(auto);

    [[nodiscard]] constexpr auto borrow() noexcept -> decltype(auto);

    template<typename T>
    [[nodiscard]] constexpr auto forwardLike() noexcept -> decltype(auto);
} // namespace stormkit::core::monadic

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core::monadic {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto value() noexcept -> decltype(auto) {
        return []<IsFancyPointer T>(T&& value) static noexcept -> decltype(auto) {
            return std::forward_like<T>(value.get());
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto as() noexcept -> decltype(auto) {
        return []<typename U>(U&& value) static noexcept -> decltype(auto) {
            return core::as<T>(std::forward<U>(value));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto narrow() noexcept -> decltype(auto) {
        return []<typename U>(U&& value) static noexcept -> decltype(auto) {
            return core::narrow<T>(std::forward<U>(value));
        };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto is(auto&& value) noexcept {
        return [value = std::forward<decltype(value)>(value)]<typename T>(T&& other) {
            return core::is(value, std::forward<T>(other));
        };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto appendTo(std::ranges::range auto& range) noexcept {
        return [&range]<typename T>(T&& val) noexcept {
            range.emplace(std::ranges::cend(range), std::forward<T>(val));
        };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto wrap(auto&& func) noexcept {
        return
            [func = std::forward<decltype(func)>(func)]<typename... Args>(Args&&... args) noexcept {
                return std::invoke(func, std::forward<Args>(args)...);
            };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<auto Func>
    STORMKIT_FORCE_INLINE constexpr auto wrap() noexcept {
        return []<typename... Args>(Args&&... args) static noexcept {
            return std::invoke(Func, std::forward<Args>(args)...);
        };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto asByte() noexcept {
        return [](auto&& val) static noexcept { return core::as<std::byte>(val); };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto discard() noexcept -> decltype(auto) {
        return []([[maybe_unused]] auto&& value) static noexcept -> void {};
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto set(auto& output) noexcept -> decltype(auto) {
        return
            [&output]<typename T>(T&& value) noexcept -> void { output = std::forward<T>(value); };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto
        emplaceTo(std::ranges::range auto& container) noexcept -> decltype(auto) {
        return [&container]<typename T>(T&& value) noexcept -> void {
            container.emplace_back(std::forward<T>(value));
        };
    }

    template<typename First, typename Second, typename... Args>
    inline constexpr auto is_noexcept =
        noexcept(std::declval<Second>()(std::declval<First>()(std::declval<Args>()...)));

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T,
             std::invocable<T>                              First,
             std::invocable<std::invoke_result_t<First, T>> Second>
    STORMKIT_FORCE_INLINE constexpr auto map(First&&  first,
                                             Second&& second) noexcept -> decltype(auto) {
        return map(std::forward<First>(first), std::forward<Second>(second));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto map(auto&& first,
                                             auto&& second) noexcept -> decltype(auto) {
        using First   = decltype(first);
        using Second  = decltype(second);
        using FirstP  = core::PureType<First>;
        using SecondP = core::PureType<Second>;

        return
            [first  = std::forward<First>(first),
             second = std::forward<Second>(second)]<typename... Args>(
                Args&&... args) noexcept(is_noexcept<FirstP, SecondP, Args...>) -> decltype(auto) {
                return second(first(std::forward<Args>(args)...));
            };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto
        either(IsUnaryPredicate<T> auto&& predicate,
               std::invocable<T> auto&&   true_,
               std::invocable<T> auto&&   false_) noexcept -> decltype(auto) {
        [predicate = std::move(predicate), true_ = std::move(true_), false_ = std::move(false_)](
            auto&& elem) noexcept -> decltype(auto) {
            if (predicate(elem)) return first(std::forward<decltype(elem)>(elem));
            return second(elem);
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto is() noexcept -> decltype(auto) {
        return []<typename T, typename U>(T&& first, U&& second) static noexcept {
            return core::is(std::forward<T>(first), std::forward<U>(second));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto is() noexcept -> decltype(auto) {
        return []<typename U>(U&& value) static noexcept {
            return core::is<T>(std::forward<U>(value));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto
        either(std::regular_invocable<Anything> auto&&... visitors) noexcept -> decltype(auto) {
        return [... visitors =
                    std::forward<decltype(visitors)>(visitors)](auto&& variant) mutable noexcept {
            return std::visit(core::Overloaded { std::forward<decltype(visitors)>(visitors)... },
                              std::forward<decltype(variant)>(variant));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto clone() noexcept -> decltype(auto) {
        return []<typename T>(auto&& value) static noexcept(
                   noexcept(std::is_nothrow_copy_constructible_v<PureType<T>>)) {
            return auto(std::forward<T>(value));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto init() noexcept -> decltype(auto) {
        return []<typename... Args>(Args&&... args) static noexcept(
                   noexcept(std::is_nothrow_constructible_v<T, Args...>)) -> decltype(auto) {
            return T { std::forward<Args>(args)... };
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto init(Args&&... args) noexcept -> decltype(auto) {
        return [... args = std::forward<Args>(args)]() mutable noexcept(
                   noexcept(std::is_nothrow_constructible_v<T, Args...>)) -> decltype(auto) {
            return T { std::forward<Args>(args)... };
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto borrow() noexcept -> decltype(auto) {
        return []<typename T>(T&& value) static noexcept {
            return core::borrow(std::forward<T>(value));
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T>
    STORMKIT_FORCE_INLINE constexpr auto forwardLike() noexcept -> decltype(auto) {
        return [](auto&& value) static noexcept -> decltype(auto) {
            return std::forward_like<T>(value);
        };
    }
} // namespace stormkit::core::monadic
