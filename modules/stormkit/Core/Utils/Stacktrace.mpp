module;

#include <stormkit/Core/PlatformMacro.hpp>

#include <cstdio>
#include <version>

#if defined(__cpp_lib_stacktrace) and __cpp_lib_stacktrace >= 202011L
    #define STD_STACKTRACE_SUPPORTED
#elif defined(STORMKIT_OS_LINUX) or defined(STORMKIT_OS_APPLE)
    #define LIBBACKTRACE_SUPPORTED
    #include <backtrace-supported.h>
    #include <backtrace.h>
    #include <cxxabi.h>
#elif defined(STORMKIT_OS_WINDOWS)
    #define WIN32_BACKTRACE_SUPPORTED
    #include <intrin.h>
    #include <windows.h>

    #include <dbghelp.h>
#endif

export module stormkit.Core:Utils.Stacktrace;

import std;

export namespace stormkit::core {
    STORMKIT_API auto printStacktrace() noexcept -> void;
    STORMKIT_API auto backtraceInit(std::string_view filename) noexcept -> bool;
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    namespace {
#if defined(LIBBACKTRACE_SUPPORTED)
        using BacktraceState         = backtrace_state*;
        auto              __bt_state = BacktraceState { nullptr };
        thread_local auto __counter  = 0;

        extern "C" auto bt_callback(void*,
                                    std::uintptr_t,
                                    const char* filename,
                                    int         line,
                                    const char* function) noexcept -> int {
            auto status    = 0;
            auto func_name = "";
            if (function) func_name = function;

            const auto demangled = abi::__cxa_demangle(func_name, nullptr, nullptr, &status);

            if (status != 0) func_name = demangled;

            auto file_name = "";
            if (filename) file_name = filename;

            std::println(stderr, "{}# {} at {}:{}", __counter++, func_name, file_name, line);
            return 0;
        }

        extern "C" auto
            bt_error_callback(void* status, const char* message, int error) noexcept -> void {
            if (status) *std::bit_cast<bool*>(status) = false;

            std::println(stderr, "Failed to print stacktrace, reason: {} code: {}", message, error);
        }
#elif defined(WIN32_BACKTRACE_SUPPORTED)
        struct StackFrame {
            std::string  name;
            unsigned int line;
            std::string  file;
        };

        thread_local auto __counter = 0;

        auto printWin32Error(std::string_view func_name, DWORD error) noexcept -> void {
            auto message_buffer = LPSTR { nullptr };

            const auto size =
                ::FormatMessageA(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM |
                                     FORMAT_MESSAGE_IGNORE_INSERTS,
                                 nullptr,
                                 error,
                                 MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL),
                                 std::bit_cast<LPSTR>(&message_buffer),
                                 0,
                                 nullptr);
            std::println(stderr,
                         "Failed to call {}, disabling stacktrace output, reason: {}",
                         func_name,
                         message_buffer);

            ::LocalFree(message_buffer);
        }

        auto getStackTrace() -> std::vector<StackFrame> {
    #if defined(STORMKIT_BITS_64)
            const auto machine = DWORD { IMAGE_FILE_MACHINE_AMD64 };
    #else
            const auto machine = DWORD { IMAGE_FILE_MACHINE_I386 };
    #endif

            const auto _process = ::GetCurrentProcess();
            auto       process  = HANDLE { INVALID_HANDLE_VALUE };
            auto       success  = ::DuplicateHandle(_process,
                                             _process,
                                             _process,
                                             &process,
                                             0,
                                             false,
                                             DUPLICATE_SAME_ACCESS);
            if (success == FALSE) {
                printWin32Error("DuplicateHandle", ::GetLastError());

                return {};
            }

            ::SymSetOptions(SYMOPT_UNDNAME | SYMOPT_DEFERRED_LOADS);

            const auto thread = ::GetCurrentThread();

            // SymInitialize seems to occasionally fail
            // because of an internal race condition. So retry a finite
            // number of times.
            // @see crbug.com/1339753
            success = FALSE;
            for (auto i = 0; i < 3; ++i)
                if (success = ::SymInitialize(process, nullptr, TRUE); success != FALSE) break;

            if (success == FALSE) {
                printWin32Error("SymInitialize", ::GetLastError());

                return {};
            }

            ::SymSetOptions(SYMOPT_LOAD_LINES);

            auto context = CONTEXT {};
            std::memset(&context, 0, sizeof(CONTEXT));
            context.ContextFlags = CONTEXT_FULL;

            ::RtlCaptureContext(&context);

    #if defined(STORMKIT_BITS_64)
            auto frame = STACKFRAME {};
            std::memset(&frame, 0, sizeof(STACKFRAME));

            frame.AddrPC.Offset    = context.Rip;
            frame.AddrPC.Mode      = AddrModeFlat;
            frame.AddrStack.Offset = context.Rsp;
            frame.AddrStack.Mode   = AddrModeFlat;
            frame.AddrFrame.Offset = context.Rbp;
            frame.AddrFrame.Mode   = AddrModeFlat;
    #else
            auto frame = STACKFRAME {};
            std::memset(&frame, 0, sizeof(STACKFRAME));

            frame.AddrPC.Offset    = context.Eip;
            frame.AddrPC.Mode      = AddrModeFlat;
            frame.AddrStack.Offset = context.Esp;
            frame.AddrStack.Mode   = AddrModeFlat;
            frame.AddrFrame.Offset = context.Ebp;
            frame.AddrFrame.Mode   = AddrModeFlat;
    #endif
            auto first  = true;
            auto frames = std::vector<StackFrame> {};

            while (::StackWalk(machine,
                               process,
                               thread,
                               &frame,
                               &context,
                               nullptr,
                               SymFunctionTableAccess,
                               SymGetModuleBase,
                               nullptr)) {
                if (first) [[unlikely]] {
                    first = false;
                    continue;
                }

                auto f = StackFrame {};
    #if defined(STORMKIT_BITS_64)
                auto offset = DWORD64 { 0 };
    #else
                auto offset = DWORD { 0 };
    #endif
                auto symbol_buffer = std::array<std::byte, sizeof(IMAGEHLP_SYMBOL) + 255> {
                    std::byte { 0 },
                };
                auto symbol           = std::bit_cast<PIMAGEHLP_SYMBOL>(std::data(symbol_buffer));
                symbol->SizeOfStruct  = std::size(symbol_buffer);
                symbol->MaxNameLength = 254;
                if (::SymGetSymFromAddr(process, frame.AddrPC.Offset, &offset, symbol))
                    f.name = symbol->Name;
                else
                    f.name = "Unknown Function";

                auto line        = IMAGEHLP_LINE { .SizeOfStruct = sizeof(IMAGEHLP_LINE) };
                auto offset_line = DWORD { 0 };
                if (::SymGetLineFromAddr(process, frame.AddrPC.Offset, &offset_line, &line)) {
                    f.file = line.FileName;
                    f.line = line.LineNumber;
                } else {
                    f.file = "Unknown File";
                    f.line = 0;
                }

                frames.emplace_back(std::move(f));
            }

            ::SymCleanup(process);

            return frames;
        }
#endif
    } // namespace

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto printStacktrace() noexcept -> void {
        std::println(stderr, "================= CALLSTACK =================");
#if defined(STD_STACKTRACE_SUPPORTED)
        const auto st = std::stacktrace::current();
        std::println(stderr, "{}", std::to_string(st));
#elif defined(LIBBACKTRACE_SUPPORTED)
        backtrace_full(__bt_state, 0, bt_callback, bt_error_callback, nullptr);
#elif defined(WIN32_BACKTRACE_SUPPORTED)
        for (auto&& frame : getStackTrace())
            std::println(stderr,
                         "{}# {} at {}:{}",
                         __counter++,
                         frame.name,
                         frame.file,
                         frame.line);
#endif
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        backtraceInit([[maybe_unused]] std::string_view filename) noexcept -> bool {
#if defined(LIBBACKTRACE_SUPPORTED)
        auto status = true;

        __bt_state = backtrace_create_state(std::data(filename),
                                            BACKTRACE_SUPPORTS_THREADS,
                                            bt_error_callback,
                                            &status);
        if (__bt_state and status)
            std::println("libbacktrace initialized for {} {}",
                         std::bit_cast<std::intptr_t>(__bt_state),
                         filename);
        else
            std::println(stderr, "failed to initialize libbacktrace");

        return status;
#else
        return true;
#endif
    }
} // namespace stormkit::core
