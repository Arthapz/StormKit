// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

#include <stormkit/Core/MemoryMacro.hpp>

export module stormkit.Core:Utils.DynamicLoader;

import std;

import :Utils.Assert;
import :Utils.Pimpl;

export namespace stormkit::core {
    class DynamicLoader;

    class STORMKIT_API DynamicLoader {
      public:
        template<class T>
        using Expected = std::expected<T, std::error_code>;

        ~DynamicLoader();

        DynamicLoader(const DynamicLoader&)                    = delete;
        auto operator=(const DynamicLoader&) -> DynamicLoader& = delete;

        DynamicLoader(DynamicLoader&&) noexcept;
        auto operator=(DynamicLoader&&) noexcept -> DynamicLoader&;

        [[nodiscard]] static auto load(std::filesystem::path filepath) noexcept
            -> Expected<DynamicLoader>;

        [[nodiscard]] static auto allocateAndLoad(std::filesystem::path filepath) noexcept
            -> Expected<std::unique_ptr<DynamicLoader>>;

        template<class Signature>
        [[nodiscard]] auto func(std::string_view name) const noexcept
            -> Expected<std::function<Signature>>;

        template<class Signature>
        [[nodiscard]] auto cFunc(std::string_view name) const noexcept -> Expected<Signature*>;

        [[nodiscard]] auto filepath() const noexcept -> const std::filesystem::path&;

      private:
        class DynamicLoaderImpl;

        DynamicLoader() noexcept;

        auto doLoad(std::filesystem::path filepath) -> Expected<void>;
        auto doGetFunc(std::string_view name) const -> Expected<void*>;

        std::filesystem::path m_filepath;

        Pimpl<DynamicLoaderImpl> m_impl;
    };
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto DynamicLoader::load(std::filesystem::path filepath) noexcept
        -> Expected<DynamicLoader> {
        auto loader = DynamicLoader {};

        return loader.doLoad(std::move(filepath)).transform([&]() { return std::move(loader); });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto DynamicLoader::allocateAndLoad(std::filesystem::path filepath) noexcept
        -> Expected<std::unique_ptr<DynamicLoader>> {
        return load(std::move(filepath)).transform([](auto&& loader) {
            return std::make_unique<DynamicLoader>(std::move(loader));
        });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class Signature>
    auto DynamicLoader::func(std::string_view name) const noexcept
        -> Expected<std::function<Signature>> {
        return cFunc<Signature>(name).transform(
            [](auto&& value) { return std::function<Signature> { value }; });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class Signature>
    auto DynamicLoader::cFunc(std::string_view name) const noexcept -> Expected<Signature*> {
        expects(not std::empty(name));

        return doGetFunc(name).transform(
            [](auto&& value) { return std::bit_cast<Signature*>(value); });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto DynamicLoader::filepath() const noexcept -> const std::filesystem::path& {
        return m_filepath;
    }
} // namespace stormkit::core
