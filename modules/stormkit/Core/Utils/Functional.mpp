// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Core:Utils.Functional;

import std;

import <stormkit/Core/PlatformMacro.hpp>;

import :Meta;

export namespace stormkit::core {
    [[nodiscard]] constexpr auto either(bool                  condition,
                                        std::invocable auto&& true_,
                                        std::invocable auto&& false_) noexcept -> decltype(auto);

    template<IsOptionalType T>
    [[nodiscard]] constexpr auto
        either(T                                                    && optional,
               std::invocable<typename PureType<T>::value_type> auto&& true_,
               std::invocable auto&& false_) noexcept -> decltype(auto);

} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto
        either(bool condition, std::invocable auto&& true_, std::invocable auto&& false_) noexcept
        -> decltype(auto) {
        if (condition) return true_();
        return false_();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsOptionalType T>
    STORMKIT_FORCE_INLINE constexpr auto
        either(T                                                    && optional,
               std::invocable<typename PureType<T>::value_type> auto&& true_,
               std::invocable auto&& false_) noexcept -> decltype(auto) {
        if (optional != std::nullopt) return true_(*std::forward<T>(optional));
        return false_();
    }

} // namespace stormkit::core

