// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Core:Utils.Flags;

import std;


import :Utils.AsCast;
import :Meta;

export {
    namespace stormkit::core {
        namespace details {

            template<stormkit::core::IsEnumeration T>
            struct EnableBitmaskOperators {
                constexpr EnableBitmaskOperators() = default;
                static constexpr auto enable       = false;
            };

            template<stormkit::core::IsEnumeration T>
            inline constexpr auto EnableBitmaskOperatorsEnable = EnableBitmaskOperators<T>::enable;
        } // namespace details

        template<class T>
        concept FlagsType = IsEnumerationPure<T> and details::EnableBitmaskOperatorsEnable<T>;

        /// \brief Check if a flag bit is enabled
        /// \requires `Enum` to be an enumeration promoted as a flag with `FLAG_ENUM` macro
        /// \returns true if the flag big is set and false if not
        template<FlagsType T>
        [[nodiscard]] constexpr auto checkFlag(const T& value, const T& flag) noexcept -> bool;

        /// \exclude
        template<FlagsType T>
        [[nodiscard]] constexpr auto nextValue(const T& value) noexcept -> T;

    } // namespace stormkit::core

    template<stormkit::core::FlagsType T>
    [[nodiscard]] constexpr auto operator|(const T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::core::FlagsType T>
    [[nodiscard]] constexpr auto operator&(const T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::core::FlagsType T>
    [[nodiscard]] constexpr auto operator^(const T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::core::FlagsType T>
    [[nodiscard]] constexpr auto operator~(const T& lhs) noexcept -> T;

    template<stormkit::core::FlagsType T>
    [[nodiscard]] constexpr auto operator|=(T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::core::FlagsType T>
    [[nodiscard]] constexpr auto operator&=(T& lhs, const T& rhs) noexcept -> decltype(auto);

    template<stormkit::core::FlagsType T>
    [[nodiscard]] constexpr auto operator^=(T& lhs, const T& rhs) noexcept -> decltype(auto);
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<FlagsType T>
    STORMKIT_FORCE_INLINE constexpr auto checkFlag(const T& value, const T& flag) noexcept -> bool {
        return (value & flag) == flag;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<FlagsType T>
    STORMKIT_FORCE_INLINE constexpr auto nextValue(const T& value) noexcept -> T {
        return as<T>(as<Underlying>(value) << 1);
    }
} // namespace stormkit::core

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::core::FlagsType T>
STORMKIT_FORCE_INLINE constexpr auto operator|(const T& lhs, const T& rhs) noexcept
    -> decltype(auto) {
    using namespace stormkit::core;
    namespace details = stormkit::core::details;

    using Underlying = std::underlying_type_t<T>;

    return as<T>(as<Underlying>(as<Underlying>(lhs) | as<Underlying>(rhs)));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::core::FlagsType T>
STORMKIT_FORCE_INLINE constexpr auto operator&(const T& lhs, const T& rhs) noexcept
    -> decltype(auto) {
    using namespace stormkit::core;
    namespace details = stormkit::core::details;

    using Underlying = std::underlying_type_t<T>;

    return as<T>(as<Underlying>(as<Underlying>(lhs) & as<Underlying>(rhs)));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::core::FlagsType T>
STORMKIT_FORCE_INLINE constexpr auto operator^(const T& lhs, const T& rhs) noexcept
    -> decltype(auto) {
    using namespace stormkit::core;
    namespace details = stormkit::core::details;

    using Underlying = std::underlying_type_t<T>;

    return as<T>(as<Underlying>(as<Underlying>(lhs) ^ as<Underlying>(rhs)));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::core::FlagsType T>
STORMKIT_FORCE_INLINE constexpr auto operator~(const T& lhs) noexcept -> T {
    using namespace stormkit::core;
    namespace details = stormkit::core::details;

    using Underlying = std::underlying_type_t<T>;

    return as<T>(as<Underlying>(~as<Underlying>(lhs)));
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::core::FlagsType T>
STORMKIT_FORCE_INLINE constexpr auto operator|=(T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit::core;
    namespace details = stormkit::core::details;

    lhs = lhs | rhs;
    return lhs;
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::core::FlagsType T>
STORMKIT_FORCE_INLINE constexpr auto operator&=(T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit::core;
    namespace details = stormkit::core::details;

    lhs = lhs & rhs;
    return lhs;
}

/////////////////////////////////////
/////////////////////////////////////
template<stormkit::core::FlagsType T>
STORMKIT_FORCE_INLINE constexpr auto operator^=(T& lhs, const T& rhs) noexcept -> decltype(auto) {
    using namespace stormkit::core;
    namespace details = stormkit::core::details;

    lhs = lhs ^ rhs;
    return lhs;
}
