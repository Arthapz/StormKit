// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

#if not defined(__STDCPP_FLOAT32_T__) or not defined(__STDCPP_FLOAT64_T__) \
    or not defined(__STDCPP_FLOAT128_T__)
    #ifdef STORMKIT_LIBCXX
        #include <bits/floatn.h>
    #endif
#endif

export module stormkit.Core:Utils.Numerics;

import std;

import :Meta.Traits;
import :Meta.Concepts;
import :Utils.AsCast;

import :Coroutines;

export namespace stormkit::core {
    using UInt8  = std::uint8_t;
    using UInt16 = std::uint16_t;
    using UInt32 = std::uint32_t;
    using UInt64 = std::uint64_t;
#ifdef STORMKIT_COMPILER_MSVC
    // Workaround from https://developercommunity.microsoft.com/t/Support-for-128-bit-integer-type/879048#T-N10042436
    using UInt128 = std::ranges::range_difference_t<std::ranges::iota_view<unsigned long long, unsigned long long>>;
#else
    __extension__ using UInt128 = __uint128_t;
#endif
    using UInt = std::uint_fast32_t;

    using Int8  = std::int8_t;
    using Int16 = std::int16_t;
    using Int32 = std::int32_t;
    using Int64 = std::int64_t;
#ifdef STORMKIT_COMPILER_MSVC
    // Workaround from https://developercommunity.microsoft.com/t/Support-for-128-bit-integer-type/879048#T-N10042436
    using Int128 = std::ranges::range_difference_t<std::ranges::iota_view<long long, long long>>;
#else
    __extension__ using Int128 = __int128_t;
#endif
    using Int = std::int_fast32_t;

#ifdef __STDCPP_FLOAT16_T__
    using Float16 = std::float16_t;
#else
    using Float16 = _Float16;
#endif

#ifdef __STDCPP_FLOAT32_T__
    using Float32 = std::float32_t;
#else
    using Float32 = _Float32;
#endif
#ifdef __STDCPP_FLOAT64_T__
    using Float64 = std::float64_t;
#else
    using Float64 = _Float64;
#endif
#ifdef __STDCPP_FLOAT128_T__
    using Float128 = std::float128_t;
#else
    // using Float128 = _Float128; // TODO provide a fallback
#endif
    using Float = Float32;

    using RangeExtent = std::size_t;
    using RangeOffset = std::ptrdiff_t;

    using Secondf = std::chrono::duration<float, std::chrono::seconds::period>;

    template<IsFloatingPoint T>
    inline constexpr auto Epsilon = std::numeric_limits<T>::epsilon();

    template<IsFloatingPoint T>
    [[nodiscard]] constexpr auto
        is(const T& a, const T& b, const T& epsilon = Epsilon<T>) noexcept -> bool;

    template<IsFloatingPoint T,
             IsFloatingPoint U,
             IsFloatingPoint V = SafeNarrowHelperOtherType<T, U>>
    [[nodiscard]] constexpr auto
        is(const T& a, const U& b, const V& epsilon = Epsilon<V>) noexcept -> bool;

    template<IsIntegral T, IsIntegral U>
        requires Is<T, U>
    [[nodiscard]] constexpr auto is(const T& a, const U& b) noexcept -> bool;

    template<IsIntegral T, IsIntegral U>
        requires IsNot<T, U>
    [[nodiscard]] constexpr auto is(const T& a, const U& b) noexcept -> bool;

    template<IsArithmetic U, IsArithmetic T>
    [[nodiscard]] constexpr auto map(const T& x,
                                     const T& in_min,
                                     const T& in_max,
                                     const U& out_min,
                                     const U& out_max) noexcept -> U;

    template<IsArithmetic T>
    struct NumericsRange {
        T begin;
        T end;
        T step = T { 1 };
    };

    template<class T>
    concept IsNumericsRange = requires(const T& t) {
        t.begin;
        t.end;
        t.step;
    };

    template<class T>
    concept IsNumericsRangePure = IsNumericsRange<PureType<T>>;

    template<IsArithmetic T>
    [[nodiscard]] constexpr auto range(const T& end) noexcept;

    template<IsArithmetic T, IsArithmetic U, IsArithmetic V = U>
    [[nodiscard]] constexpr auto
        range(const T& begin, const U& end, const V& step = V { 1 }) noexcept;

    [[nodiscard]] constexpr auto range(IsNumericsRangePure auto&& range) noexcept;

    template<IsArithmetic... Args>
    [[nodiscard]] constexpr auto multiRange(const Args&... args) noexcept;

    template<IsNumericsRangePure... Args>
    [[nodiscard]] constexpr auto multiRange(Args&&... args) noexcept;
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
#define FOR(a, b)  for (auto a = b.begin; a < b.end; a += b.step)
#define YIELD(...) co_yield { __VA_ARGS__ };

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T, IsNumericsRange U>
    auto rangeImplementation(T a, U b) noexcept
        -> std::generator<std::tuple<decltype(a.begin), decltype(b.begin)>> {
        FOR(i, a)
        FOR(j, b)
        YIELD(i, j)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T, IsNumericsRange U, IsNumericsRange V>
    auto rangeImplementation(T a, U b, V c) noexcept
        -> std::generator<std::tuple<decltype(a.begin), decltype(b.begin), decltype(c.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        YIELD(i, j, k)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T, IsNumericsRange U, IsNumericsRange V, IsNumericsRange W>
    auto rangeImplementation(T a, U b, V c, W d) noexcept
        -> std::generator<
            std::
                tuple<decltype(a.begin), decltype(b.begin), decltype(c.begin), decltype(d.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        YIELD(i, j, k, l)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T,
             IsNumericsRange U,
             IsNumericsRange V,
             IsNumericsRange W,
             IsNumericsRange X>
    auto rangeImplementation(T a, U b, V c, W d, X e) noexcept
        -> std::generator<std::tuple<decltype(a.begin),
                                     decltype(b.begin),
                                     decltype(c.begin),
                                     decltype(d.begin),
                                     decltype(e.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        FOR(m, e)
        YIELD(i, j, k, l, m)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T,
             IsNumericsRange U,
             IsNumericsRange V,
             IsNumericsRange W,
             IsNumericsRange X,
             IsNumericsRange Y>
    auto rangeImplementation(T a, U b, V c, W d, X e, Y f) noexcept
        -> std::generator<std::tuple<decltype(a.begin),
                                     decltype(b.begin),
                                     decltype(c.begin),
                                     decltype(d.begin),
                                     decltype(e.begin),
                                     decltype(f.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        FOR(m, e)
        FOR(n, f)
        YIELD(i, j, k, l, m, n)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T,
             IsNumericsRange U,
             IsNumericsRange V,
             IsNumericsRange W,
             IsNumericsRange X,
             IsNumericsRange Y,
             IsNumericsRange Z>
    auto rangeImplementation(T a, U b, V c, W d, X e, Y f, Z g) noexcept
        -> std::generator<std::tuple<decltype(a.begin),
                                     decltype(b.begin),
                                     decltype(c.begin),
                                     decltype(d.begin),
                                     decltype(e.begin),
                                     decltype(f.begin),
                                     decltype(g.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        FOR(m, e)
        FOR(n, f)
        FOR(o, g)
        YIELD(i, j, k, l, m, n, g)
    }

#undef FOR
#undef YIELD

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsFloatingPoint T>
    constexpr auto is(const T& a, const T& b, const T& epsilon) noexcept -> bool {
        const auto diff   = std::abs(a - b);
        const auto max_ab = std::max(std::abs(a), std::abs(b));

        if (max_ab >= T { 1 }) return diff <= (epsilon * max_ab);
        else if (max_ab > T { 0 })
            return (diff / max_ab) <= epsilon;

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsFloatingPoint T,
             IsFloatingPoint U,
             IsFloatingPoint V = SafeNarrowHelperOtherType<T, U>>
    STORMKIT_FORCE_INLINE constexpr auto
        is(const T& a, const U& b, const V& epsilon) noexcept -> bool {
        using Type = SafeNarrowHelperType<T, U>;

        return is<Type>(narrow<Type>(a), narrow<Type>(b), narrow<Type>(epsilon));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsIntegral T, IsIntegral U>
        requires Is<T, U>
    STORMKIT_FORCE_INLINE constexpr auto is(const T& a, const U& b) noexcept -> bool {
        return a == b;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsIntegral T, IsIntegral U>
        requires IsNot<T, U>
    STORMKIT_FORCE_INLINE constexpr auto is(const T& a, const U& b) noexcept -> bool {
        using Type = SafeNarrowHelperType<T, U>;

        return is<Type>(narrow<Type>(a), narrow<Type>(b));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic U, IsArithmetic T>
    STORMKIT_FORCE_INLINE constexpr auto map(const T& x,
                                             const T& in_min,
                                             const T& in_max,
                                             const U& out_min,
                                             const U& out_max) noexcept -> U {
        return narrow<U>((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto range(IsNumericsRangePure auto&& range) noexcept {
        return std::views::iota(range.begin, range.end) | std::views::stride(range.step);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic T, IsArithmetic U, IsArithmetic V>
    STORMKIT_FORCE_INLINE constexpr auto
        range(const T& begin, const U& end, const V& step) noexcept {
        using Type = SafeNarrowHelperType<SafeNarrowHelperType<T, U>, V>;
        return range(NumericsRange<Type> { .begin = narrow<Type>(begin),
                                           .end   = narrow<Type>(end),
                                           .step  = narrow<Type>(step) });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic T>
    STORMKIT_FORCE_INLINE constexpr auto range(const T& end) noexcept {
        return range(T { 0 }, end);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic... Args>
    STORMKIT_FORCE_INLINE constexpr auto multiRange(const Args&... args) noexcept {
        return rangeImplementation(NumericsRange<Args> { .begin = 0, .end = args }...);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRangePure... Args>
    STORMKIT_FORCE_INLINE constexpr auto multiRange(Args&&... args) noexcept {
        return rangeImplementation(std::forward<Args>(args)...);
    }
} // namespace stormkit::core
