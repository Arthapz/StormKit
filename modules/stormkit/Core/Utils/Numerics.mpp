// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Core:Utils.Numerics;

import std;

import :Meta.Traits;
import :Meta.Concepts;
import :Utils.AsCast;

import :Coroutines;

export namespace stormkit::core {
    using UInt8  = std::uint8_t;
    using UInt16 = std::uint16_t;
    using UInt32 = std::uint32_t;
    using UInt64 = std::uint64_t;
    using UInt   = std::uint_fast64_t;

    using Int8  = std::int8_t;
    using Int16 = std::int16_t;
    using Int32 = std::int32_t;
    using Int64 = std::int64_t;
    using Int   = std::int_fast64_t;

    using RangeExtent = std::size_t;
    using RangeOffset = std::ptrdiff_t;

    using Secondf = std::chrono::duration<float, std::chrono::seconds::period>;

    template<std::floating_point T>
    [[nodiscard]] constexpr auto
        isEqual(T a, T b, T epsilon = std::numeric_limits<T>::epsilon()) noexcept -> bool;

    template<std::floating_point T,
             std::floating_point U,
             std::floating_point V = SafeTypeHelperOtherType<T, U>>
    [[nodiscard]] constexpr auto
        isEqual(T a, U b, V epsilon = std::numeric_limits<V>::epsilon()) noexcept -> bool;

    template<std::integral T>
    [[nodiscard]] constexpr auto isEqual(T a, T b) noexcept -> bool;

    [[nodiscard]] constexpr auto isEqual(std::integral auto a, std::integral auto b) noexcept
        -> bool;

    template<IsArithmetic T, IsArithmetic V>
    [[nodiscard]] constexpr auto map(V x, V in_min, V in_max, T out_min, T out_max) noexcept -> T;

    template<IsArithmetic T>
    struct NumericsRange {
        T begin;
        T end;
        T step = T { 1 };
    };

    template<class T>
    concept IsNumericsRange = requires(T&& t) {
        t.begin;
        t.end;
        t.step;
    };

    template<IsArithmetic T>
    [[nodiscard]] constexpr auto range(T end) noexcept;

    template<IsArithmetic T, IsArithmetic U, IsArithmetic V = U>
    [[nodiscard]] constexpr auto range(T begin, U end, V step = V { 1 }) noexcept;

    [[nodiscard]] constexpr auto range(IsNumericsRange auto range) noexcept;

    template<IsArithmetic... Args>
    [[nodiscard]] constexpr auto multiRange(Args&&...args) noexcept;

    template<IsNumericsRange... Args>
    [[nodiscard]] constexpr auto multiRange(Args&&...args) noexcept;
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
#define FOR(a, b)  for (auto a = b.begin; a < b.end; a += b.step)
#define YIELD(...) co_yield { __VA_ARGS__ };

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T, IsNumericsRange U>
    auto rangeImplementation(T a, U b) noexcept
        -> std::generator<std::tuple<decltype(a.begin), decltype(b.begin)>> {
        FOR(i, a)
        FOR(j, b)
        YIELD(i, j)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T, IsNumericsRange U, IsNumericsRange V>
    auto rangeImplementation(T a, U b, V c) noexcept
        -> std::generator<std::tuple<decltype(a.begin), decltype(b.begin), decltype(c.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        YIELD(i, j, k)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T, IsNumericsRange U, IsNumericsRange V, IsNumericsRange W>
    auto rangeImplementation(T a, U b, V c, W d) noexcept -> std::generator<
        std::tuple<decltype(a.begin), decltype(b.begin), decltype(c.begin), decltype(d.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        YIELD(i, j, k, l)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T,
             IsNumericsRange U,
             IsNumericsRange V,
             IsNumericsRange W,
             IsNumericsRange X>
    auto rangeImplementation(T a, U b, V c, W d, X e) noexcept
        -> std::generator<std::tuple<decltype(a.begin),
                                     decltype(b.begin),
                                     decltype(c.begin),
                                     decltype(d.begin),
                                     decltype(e.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        FOR(m, e)
        YIELD(i, j, k, l, m)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T,
             IsNumericsRange U,
             IsNumericsRange V,
             IsNumericsRange W,
             IsNumericsRange X,
             IsNumericsRange Y>
    auto rangeImplementation(T a, U b, V c, W d, X e, Y f) noexcept
        -> std::generator<std::tuple<decltype(a.begin),
                                     decltype(b.begin),
                                     decltype(c.begin),
                                     decltype(d.begin),
                                     decltype(e.begin),
                                     decltype(f.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        FOR(m, e)
        FOR(n, f)
        YIELD(i, j, k, l, m, n)
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange T,
             IsNumericsRange U,
             IsNumericsRange V,
             IsNumericsRange W,
             IsNumericsRange X,
             IsNumericsRange Y,
             IsNumericsRange Z>
    auto rangeImplementation(T a, U b, V c, W d, X e, Y f, Z g) noexcept
        -> std::generator<std::tuple<decltype(a.begin),
                                     decltype(b.begin),
                                     decltype(c.begin),
                                     decltype(d.begin),
                                     decltype(e.begin),
                                     decltype(f.begin),
                                     decltype(g.begin)>> {
        FOR(i, a)
        FOR(j, b)
        FOR(k, c)
        FOR(l, d)
        FOR(m, e)
        FOR(n, f)
        FOR(o, g)
        YIELD(i, j, k, l, m, n, g)
    }

#undef FOR
#undef YIELD

    /////////////////////////////////////
    /////////////////////////////////////
    template<std::floating_point T>
    constexpr auto isEqual(T a, T b, T epsilon) noexcept -> bool {
        const auto diff   = std::abs(a - b);
        const auto max_ab = std::max(std::abs(a), std::abs(b));

        if (max_ab >= T { 1 }) return diff <= (epsilon * max_ab);
        else if (max_ab > T { 0 })
            return (diff / max_ab) <= epsilon;

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<std::floating_point T,
             std::floating_point U,
             std::floating_point V = SafeTypeHelperOtherType<T, U>>
    constexpr auto isEqual(T a, U b, V epsilon) noexcept -> bool {
        using Type = SafeTypeHelperType<decltype(a), decltype(b)>;

        return isEqual<Type>(narrow<Type>(a), narrow<Type>(b), narrow<Type>(epsilon));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<std::integral T>
    constexpr auto isEqual(T a, T b) noexcept -> bool {
        return a == b;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto isEqual(std::integral auto a, std::integral auto b) noexcept -> bool {
        using T = SafeTypeHelperType<decltype(a), decltype(b)>;

        return isEqual<T>(narrow<T>(a), narrow<T>(b));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic T, IsArithmetic V>
    constexpr auto map(V x, V in_min, V in_max, T out_min, T out_max) noexcept -> T {
        return as<T>((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    constexpr auto range(IsNumericsRange auto range) noexcept {
        return std::views::iota(range.begin, range.end) | std::views::stride(range.step);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic T, IsArithmetic U, IsArithmetic V = U>
    constexpr auto range(T begin, U end, V step) noexcept {
        using Type = SafeTypeHelperType<SafeTypeHelperType<T, U>, V>;
        return range(NumericsRange<Type> { .begin = static_cast<Type>(begin),
                                           .end   = static_cast<Type>(end),
                                           .step  = static_cast<Type>(step) });
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic T>
    constexpr auto range(T end) noexcept {
        return range(T { 0 }, end);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic... Args>
    constexpr auto multiRange(Args&&...args) noexcept {
        return rangeImplementation(
            NumericsRange<PureType<Args>> { .begin = 0, .end = std::forward<Args>(args) }...);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNumericsRange... Args>
    constexpr auto multiRange(Args&&...args) noexcept {
        return rangeImplementation(std::forward<Args>(args)...);
    }
} // namespace stormkit::core
