// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Core:Utils.AsCast;

import std;

import :Utils.Assert;
import :Meta.Concepts;
import :Meta.Traits;

export namespace stormkit::core {
    template<IsNotReference To, typename... Args>
    [[nodiscard]] constexpr auto is(const std::variant<Args...>& variant) noexcept -> bool;

    template<IsPolymorphic To, IsIndirection From>
        requires(IsPolymorphic<RawType<From>> and Is<To, RawType<From>>)
    [[nodiscard]] constexpr auto is(From&& value) noexcept -> bool;

    // variants
    template<IsNotReference To, typename... Args>
    [[nodiscard]] constexpr auto as(std::variant<Args...>& variant) noexcept -> decltype(auto);

    template<IsNotReference To, typename... Args>
    [[nodiscard]] constexpr auto as(std::variant<Args...>&& variant) noexcept -> decltype(auto);

    template<IsNotReference To, typename... Args>
    [[nodiscard]] constexpr auto as(const std::variant<Args...>& variant) noexcept
        -> decltype(auto);

    template<IsNotReference To, typename... Args>
    [[nodiscard]] constexpr auto as(const std::variant<Args...>&& variant) noexcept
        -> decltype(auto);

    // polymorphic
    template<IsRawIndirection To, IsRawIndirection From>
        requires(IsPolymorphic<RawType<From>> and IsPolymorphic<RawType<To>> and
                 Is<RawType<To>, RawType<From>>)
    [[nodiscard]] constexpr auto as(From&& value) -> To;

    // std::byte* / char*
    template<IsRawPointer To, IsRawIndirection From>
        requires IsByte<RawType<To>>
    [[nodiscard]] constexpr auto as(From&& value) noexcept -> To;

    template<IsRawPointer To, IsRawIndirection From>
        requires IsByte<RawType<From>>
    [[nodiscard]] constexpr auto as(From&& value) noexcept -> To;

    // enumerations

    struct Underlying {};

    template<IsEnumeration To, IsIntegral From>
        requires Is<From, UnderlyingType<To>>
    [[nodiscard]] constexpr auto as(const From& value) noexcept -> To;

    template<IsEnumeration To, IsEnumeration From>
        requires Is<UnderlyingType<To>, UnderlyingType<From>>
    [[nodiscard]] constexpr auto as(const From& value) noexcept -> To;

    template<IsIntegral To, IsEnumeration From>
        requires Is<To, UnderlyingType<From>>
    [[nodiscard]] constexpr auto as(const From& value) noexcept -> To;

    template<Is<Underlying> To, IsEnumeration From>
    [[nodiscard]] constexpr auto as(const From& value) noexcept -> UnderlyingType<From>;

    // explicit casts
    template<IsNot<std::string> To, IsBraceInitializableTo<To> From>
        requires(IsNotPure<From, To> and not IsEnumerationPure<To> and
                 not IsEnumerationPure<From> and IsNotBytePure<To> and IsNotBytePure<From>)
    [[nodiscard]] constexpr auto as(From&& from) noexcept -> To;

    template<typename To, IsPure<To> From>
    [[nodiscard]] constexpr auto as(From&& from) noexcept -> To;

    // safe numeric types
    template<IsArithmetic To, IsArithmetic From>
        requires(IsNot<From, To> and not IsNarrowing<To, From>)
    [[nodiscard]] constexpr auto as(const From& value) noexcept -> To;

    // std::byte
    template<IsIntegral To, IsByte From>
    [[nodiscard]] constexpr auto as(const From& value) noexcept -> To;

    template<typename T>
    concept IsSafeCastableToByte =
        IsOneOf<PureType<T>, char, unsigned char, signed char, std::byte>;

    template<IsByte To, IsSafeCastableToByte From>
    [[nodiscard]] constexpr auto as(const From& value) noexcept -> To;

    // narrowing
    template<IsIntegral To, IsIntegral From>
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;

    template<IsFloatingPoint To, IsIntegral From>
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;

    template<IsIntegral To, IsFloatingPoint From>
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;

    template<IsFloatingPoint To, IsFloatingPoint From>
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;

    template<IsEnumeration To, IsIntegral From>
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;

    template<IsEnumeration To, IsEnumeration From>
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;

    template<IsIntegral To, IsEnumeration From>
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;

    template<IsByte To, IsIntegral From>
        requires(not IsSafeCastableToByte<From>)
    [[nodiscard]] constexpr auto narrow(const From& value) noexcept -> To;
    // template<class To, typename From>
    //     requires(not std::convertible_to<From, To> and not IsArithmetic<To> and
    //              not IsArithmetic<From>)
    // [[nodiscard]] constexpr auto as(From&& value) noexcept -> To;
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNotReference To, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto is(const std::variant<Args...>& variant) noexcept -> bool {
        return std::holds_alternative<To>(variant);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsPolymorphic To, IsIndirection From>
        requires(IsPolymorphic<RawType<From>> and Is<To, RawType<From>>)
    STORMKIT_FORCE_INLINE constexpr auto is(From&& value) noexcept -> bool {
        if constexpr (IsLValueReference<From> and not IsPointer<PureType<From>>)
            return dynamic_cast<const To*>(&std::forward<From>(value)) != nullptr;
        else
            return dynamic_cast<const To*>(std::to_address(std::forward<From>(value))) != nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNotReference To, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto as(std::variant<Args...>& variant) noexcept
        -> decltype(auto) {
        expects(is<To, Args...>(variant));

        return std::get<To>(variant);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNotReference To, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto as(std::variant<Args...>&& variant) noexcept
        -> decltype(auto) {
        expects(is<To, Args...>(variant));

        return std::get<To>(std::move(variant));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNotReference To, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto as(const std::variant<Args...>& variant) noexcept
        -> decltype(auto) {
        expects(is<To, Args...>(variant));

        return std::get<To>(variant);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNotReference To, typename... Args>
    STORMKIT_FORCE_INLINE constexpr auto as(const std::variant<Args...>&& variant) noexcept
        -> decltype(auto) {
        expects(is<To, Args...>(variant));

        return std::get<To>(std::move(variant));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsRawIndirection To, IsRawIndirection From>
        requires(IsPolymorphic<RawType<From>> and IsPolymorphic<RawType<To>> and
                 Is<RawType<To>, RawType<From>>)
    STORMKIT_FORCE_INLINE constexpr auto as(From&& value) -> To {
        expects(is<RawType<To>>(value));

        if constexpr (IsLValueReference<From>)
            if constexpr (IsLValueReference<To>) return static_cast<To>(value);
            else
                return static_cast<To>(&value);
        else {
            if constexpr (IsLValueReference<To>) return static_cast<To>(*value);
            else
                return static_cast<To>(value);
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsRawPointer To, IsRawIndirection From>
        requires IsByte<RawType<To>>
    STORMKIT_FORCE_INLINE constexpr auto as(From&& value) noexcept -> To {
        if constexpr (IsLValueReference<From> and not IsRawPointer<PureType<From>>)
            return std::bit_cast<To>(&value);
        else
            return std::bit_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsRawPointer To, IsRawIndirection From>
        requires IsByte<RawType<From>>
    STORMKIT_FORCE_INLINE constexpr auto as(From&& value) noexcept -> To {
        if constexpr (IsLValueReference<From> and not IsRawPointer<PureType<From>>)
            return std::bit_cast<To>(&value);
        else
            return std::bit_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsEnumeration To, IsIntegral From>
        requires Is<From, UnderlyingType<To>>
    STORMKIT_FORCE_INLINE constexpr auto as(const From& value) noexcept -> To {
        return static_cast<To>(value);
    } // namespace stormkit::core

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsEnumeration To, IsEnumeration From>
        requires Is<UnderlyingType<To>, UnderlyingType<From>>
    STORMKIT_FORCE_INLINE constexpr auto as(const From& value) noexcept -> To {
        return as<To>(as<Underlying>(value));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsIntegral To, IsEnumeration From>
        requires Is<To, UnderlyingType<From>>
    STORMKIT_FORCE_INLINE constexpr auto as(const From& value) noexcept -> To {
        return as<Underlying>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<Is<Underlying> To, IsEnumeration From>
    STORMKIT_FORCE_INLINE constexpr auto as(const From& value) noexcept -> UnderlyingType<From> {
        using T = UnderlyingType<From>;
        return static_cast<T>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsNot<std::string> To, IsBraceInitializableTo<To> From>
        requires(IsNotPure<From, To> and not IsEnumerationPure<To> and
                 not IsEnumerationPure<From> and IsNotBytePure<To> and IsNotBytePure<From>)
    STORMKIT_FORCE_INLINE constexpr auto as(From&& from) noexcept -> To {
        return To { std::forward<From>(from) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename To, IsPure<To> From>
    STORMKIT_FORCE_INLINE constexpr auto as(From&& from) noexcept -> To {
        return std::forward<From>(from);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsArithmetic To, IsArithmetic From>
        requires(IsNot<From, To> and not IsNarrowing<To, From>)
    STORMKIT_FORCE_INLINE constexpr auto as(const From& value) noexcept -> To {
        return static_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsByte To, IsSafeCastableToByte From>
    STORMKIT_FORCE_INLINE constexpr auto as(const From& value) noexcept -> To {
        return static_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsIntegral To, IsByte From>
    STORMKIT_FORCE_INLINE constexpr auto as(const From& value) noexcept -> To {
        return static_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsIntegral To, IsIntegral From>
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        using Type = SafeNarrowHelperType<To, From>;
        if constexpr (IsPure<From, To>) {
            expects(std::numeric_limits<To>::lowest() <= value);
            expects(std::numeric_limits<To>::max() > value);
        } else {
            if constexpr (std::signed_integral<To> and std::unsigned_integral<From>) {
                expects(static_cast<Type>(std::numeric_limits<To>::max()) >
                        static_cast<Type>(value));
            } else {
                expects(static_cast<Type>(std::numeric_limits<To>::lowest()) <=
                        static_cast<Type>(value));
                expects(static_cast<Type>(std::numeric_limits<To>::max()) >
                        static_cast<Type>(value));
            }
        }

        return static_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsFloatingPoint To, IsFloatingPoint From>
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        expects(std::numeric_limits<To>::lowest() < value);
        expects(std::numeric_limits<To>::max() > value);

        return static_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsFloatingPoint To, IsIntegral From>
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        using Type = SafeNarrowHelperType<To, From>;

        expects(static_cast<Type>(std::numeric_limits<To>::lowest()) < static_cast<Type>(value));
        expects(static_cast<Type>(std::numeric_limits<To>::max()) > static_cast<Type>(value));

        return static_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsIntegral To, IsFloatingPoint From>
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        using Type = SafeNarrowHelperType<To, From>;

        expects(static_cast<Type>(std::numeric_limits<To>::lowest()) < static_cast<Type>(value));
        expects(static_cast<Type>(std::numeric_limits<To>::max()) > static_cast<Type>(value));

        return static_cast<To>(value);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsEnumeration To, IsIntegral From>
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        using T = UnderlyingType<To>;
        return as<To, T>(narrow<T>(value));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsEnumeration To, IsEnumeration From>
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        using T = UnderlyingType<To>;
        return as<To, T>(narrow<T>(as<Underlying>(value)));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsIntegral To, IsEnumeration From>
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        return narrow<To>(as<Underlying>(value));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsByte To, IsIntegral From>
        requires(not IsSafeCastableToByte<From>)
    STORMKIT_FORCE_INLINE constexpr auto narrow(const From& value) noexcept -> To {
        expects(value < std::numeric_limits<std::byte>::max());
        return static_cast<To>(value);
    }

} // namespace stormkit::core
