// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/HashMacro.hpp>
#include <stormkit/Core/MemoryMacro.hpp>

export module stormkit.Core:Meta.NamedType;

import std;

// import :Hash;
import :Utils.Numerics;

export {
    namespace stormkit::core {
        class NamedTypeBase {};

        template<class T, class Tag> //, class... Skills>
        class NamedType final: public NamedTypeBase {
          public:
            using ElementType = T;
            using RefType     = NamedType<T&, Tag>;

            using underlying_type = ElementType;
            using reference_type  = RefType;

            constexpr NamedType() noexcept(std::is_nothrow_default_constructible_v<ElementType>);
            constexpr ~NamedType() noexcept(std::is_nothrow_destructible_v<ElementType>);

            template<class... Args>
            constexpr explicit(sizeof...(Args) == 1) NamedType(Args&&... args) noexcept(
                std::is_nothrow_constructible_v<ElementType, Args...>)
                : m_value { std::forward<Args>(args)... } {}

            constexpr NamedType(const NamedType&) noexcept(
                std::is_nothrow_copy_constructible_v<ElementType>);

            constexpr auto
                operator=(const NamedType&) noexcept(std::is_nothrow_copy_assignable_v<ElementType>)
                    -> NamedType&;

            constexpr NamedType(NamedType&&) noexcept(
                std::is_nothrow_move_constructible_v<ElementType>);

            constexpr auto
                operator=(NamedType&&) noexcept(std::is_nothrow_move_assignable_v<ElementType>)
                    -> NamedType&;

            [[nodiscard]] constexpr auto get(this auto&& self) noexcept -> decltype(auto);

            [[nodiscard]] constexpr operator RefType() noexcept;

          private:
            ElementType m_value;
        };

        template<class T>
        concept IsNamedType = std::derived_from<T, NamedTypeBase>;

        template<class T, class... Args>
        constexpr auto makeNamed(Args&&... args) noexcept -> T;

        struct PreIncrementable {
            constexpr auto operator++(this auto&& self) -> decltype(auto);
        };

        struct PostIncrementable {
            constexpr auto operator++(this auto&& self, int) -> decltype(auto);
        };

        struct PreDecrementable {
            constexpr auto operator--(this auto&& self) -> decltype(auto);
        };

        struct PostDecrementable {
            constexpr auto operator--(this auto&& self, int) -> decltype(auto);
        };

        struct BinaryAddable {
            [[nodiscard]] constexpr auto operator+(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator+=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct UnaryAddable {
            [[nodiscard]] constexpr auto operator+(this auto&& self) -> decltype(auto);
        };

        struct Addable: BinaryAddable, UnaryAddable {};

        struct BinarySubtractable {
            [[nodiscard]] constexpr auto operator-(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator-=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct UnarySubtractable {
            [[nodiscard]] constexpr auto operator-(this auto&& self) -> decltype(auto);
        };

        struct Subtractable: BinarySubtractable, UnarySubtractable {};

        struct Multiplicable {
            [[nodiscard]] constexpr auto operator*(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator*=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct Divisible {
            [[nodiscard]] constexpr auto operator/(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator/=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct Modulable {
            [[nodiscard]] constexpr auto operator%(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator%=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct BitWiseInvertable {
            [[nodiscard]] constexpr auto operator~(this auto&& self) -> decltype(auto);
        };

        struct BitWiseAndable {
            [[nodiscard]] constexpr auto operator&(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator&=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct BitWiseOrable {
            [[nodiscard]] constexpr auto operator|(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator|=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct BitWiseXorable {
            [[nodiscard]] constexpr auto operator^(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator^=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct BitWiseLeftShiftable {
            [[nodiscard]] constexpr auto operator<<(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator<<=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct BitWiseRightShiftable {
            [[nodiscard]] constexpr auto operator>>(this auto&& self, auto&& other)
                -> decltype(auto);
            constexpr auto operator>>=(this auto&& self, auto&& other) -> decltype(auto);
        };

        struct Comparable {
            [[nodiscard]] constexpr auto operator<=>(this auto&& self, auto&& other) noexcept
                -> std::strong_ordering;
        };

        struct Dereferencable {
            [[nodiscard]] constexpr auto operator*(this auto&& self) noexcept -> decltype(auto);
        };

        struct Callable {
            template<class... Args>
            constexpr auto operator()(this auto&& self, Args&&... args) -> decltype(auto);
        };

        struct MethodCallable {
            [[nodiscard]] constexpr auto operator->(this auto&& self) -> decltype(auto);
        };

        struct ArithmeticLike: PreIncrementable,
                               PostIncrementable,
                               PreDecrementable,
                               PostDecrementable,
                               Addable,
                               Subtractable,
                               Multiplicable,
                               Divisible,
                               Modulable,
                               BitWiseInvertable,
                               BitWiseAndable,
                               BitWiseOrable,
                               BitWiseXorable,
                               BitWiseLeftShiftable,
                               BitWiseRightShiftable,
                               Comparable {};
    } // namespace stormkit::core

    // CONSTRAINED_HASH_FUNC(stormkit::core::IsNamedType)
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::NamedType() noexcept(
        std::is_nothrow_default_constructible_v<ElementType>) = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::~NamedType() noexcept(
        std::is_nothrow_destructible_v<ElementType>) = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::NamedType(const NamedType&) noexcept(
        std::is_nothrow_copy_constructible_v<ElementType>) = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr auto NamedType<T, Tag>::operator=(const NamedType&) noexcept(
        std::is_nothrow_copy_assignable_v<ElementType>) -> NamedType& = default;

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::NamedType(NamedType&&) noexcept(
        std::is_nothrow_move_constructible_v<ElementType>) = default;

    // clang-format off
    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr auto NamedType<T, Tag>::operator=(NamedType &&) noexcept(
        std::is_nothrow_move_assignable_v<ElementType>) -> NamedType & = default;

    // clang-format on

    // template<class T, class Tag>
    // template<class... Args>
    // constexpr NamedType<T, Tag>::NamedType(Args &&...args) noexcept(
    // std::is_nothrow_constructible_v<ElementType, Args...>)
    // : m_value { std::forward<Args>(args)... } {}

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr auto NamedType<T, Tag>::get(this auto&& self) noexcept -> decltype(auto) {
        return std::forward<decltype(self)>(self).m_value;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class Tag>
    constexpr NamedType<T, Tag>::operator RefType() noexcept {
        return RefType { get() };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class T, class... Args>
    constexpr auto makeNamed(Args&&... args) noexcept -> decltype(auto) {
        return T { std::forward<Args>(args)... };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto PreIncrementable::operator++(this auto&& self) -> decltype(auto) {
        return ++(std::forward<decltype(self)>(self).get());
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto PostIncrementable::operator++(this auto&& self, int) -> decltype(auto) {
        return auto { std::forward<decltype(self)>(self).get()++ };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto PreDecrementable::operator--(this auto&& self) -> decltype(auto) {
        return --(std::forward<decltype(self)>(self).get());
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto PostDecrementable::operator--(this auto&& self, int) -> decltype(auto) {
        return auto { std::forward<decltype(self)>(self).get()-- };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BinaryAddable::operator+(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() +
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BinaryAddable::operator+=(this auto&& self, auto&& other) -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val += std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto UnaryAddable::operator+(this auto&& self) -> decltype(auto) {
        return +(std::forward<decltype(self)>(self).get());
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BinarySubtractable::operator-(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() -
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BinarySubtractable::operator-=(this auto&& self, auto&& other)
        -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val -= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto UnarySubtractable::operator-(this auto&& self) -> decltype(auto) {
        return -(std::forward<decltype(self)>(self).get());
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Multiplicable::operator*(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() *
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Multiplicable::operator*=(this auto&& self, auto&& other) -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val *= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Divisible::operator/(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() /
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Divisible::operator/=(this auto&& self, auto&& other) -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val /= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Modulable::operator%(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() %
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Modulable::operator%=(this auto&& self, auto&& other) -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val %= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseInvertable::operator~(this auto&& self) -> decltype(auto) {
        return ~(std::forward<decltype(self)>(self).get());
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseAndable::operator&(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() &
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseAndable::operator&=(this auto&& self, auto&& other) -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val &= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseOrable::operator|(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() |
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseOrable::operator|=(this auto&& self, auto&& other) -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val |= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseXorable::operator^(this auto&& self, auto&& other) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() |
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseXorable::operator^=(this auto&& self, auto&& other) -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val ^= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseLeftShiftable::operator<<(this auto&& self, auto&& other)
        -> decltype(auto) {
        return std::forward<decltype(self)>(self).get()
               << std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseLeftShiftable::operator<<=(this auto&& self, auto&& other)
        -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val <<= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseRightShiftable::operator>>(this auto&& self, auto&& other)
        -> decltype(auto) {
        return std::forward<decltype(self)>(self).get() >>
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto BitWiseRightShiftable::operator>>=(this auto&& self, auto&& other)
        -> decltype(auto) {
        auto&& val = std::forward<decltype(self)>(self).get();
        val >>= std::forward<decltype(other)>(other).get();
        return val;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Comparable::operator<=>(this auto&& self, auto&& other) noexcept
        -> std::strong_ordering {
        return std::forward<decltype(self)>(self).get() <=>
               std::forward<decltype(other)>(other).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Dereferencable::operator*(this auto&& self) noexcept -> decltype(auto) {
        return std::forward<decltype(self)>(self).get();
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<class... Args>
    constexpr auto Callable::operator()(this auto&& self, Args&&... args) -> decltype(auto) {
        return std::forward<decltype(self)>(self).get()(std::forward<Args>(args)...);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto MethodCallable::operator->(this auto&& self) -> decltype(auto) {
        return std::addressof(std::forward<decltype(self)>(self).get());
    }
} // namespace stormkit::core
