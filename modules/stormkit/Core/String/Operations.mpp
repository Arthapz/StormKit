// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Core:String.Operations;

import std;

import :Utils.Assert;
import :Meta.Traits;
import :TypeSafe.Integer;

export namespace stormkit::core {
    [[nodiscard]] constexpr auto split(std::string_view string, char delim) noexcept
        -> std::vector<std::string>;
    [[nodiscard]] constexpr auto toLower(std::string_view string,
                                         std::locale      locale = std::locale { "" }) noexcept
        -> std::string;
    [[nodiscard]] constexpr auto toUpper(std::string_view string,
                                         std::locale      locale = std::locale { "" }) noexcept
        -> std::string;

    [[nodiscard]] constexpr auto toCZString(std::string_view value) noexcept -> const char*;

    [[nodiscard]] constexpr auto replace(std::string_view in,
                                         std::string_view pattern,
                                         std::string_view replacement) noexcept -> std::string;

    template<std::size_t N>
    struct ConstexprString {
        std::array<char, N> str {};

        static constexpr auto size = N - 1u;

        [[nodiscard]] constexpr auto view() const noexcept {
            return std::string_view { std::data(str), std::data(str) + size };
        }

        [[nodiscard]] constexpr operator std::string_view() const noexcept {
            return std::string_view { std::data(str), std::data(str) + size };
        }

        consteval ConstexprString() = default;

        consteval ConstexprString(const char (&new_str)[N]) {
            std::copy_n(new_str, size, std::data(str));
        }
    };
} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::core {
    STORMKIT_INLINE constexpr auto split(std::string_view string, char delim) noexcept
        -> std::vector<std::string> {
        auto output = std::vector<std::string> {};
        auto first  = RangeExtent { 0u };

        while (first < string.size()) {
            const auto second = string.find_first_of(delim, first);

            if (first != second) output.emplace_back(string.substr(first, second - first));

            if (second == std::string_view::npos) break;

            first = second + 1;
        }

        return output;
    }

    STORMKIT_INLINE constexpr auto toLower(std::string_view string, std::locale locale) noexcept
        -> std::string {
        auto& facet = std::use_facet<std::ctype<typename std::string_view::value_type>>(locale);

        auto result = std::string { string };
        facet.tolower(&result[0], &result[0] + result.size());

        return result;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_INLINE auto constexpr toUpper(std::string_view string, std::locale locale) noexcept
        -> std::string {
        auto& facet = std::use_facet<std::ctype<typename std::string_view::value_type>>(locale);

        auto result = std::string { string };
        facet.toupper(&result[0], &result[0] + result.size());

        return result;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_INLINE auto constexpr toCZString(std::string_view value) noexcept -> const char* {
        return std::data(value);
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_INLINE constexpr auto replace(std::string_view in,
                                           std::string_view pattern,
                                           std::string_view replacement) noexcept -> std::string {
        return in | std::views::split(pattern)
               | std::views::transform([replacement](auto&& substr) noexcept {
                     return std::string { replacement }
                            + std::string { std::ranges::begin(substr), std::ranges::end(substr) };
                 })
               | std::views::join | std::views::drop(std::ranges::size(replacement))
               | std::ranges::to<std::string>();
    }
} // namespace stormkit::core
