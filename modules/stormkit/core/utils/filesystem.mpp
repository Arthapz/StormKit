// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/core/platform_macro.hpp>

export module stormkit.core:utils.filesystem;

import std;

import :typesafe.byte;
import :typesafe.integer;
import :typesafe.integer_casts;

export namespace stormkit { inline namespace core {
    [[nodiscard]]
    auto read(std::istream& stream, usize size) noexcept -> std::vector<Byte>;

    template<usize size>
    [[nodiscard]]
    auto read(std::istream& stream) noexcept -> std::array<Byte, size>;

    auto read(std::istream& stream, std::span<Byte> output) noexcept -> void;

    auto write(std::ostream& stream, std::span<const Byte> data) noexcept -> void;

    [[nodiscard]]
    auto read_text(std::istream& stream, usize size) noexcept -> std::string;

    auto read_text(std::istream& stream, std::span<char> output) noexcept -> void;

    auto write_text(std::ostream& stream, std::string_view data) noexcept -> void;
}} // namespace stormkit::core

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stdr = std::ranges;

namespace stormkit { inline namespace core {
    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto read(std::istream& stream, usize size) noexcept -> std::vector<Byte> {
        auto output = std::vector<Byte> {};
        output.resize(size);

        read(stream, output);

        return output;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    template<usize size>
    STORMKIT_FORCE_INLINE
    inline auto read(std::istream& stream) noexcept -> std::array<Byte, size> {
        auto output = std::array<Byte, size> {};

        read(stream, output);

        return output;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto read(std::istream& stream, std::span<Byte> output) noexcept -> void {
        stream
          .read(std::bit_cast<char*>(stdr::data(output)), as<std::streamsize>(stdr::size(output)));
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto write(std::ostream& stream, std::span<const Byte> data) noexcept -> void {
        stream.write(std::bit_cast<const char*>(stdr::data(data)),
                     as<std::streamsize>(stdr::size(data)));
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto read_text(std::istream& stream, usize size) noexcept -> std::string {
        auto output = std::string {};
        output.resize(size);

        read_text(stream, output);

        return output;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto read_text(std::istream& stream, std::span<char> output) noexcept -> void {
        stream.read(stdr::data(output), as<std::streamsize>(stdr::size(output)));
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    STORMKIT_FORCE_INLINE
    inline auto write_text(std::ostream& stream, std::string_view data) noexcept -> void {
        stream.write(stdr::data(data), as<std::streamsize>(stdr::size(data)));
    }
}} // namespace stormkit::core
