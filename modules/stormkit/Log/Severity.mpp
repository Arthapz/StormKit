// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Log:Severity;

import std;

import frozen;

import stormkit.Core;

import <stormkit/Core/FlagsMacro.hpp>;

export {
    namespace stormkit::log {
        enum class Severity {
            Info,
            Warning,
            Error,
            Fatal,
            Debug
        };

        [[nodiscard]] constexpr auto toStringView(Severity severity) noexcept -> std::string_view;
        [[nodiscard]] constexpr auto toString(Severity severity) -> std::string;
    } // namespace stormkit::log

    FLAG_ENUM(stormkit::log::Severity)

    namespace std {
        template<class CharT>
        struct formatter<stormkit::log::Severity, CharT>
            : formatter<basic_string_view<CharT>, CharT> {
            template<class FormatContext>
            auto format(stormkit::log::Severity data, FormatContext& ctx) const
                -> decltype(ctx.out()) {
                return formatter<basic_string_view<CharT>, CharT>::format(
                    stormkit::log::toStringView(data),
                    ctx);
            }
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::log {
    namespace details {
        constexpr auto SEVERITY_TO_STRING = [] {
            using namespace std::literals;

            return frozen::make_unordered_map<Severity, std::string_view>({
                { Severity::Info, "Info"sv },
                { Severity::Warning, "Warning"sv },
                { Severity::Error, "Error"sv },
                { Severity::Fatal, "Fatal"sv },
                { Severity::Debug, "Debug"sv },
            });
        }();
    } // namespace details

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto toStringView(Severity severity) noexcept -> std::string_view {
        const auto it = details::SEVERITY_TO_STRING.find(severity);
        core::expects(it != std::ranges::cend(details::SEVERITY_TO_STRING));

        return it->second;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto toString(Severity severity) -> std::string {
        return std::string { toStringView(severity) };
    }
} // namespace stormkit::log
