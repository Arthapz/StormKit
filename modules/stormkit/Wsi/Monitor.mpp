// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Wsi:Monitor;

import std;

import stormkit.Core;

import <stormkit/Core/FlagsMacro.hpp>;

export {
    namespace stormkit::wsi {
        struct Monitor {
            enum class Flags {
                None = 0,
                Primary
            };

            Flags flags = Flags::None;
            std::string name;

            std::vector<core::math::ExtentU> extents;

            void *handle = nullptr;

            [[nodiscard]] constexpr auto operator<=>(const Monitor& other) const noexcept
                -> std::strong_ordering;
        };

        [[nodiscard]] auto toString(const Monitor& flags) -> std::string;
        [[nodiscard]] constexpr auto toString(Monitor::Flags flags) -> std::string;
        [[nodiscard]] constexpr auto toStringView(Monitor::Flags flags) noexcept
            -> std::string_view;
    } // namespace stormkit::wsi

    FLAG_ENUM(stormkit::wsi::Monitor::Flags)

    namespace std {
        template<class CharT>
        struct formatter<stormkit::wsi::Monitor::Flags, CharT>
            : formatter<basic_string_view<CharT>, CharT> {
            template<class FormatContext>
            auto format(stormkit::wsi::Monitor::Flags data, FormatContext& ctx) const
                -> decltype(ctx.out()) {
                return formatter<basic_string_view<CharT>,
                                 CharT>::format(stormkit::wsi::toStringView(data), ctx);
            }
        };

        template<class CharT>
        struct formatter<stormkit::wsi::Monitor, CharT>
            : public formatter<basic_string<CharT>, CharT> {
            template<class FormatContext>
            auto format(const stormkit::wsi::Monitor& data, FormatContext& ctx) const
                -> decltype(ctx.out()) {
                return formatter<basic_string<CharT>, CharT>::format(stormkit::wsi::toString(data),
                                                                     ctx);
            }
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi {
    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto Monitor::operator<=>(const Monitor& other) const noexcept
        -> std::strong_ordering {
        if (auto ret = flags <=> other.flags; ret != 0) return ret;

#ifdef STORMKIT_COMPILER_CLANG
        if (auto ret = name.compare(other.name); ret != 0) {
            if (ret < 0) return std::strong_ordering::less;
            else if (ret > 0)
                return std::strong_ordering::greater;
        }
#else
        if (auto ret = name <=> other.name; ret != 0) return ret;
#endif

        if (auto ret = std::size(extents) <=> std::size(other.extents); ret != 0) return ret;

        for (auto i : core::range(std::size(extents))) {
            if (auto ret = extents[i].width <=> other.extents[i].width; ret != 0) return ret;
            if (auto ret = extents[i].height <=> other.extents[i].height; ret != 0) return ret;
        }

        return std::strong_ordering::equal;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    inline auto toString(const Monitor& monitor) -> std::string {
        using namespace std::literals;
        return std::format(
            "[Monitor: flags = {}, name = {}, extents = {}]",
            monitor.flags,
            monitor.name,
            monitor.extents | std::views::transform([](auto&& v) { return core::toString(v); }) |
                std::views::join |
                std::ranges::to<std::string>()); // TODO use join_with when implemented
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto toString(Monitor::Flags flags) -> std::string {
        return std::string { toStringView(flags) };
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto toStringView(Monitor::Flags flags) noexcept -> std::string_view {
        using namespace std::literals;

        switch (flags) {
            case Monitor::Flags::None: return "Flags::None"sv;
            case Monitor::Flags::Primary: return "Flags::Primary"sv;
            default: break;
        }

        return "Unknown"sv;
    }
} // namespace stormkit::wsi
