// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Wsi:MouseButton;

import std;

import stormkit.Core;

import <stormkit/Core/FlagsMacro.hpp>;

export {
    namespace stormkit::wsi {
        enum class MouseButton : core::UInt8 {
            Left,
            Right,
            Middle,
            Button1,
            Button2,
            ButtonCount,
            Unknow = std::numeric_limits<core::Int8>::max(),
        };

        inline constexpr auto MOUSE_BUTTON_COUNT =
            core::as<core::RangeExtent>(MouseButton::ButtonCount);

        [[nodiscard]] constexpr auto toStringView(MouseButton value) noexcept -> std::string_view;
        [[nodiscard]] constexpr auto toString(MouseButton value) -> std::string;
    } // namespace stormkit::wsi

    namespace std {
        template<class CharT>
        struct formatter<stormkit::wsi::MouseButton, CharT>
            : formatter<basic_string_view<CharT>, CharT> {
            template<class FormatContext>
            auto format(stormkit::wsi::MouseButton data, FormatContext& ctx) const
                -> decltype(ctx.out()) {
                return formatter<basic_string_view<CharT>,
                                 CharT>::format(stormkit::wsi::toStringView(data), ctx);
            }
        };
    } // namespace std
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi {
    namespace details {
        inline constexpr auto MOUSE_BUTTON_TO_STRING = [] {
            using namespace std::literals;

            return core::makeFrozenMap<MouseButton, std::string_view>({
                { MouseButton::Left, "Left"sv },
                { MouseButton::Right, "Right"sv },
                { MouseButton::Middle, "Middle"sv },
                { MouseButton::Button1, "Button1"sv },
                { MouseButton::Button2, "Button2"sv },
                { MouseButton::Unknow, "Unknown button"sv },
            });
        }();
    } // namespace details

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto toStringView(MouseButton value) noexcept -> std::string_view {
        const auto it = details::MOUSE_BUTTON_TO_STRING.find(value);
        if (it == std::ranges::cend(details::MOUSE_BUTTON_TO_STRING)) [[unlikely]]
            return details::MOUSE_BUTTON_TO_STRING.at(MouseButton::Unknow);

        return it->second;
    }

    ////////////////////////////////////////
    ////////////////////////////////////////
    constexpr auto toString(MouseButton value) -> std::string {
        return std::string { toStringView(value) };
    }
} // namespace stormkit::wsi
