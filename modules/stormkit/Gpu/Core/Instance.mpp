// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Gpu/Core/VulkanMacro.hpp>

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu:Core.Instance;

import std;

import stormkit.Core;



import :Vulkan;

import :Core.Types;
import :Core.Device;

export namespace stormkit::gpu {
    class PhysicalDevice;

    class STORMKIT_API Instance {
        struct Tag {};

      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Instance;

        Instance(std::string app_name, bool verbose, Tag);
        ~Instance();

        Instance(const Instance&)                    = delete;
        auto operator=(const Instance&) -> Instance& = delete;

        Instance(Instance&&) noexcept;
        auto operator=(Instance&&) noexcept -> Instance&;

        [[nodiscard]] static auto create(std::string app_name = "",
                    bool verbose = (core::STORMKIT_BUILD_TYPE == "Debug")) noexcept -> Expected<Instance>;
        [[nodiscard]] static auto allocate(std::string app_name = "",
                      bool verbose = (core::STORMKIT_BUILD_TYPE == "Debug")) noexcept
            -> Expected<std::unique_ptr<Instance>>;

        [[nodiscard]] auto physicalDevices() const noexcept -> const std::vector<PhysicalDevice>&;

        [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::Instance&;

        // #ifdef STORMKIT_WSI_ENABLED
        //[[nodiscard]] auto createWindowSurface(
        // const wsi::Window& window,
        // Surface::Buffering buffering = Surface::Buffering::Swapchain) const
        //-> WindowSurface;
        //[[nodiscard]] auto allocateWindowSurface(
        // const wsi::Window& window,
        // Surface::Buffering buffering = Surface::Buffering::Swapchain) const
        //-> std::unique_ptr<WindowSurface>;
        //[[nodiscard]] auto allocateRefCountedWindowSurface(
        // const wsi::Window& window,
        // Surface::Buffering buffering = Surface::Buffering::Swapchain) const
        //-> std::shared_ptr<WindowSurface>;
        // #endif

        //[[nodiscard]] auto createOffscreenSurface(
        // const core::math::ExtentU& extent,
        // Surface::Buffering buffering = Surface::Buffering::Triple) const
        //-> OffscreenSurface;
        //[[nodiscard]] auto allocateOffscreenSurface(
        // const core::math::ExtentU& extent,
        // Surface::Buffering buffering = Surface::Buffering::Triple) const
        //-> std::unique_ptr<OffscreenSurface>;
        //[[nodiscard]] auto allocateRefCountedOffscreenSurface(
        // const core::math::ExtentU& extent,
        // Surface::Buffering buffering = Surface::Buffering::Triple) const
        //-> std::shared_ptr<OffscreenSurface>;

      private:
        auto doInitInstance() noexcept -> VulkanExpected<void>;
        auto doInitDebugReportCallback() noexcept -> VulkanExpected<void>;
        auto doRetrievePhysicalDevices() noexcept -> VulkanExpected<void>;

        std::string m_app_name;
        bool m_validation_layers_enabled;

        core::DeferInit<vk::raii::Context>                m_vk_context;
        core::DeferInit<vk::raii::Instance>               m_vk_instance;
        core::DeferInit<vk::raii::DebugUtilsMessengerEXT> m_vk_messenger;

        std::vector<std::string> m_extensions;
        std::vector<PhysicalDevice> m_physical_devices;
    };

    class STORMKIT_API PhysicalDevice: public InstanceObject {
      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Physical_Device;

        ~PhysicalDevice();

        PhysicalDevice(const PhysicalDevice&)                    = delete;
        auto operator=(const PhysicalDevice&) -> PhysicalDevice& = delete;

        PhysicalDevice(PhysicalDevice&&) noexcept;
        auto operator=(PhysicalDevice&&) noexcept -> PhysicalDevice&;

        [[nodiscard]] auto checkExtensionSupport(std::string_view extension) const noexcept -> bool;
        [[nodiscard]] auto
            checkExtensionSupport(std::span<const std::string_view> extensions) const noexcept
            -> bool;
        [[nodiscard]] auto
            checkExtensionSupport(std::span<const core::CZString> extensions) const noexcept
            -> bool;

        [[nodiscard]] auto info() const noexcept -> const PhysicalDeviceInfo&;
        [[nodiscard]] auto capabilities() const noexcept -> const RenderCapabilities&;
        [[nodiscard]] auto memoryProperties() const noexcept
            -> const std::vector<MemoryPropertyFlag>&;

        [[nodiscard]] auto queueFamilies() const noexcept -> const std::vector<QueueFamily>&;

        [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::PhysicalDevice&;

      private:
        PhysicalDevice(vk::raii::PhysicalDevice physical_device, const Instance& instance);

        vk::raii::PhysicalDevice m_vk_physical_device;

        PhysicalDeviceInfo              m_device_info;
        RenderCapabilities              m_capabilities;
        std::vector<MemoryPropertyFlag> m_memory_properties;

        std::vector<QueueFamily>           m_queue_families;
        vk::PhysicalDeviceMemoryProperties m_vk_memory_properties;

        std::vector<std::string> m_extensions;

        friend class Instance;
    };
} // namespace stormkit::gpu

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Instance::Instance(std::string app_name, bool enable_validation, Tag)
        : m_app_name { std::move(app_name) }, m_validation_layers_enabled { enable_validation } {
        doInitInstance()
            .and_then(std::bind_front(&Instance::doInitDebugReportCallback, this))
            .and_then(std::bind_front(&Instance::doRetrievePhysicalDevices, this))
            .transform_error(core::throwError());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Instance::~Instance() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Instance::Instance(Instance&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::operator=(Instance&& other) noexcept
        -> Instance& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::create(std::string app_name, bool enable_validation) noexcept
        -> Expected<Instance> try {
        return Instance { std::move(app_name), enable_validation, Tag {} };
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::allocate(std::string app_name, bool enable_validation) noexcept
        -> Expected<std::unique_ptr<Instance>> try {
        return std::make_unique<Instance>(std::move(app_name), enable_validation, Tag {});
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::physicalDevices() const noexcept
        -> const std::vector<PhysicalDevice>& {
        return m_physical_devices;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Instance::vkHandle() const noexcept -> const vk::raii::Instance& {
        return m_vk_instance;
    }

    // #ifdef STORMKIT_WSI_ENABLED
    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::createWindowSurface(const wsi::Window& window,
    // Surface::Buffering buffering) const
    // -> WindowSurface {
    // return WindowSurface { window, instance(), buffering };
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::allocateWindowSurface(const wsi::Window& window,
    // Surface::Buffering buffering) const
    // -> std::unique_ptr<WindowSurface> {
    // return std::make_unique<WindowSurface>(window, instance(), buffering);
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto
    // Instance::allocateRefCountedWindowSurface(const wsi::Window& window,
    // Surface::Buffering buffering) const
    // -> std::shared_ptr<WindowSurface> {
    // return std::make_shared<WindowSurface>(window, instance(), buffering);
    // }
    // #endif

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::createOffscreenSurface(const core::math::ExtentU&
    // extent, Surface::Buffering buffering) const
    // -> OffscreenSurface {
    // return OffscreenSurface { extent, instance(), buffering };
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::allocateOffscreenSurface(const core::math::ExtentU&
    // extent, Surface::Buffering buffering) const
    // -> std::unique_ptr<OffscreenSurface> {
    // return std::make_unique<OffscreenSurface>(extent, instance(), buffering);
    // }

    // /////////////////////////////////////
    // /////////////////////////////////////
    // STORMKIT_FORCE_INLINE auto Instance::allocateRefCountedOffscreenSurface(
    // const core::math::ExtentU& extent,
    // Surface::Buffering buffering) const -> std::shared_ptr<OffscreenSurface> {
    // return std::make_shared<OffscreenSurface>(extent, instance(), buffering);
    // }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::info() const noexcept -> const PhysicalDeviceInfo& {
        return m_device_info;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::capabilities() const noexcept
        -> const RenderCapabilities& {
        return m_capabilities;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::memoryProperties() const noexcept
        -> const std::vector<MemoryPropertyFlag>& {
        return m_memory_properties;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::queueFamilies() const noexcept
        -> const std::vector<QueueFamily>& {
        return m_queue_families;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto PhysicalDevice::vkHandle() const noexcept
        -> const vk::raii::PhysicalDevice& {
        return m_vk_physical_device;
    }
} // namespace stormkit::gpu
