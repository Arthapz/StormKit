// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu:Resource.Swapchain;

import std;

import stormkit.Core;
import stormkit.Gpu.Vulkan;

import :Core;
import :Resource.Image;

export namespace stormkit::gpu {
    class Queue;
    class STORMKIT_API Swapchain {
        struct Tag {};

      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Swapchain;

        Swapchain(Tag,
                  const Device&                         device,
                  const Surface&                        surface,
                  const core::math::ExtentU&            extent,
                  std::optional<vk::raii::SwapchainKHR> old_swapchain = std::nullopt);
        ~Swapchain();

        Swapchain(const Swapchain&)                    = delete;
        auto operator=(const Swapchain&) -> Swapchain& = delete;

        Swapchain(Swapchain&&) noexcept;
        auto operator=(Swapchain&&) noexcept -> Swapchain&;

        [[nodiscard]] static auto create(const Device&                         device,
                                         const Surface&                        surface,
                                         const core::math::ExtentU&            extent,
                                         std::optional<vk::raii::SwapchainKHR> old_swapchain =
                                             std::nullopt) noexcept -> Expected<Swapchain>;
        [[nodiscard]] static auto
            allocate(const Device&                         device,
                     const Surface&                        surface,
                     const core::math::ExtentU&            extent,
                     std::optional<vk::raii::SwapchainKHR> old_swapchain = std::nullopt) noexcept
            -> Expected<std::unique_ptr<Swapchain>>;

        [[nodiscard]] auto images() const noexcept -> const std::vector<Image>&;
        [[nodiscard]] auto acquireNextImage(std::chrono::nanoseconds wait,
                                            const Semaphore&         image_available) const noexcept
            -> Expected<std::pair<gpu::Result, core::UInt32>>;

        [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::SwapchainKHR&;

      private:
        core::DeferInit<vk::raii::SwapchainKHR> m_vk_swapchain;

        core::math::ExtentU m_extent;
        PixelFormat         m_pixel_format;
        core::UInt32        m_image_count;

        std::vector<Image> m_images;
    };
} // namespace stormkit::gpu

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Swapchain::~Swapchain() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Swapchain::Swapchain(Swapchain&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Swapchain::operator=(Swapchain&& other) noexcept -> Swapchain& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Swapchain::create(
        const Device&                         device,
        const Surface&                        surface,
        const core::math::ExtentU&            extent,
        std::optional<vk::raii::SwapchainKHR> old_swapchain) noexcept -> Expected<Swapchain> try {
        return Swapchain { Tag {}, device, surface, extent, std::move(old_swapchain) };
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Swapchain::allocate(const Device&                         device,
                            const Surface&                        surface,
                            const core::math::ExtentU&            extent,
                            std::optional<vk::raii::SwapchainKHR> old_swapchain) noexcept
        -> Expected<std::unique_ptr<Swapchain>> try {
        return std::make_unique<Swapchain>(Tag {},
                                           device,
                                           surface,
                                           extent,
                                           std::move(old_swapchain));
    } catch (Result result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Swapchain::images() const noexcept -> const std::vector<Image>& {
        return m_images;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Swapchain::vkHandle() const noexcept -> const vk::raii::SwapchainKHR& {
        return m_vk_swapchain;
    }
} // namespace stormkit::gpu
