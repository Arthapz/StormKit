// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu:Resource.Buffer;

import std;

import stormkit.Core;
import stormkit.Gpu.Vulkan;

import :Core;

export namespace stormkit::gpu {
    class STORMKIT_API Buffer {
        struct Tag {};

      public:
        struct CreateInfo {
            BufferUsageFlag    usages;
            RangeExtent        size;
            MemoryPropertyFlag property =
                MemoryPropertyFlag::Host_Visible | MemoryPropertyFlag::Host_Coherent;
        };

        static constexpr auto DEBUG_TYPE = DebugObjectType::Buffer;

        Buffer(const Device& device, const CreateInfo& info, bool persistently_mapping, Tag);
        ~Buffer();

        Buffer(const Buffer&) = delete;
        auto operator=(const Buffer&) -> Buffer&;

        Buffer(Buffer&&) noexcept;
        auto operator=(Buffer&&) noexcept -> Buffer&;

        [[nodiscard]] static auto create(const Device&     device,
                                         const CreateInfo& info,
                                         bool              persistently_mapped = false) noexcept
            -> Expected<Buffer>;
        [[nodiscard]] static auto allocate(const Device&     device,
                                           const CreateInfo& info,
                                           bool              persistently_mapped = false) noexcept
            -> Expected<std::unique_ptr<Buffer>>;

        [[nodiscard]] auto usages() const noexcept -> BufferUsageFlag;
        [[nodiscard]] auto size() const noexcept -> RangeExtent;

        [[nodiscard]] auto map(const Device& device, RangeOffset offset) noexcept -> decltype(auto);
        [[nodiscard]] auto map(const Device& device, RangeOffset offset, RangeExtent size) noexcept
            -> decltype(auto);

        template<class T>
        [[nodiscard]] auto mapAs(const Device& device, RangeOffset offset) noexcept
            -> decltype(auto);

        [[nodiscard]] auto data(this auto& self) noexcept -> decltype(auto);
        [[nodiscard]] auto data(this auto& self, RangeExtent size) noexcept -> decltype(auto);

        template<class T>
        [[nodiscard]] auto dataAs(this auto& self) noexcept -> decltype(auto);

        auto flush(const Device& device, RangeOffset offset, RangeExtent size) -> void;
        auto unmap(const Device& device) -> void;

        [[nodiscard]] auto isPersistentlyMapped() const noexcept -> bool;

        auto upload(const Device& device, std::span<const Byte> data, RangeOffset offset = 0)
            -> void;
        template<class T>
        auto upload(const Device& device, const T& data, RangeOffset offset = 0) -> void;
        template<class T>
        auto upload(const Device& device, std::span<const T> data, RangeOffset offset = 0) -> void;

        [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::Buffer&;

      private:
        static auto findMemoryType(UInt                                      type_filter,
                                   vk::MemoryPropertyFlags                   properties,
                                   const vk::PhysicalDeviceMemoryProperties& mem_properties,
                                   const vk::MemoryRequirements& mem_requirements) -> UInt;

        DeferInit<vk::raii::Buffer> m_vk_buffer;
        vma::raii::Allocation       m_vma_allocation;

        BufferUsageFlag m_usages = {};
        RangeExtent     m_size   = 0;

        bool  m_is_persistently_mapped = false;
        Byte* m_mapped_pointer         = nullptr;
    };

    struct BufferMemoryBarrier {
        AccessFlag src;
        AccessFlag dst;

        UInt32 src_queue_family_index = QUEUE_FAMILY_IGNORED;
        UInt32 dst_queue_family_index = QUEUE_FAMILY_IGNORED;

        const Buffer& buffer;
        RangeExtent   size;
        UInt64        offset = 0;
    };
} // namespace stormkit::gpu

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Buffer::~Buffer() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE Buffer::Buffer(Buffer&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::operator=(Buffer&& other) noexcept -> Buffer& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::create(const Device&     device,
                                              const CreateInfo& info,
                                              bool              persistently_mapped) noexcept
        -> Expected<Buffer> try {
        return Buffer { device, info, persistently_mapped, Tag {} };
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::allocate(const Device&     device,
                                                const CreateInfo& info,
                                                bool              persistently_mapped) noexcept
        -> Expected<std::unique_ptr<Buffer>> try {
        return std::make_unique<Buffer>(device, info, persistently_mapped, Tag {});
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::usages() const noexcept -> BufferUsageFlag {
        expects(m_vma_allocation.operator bool());

        return m_usages;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::size() const noexcept -> RangeExtent {
        expects(m_vma_allocation.operator bool());

        return m_size;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::map(const Device& device, RangeOffset offset) noexcept
        -> decltype(auto) {
        expects(m_vma_allocation.operator bool());
        expects(offset < as<RangeOffset>(m_size));

        if (!m_mapped_pointer) {
            auto _ = device.vmaAllocator().mapMemory(*m_vma_allocation,
                                                     std::bit_cast<void**>(&m_mapped_pointer));
            m_mapped_pointer += offset;
        }

        return m_mapped_pointer;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::map(const Device& device,
                                           RangeOffset   offset,
                                           RangeExtent   size) noexcept -> decltype(auto) {
        return std::span<Byte> { map(device, offset), size };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T>
    STORMKIT_FORCE_INLINE auto Buffer::mapAs(const Device& device, RangeOffset offset) noexcept
        -> decltype(auto) {
        expects(m_vma_allocation.operator bool());

        return std::bit_cast<T*>(map(device, offset));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::data(this auto& self) noexcept -> decltype(auto) {
        expects(self.m_vma_allocation.operator bool());
        expects(self.m_mapped_pointer);

        using Byte = LikeCV<decltype(self), Byte>;

        return std::bit_cast<Byte*>(self.m_mapped_pointer);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::data(this auto& self, RangeExtent size) noexcept
        -> decltype(auto) {
        expects(self.m_vma_allocation.operator bool());
        expects(self.m_mapped_pointer);

        using Byte = LikeCV<decltype(self), Byte>;

        return std::span<Byte> { std::bit_cast<Byte*>(self.m_mapped_pointer), size };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T>
    STORMKIT_FORCE_INLINE auto Buffer::dataAs(this auto& self) noexcept -> decltype(auto) {
        expects(self.m_vma_allocation.operator bool());

        using Type = LikeCV<decltype(self), T>;

        return std::bit_cast<Type*>(self.data());
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        Buffer::flush(const Device& device, RangeOffset offset, RangeExtent size) -> void {
        expects(m_vma_allocation.operator bool());
        expects(offset <= as<RangeOffset>(m_size));
        expects(size <= m_size);

        device.vmaAllocator().flushAllocation(*m_vma_allocation, offset, size);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::unmap(const Device& device) -> void {
        expects(m_vma_allocation.operator bool());
        expects(m_is_persistently_mapped, "Trying to unmap persistent buffer !");

        device.vmaAllocator().unmapMemory(*m_vma_allocation);

        m_mapped_pointer = nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::upload(const Device&         device,
                                              std::span<const Byte> data,
                                              RangeOffset           offset) -> void {
        auto ptr = map(device, offset, std::size(data));

        std::ranges::copy(data, std::begin(ptr));

        unmap(device);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T>
    STORMKIT_FORCE_INLINE auto
        Buffer::upload(const Device& device, const T& data, RangeOffset offset) -> void {
        upload(device, asByteView(data), offset);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<class T>
    STORMKIT_FORCE_INLINE auto
        Buffer::upload(const Device& device, std::span<const T> data, RangeOffset offset) -> void {
        upload(device, asByteView(data), offset);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto Buffer::vkHandle() const noexcept -> const vk::raii::Buffer& {
        return m_vk_buffer;
    }
} // namespace stormkit::gpu
