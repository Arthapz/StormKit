// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu.Vulkan:Utils;

import std;

import stormkit.Core;
import stormkit.Log;

import vulkan_hpp;


export namespace stormkit::gpu {
    template<std::integral T>
    constexpr auto vkMakeVersion(T major, T minor, T patch) noexcept -> core::UInt32;
    constexpr auto vkVersionMajor(std::integral auto version) noexcept -> core::UInt32;
    constexpr auto vkVersionMinor(std::integral auto version) noexcept -> core::UInt32;
    constexpr auto vkVersionPatch(std::integral auto version) noexcept -> core::UInt32;

    template<class T>
    concept IsVulkanWrapper =
        requires(T&& t) { t.vkHandle(); } or requires(T&& t) { t->vkHandle(); };

    template<class T>
    concept IsVulkanFlagsType = vk::FlagTraits<T>::isBitmask;

    template<IsVulkanFlagsType T>
    constexpr auto checkFlag(vk::Flags<T> value, T flag) noexcept -> bool;

    template<IsVulkanFlagsType T>
    constexpr auto checkFlag(vk::Flags<T> value, vk::Flags<T> flag) noexcept -> bool;

    template<typename T>
    using VulkanExpected = std::expected<T, vk::Result>;

    template<typename T, typename... Args>
    auto vkCreate(Args&&...args) noexcept -> VulkanExpected<T>;

    template<typename T, typename Func, typename... Args>
        requires(not core::Is<std::invoke_result_t<Func, T *, Args...>, void>)
    auto vkCall(T& value, Func&& func_ref, Args&&...args) noexcept
        -> VulkanExpected<std::invoke_result_t<Func, T *, Args...>>;

    template<typename T, typename Func, typename... Args>
        requires(core::Is<std::invoke_result_t<Func, T *, Args...>, void>)
    auto vkCall(T& object, Func&& func, Args&&...args) noexcept -> VulkanExpected<void>;

    auto toRaiiVkHandle() noexcept -> decltype(auto);
    auto toVkHandle() noexcept -> decltype(auto);

} // namespace stormkit::gpu

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    template<std::integral T>
    STORMKIT_FORCE_INLINE constexpr auto vkMakeVersion(T major, T minor, T patch) noexcept
        -> core::UInt32 {
        return vkVersionMajor(major) | vkVersionMinor(minor) | vkVersionPatch(patch);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto vkVersionMajor(std::integral auto version) noexcept
        -> core::UInt32 {
        return core::as<core::UInt32>(version >> 22u);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto vkVersionMinor(std::integral auto version) noexcept
        -> core::UInt32 {
        return core::as<core::UInt32>((version >> 12u) & 0x3ffu);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE constexpr auto vkVersionPatch(std::integral auto version) noexcept
        -> core::UInt32 {
        return core::as<core::UInt32>(version & 0xfffu);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsVulkanFlagsType T>
    STORMKIT_FORCE_INLINE constexpr auto checkFlag(vk::Flags<T> value, T flag) noexcept -> bool {
        return (value & flag) == flag;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<IsVulkanFlagsType T>
    STORMKIT_FORCE_INLINE constexpr auto checkFlag(vk::Flags<T> value, vk::Flags<T> flag) noexcept
        -> bool {
        return (value & flag) == flag;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename... Args>
    STORMKIT_FORCE_INLINE auto vkCreate(Args&&...args) noexcept -> VulkanExpected<T> try {
        return T { std::forward<Args>(args)... };
    } catch (const vk::SystemError& err) {
        return std::unexpected { core::narrow<vk::Result>(err.code().value()) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename Func, typename... Args>
        requires(not core::Is<std::invoke_result_t<Func, T *, Args...>, void>)
    STORMKIT_FORCE_INLINE auto vkCall(T& value, Func&& func_ref, Args&&...args) noexcept
        -> VulkanExpected<std::invoke_result_t<Func, T *, Args...>> try {
        auto func = std::mem_fn(std::forward<Func>(func_ref));
        return func(value, std::forward<Args>(args)...);
    } catch (const vk::SystemError& err) {
        return std::unexpected { core::narrow<vk::Result>(err.code().value()) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    template<typename T, typename Func, typename... Args>
        requires(core::Is<std::invoke_result_t<Func, T *, Args...>, void>)
    STORMKIT_FORCE_INLINE auto vkCall(T& value, Func&& func_ref, Args&&...args) noexcept
        -> VulkanExpected<void> try {
        auto func = std::mem_fn(std::forward<Func>(func_ref));
        func(value, std::forward<Args>(args)...);
        return {};
    } catch (const vk::SystemError& err) {
        return std::unexpected { core::narrow<vk::Result>(err.code().value()) };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto toRaiiVkHandle() noexcept -> decltype(auto) {
        return []<IsVulkanWrapper T>(T&& value) noexcept -> decltype(auto) {
            if constexpr (core::IsPointer<core::PureType<T>>)
                return std::forward<T>(value)->vkHandle();
            else
                return std::forward<T>(value).vkHandle();
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto toVkHandle() noexcept -> decltype(auto) {
        return []<IsVulkanWrapper T>(T&& value) noexcept -> decltype(auto) {
            if constexpr (core::IsPointer<core::PureType<T>>)
                return *(std::forward<T>(value)->vkHandle());
            else
                return *(std::forward<T>(value).vkHandle());
        };
    }
} // namespace stormkit::gpu
