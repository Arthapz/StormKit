module;

#define VMA_STATIC_VULKAN_FUNCTIONS 0
#define VMA_IMPLEMENTATION
#include <vk_mem_alloc.hpp>

export module vma;

export namespace VMA_HPP_NAMESPACE {
    //=====================================
    //===             ENUMS             ===
    //=====================================
    using VMA_HPP_NAMESPACE::AllocationCreateFlagBits;
    using VMA_HPP_NAMESPACE::AllocationCreateFlags;
    using VMA_HPP_NAMESPACE::AllocatorCreateFlagBits;
    using VMA_HPP_NAMESPACE::AllocatorCreateFlags;
    using VMA_HPP_NAMESPACE::DefragmentationFlagBits;
    using VMA_HPP_NAMESPACE::DefragmentationFlags;
    using VMA_HPP_NAMESPACE::DefragmentationMoveOperation;
    using VMA_HPP_NAMESPACE::MemoryUsage;
    using VMA_HPP_NAMESPACE::PoolCreateFlagBits;
    using VMA_HPP_NAMESPACE::PoolCreateFlags;
    using VMA_HPP_NAMESPACE::VirtualAllocationCreateFlagBits;
    using VMA_HPP_NAMESPACE::VirtualAllocationCreateFlags;
    using VMA_HPP_NAMESPACE::VirtualBlockCreateFlagBits;
    using VMA_HPP_NAMESPACE::VirtualBlockCreateFlags;

    //=====================================
    //===      TYPEs AND FUNCTIONs      ===
    //=====================================
    using VMA_HPP_NAMESPACE::Allocation;
    using VMA_HPP_NAMESPACE::AllocationCreateInfo;
    using VMA_HPP_NAMESPACE::AllocationInfo;
    using VMA_HPP_NAMESPACE::Allocator;
    using VMA_HPP_NAMESPACE::AllocatorCreateInfo;
    using VMA_HPP_NAMESPACE::AllocatorInfo;
    using VMA_HPP_NAMESPACE::Budget;
    using VMA_HPP_NAMESPACE::DefragmentationContext;
    using VMA_HPP_NAMESPACE::DefragmentationInfo;
    using VMA_HPP_NAMESPACE::DefragmentationMove;
    using VMA_HPP_NAMESPACE::DefragmentationPassMoveInfo;
    using VMA_HPP_NAMESPACE::DefragmentationStats;
    using VMA_HPP_NAMESPACE::DetailedStatistics;
    using VMA_HPP_NAMESPACE::DeviceMemoryCallbacks;
    using VMA_HPP_NAMESPACE::Pool;
    using VMA_HPP_NAMESPACE::PoolCreateInfo;
    using VMA_HPP_NAMESPACE::Statistics;
    using VMA_HPP_NAMESPACE::TotalStatistics;
    using VMA_HPP_NAMESPACE::VirtualAllocation;
    using VMA_HPP_NAMESPACE::VirtualAllocationCreateInfo;
    using VMA_HPP_NAMESPACE::VirtualAllocationInfo;
    using VMA_HPP_NAMESPACE::VirtualBlock;
    using VMA_HPP_NAMESPACE::VirtualBlockCreateInfo;
    using VMA_HPP_NAMESPACE::VulkanFunctions;

    using VMA_HPP_NAMESPACE::UniqueAllocation;
    using VMA_HPP_NAMESPACE::UniqueBuffer;
    using VMA_HPP_NAMESPACE::UniqueDefragmentationContext;
    using VMA_HPP_NAMESPACE::UniqueImage;
    using VMA_HPP_NAMESPACE::UniquePool;
    using VMA_HPP_NAMESPACE::UniqueVirtualAllocation;

    using VMA_HPP_NAMESPACE::createUniqueHandle;
    using VMA_HPP_NAMESPACE::createUniqueHandleVector;
    using VMA_HPP_NAMESPACE::functionsFromDispatcher;

    using VMA_HPP_NAMESPACE::operator|;
    using VMA_HPP_NAMESPACE::operator&;
    using VMA_HPP_NAMESPACE::operator^;
    using VMA_HPP_NAMESPACE::operator~;

#if !defined(VULKAN_HPP_NO_TO_STRING)
    using VMA_HPP_NAMESPACE::to_string;
#endif

    using VMA_HPP_NAMESPACE::createAllocator;
    using VMA_HPP_NAMESPACE::createVirtualBlock;

#ifndef VULKAN_HPP_NO_SMART_HANDLE
    using VMA_HPP_NAMESPACE::createAllocatorUnique;
    using VMA_HPP_NAMESPACE::createVirtualBlockUnique;

    namespace raii {
        using Pool              = VMA_HPP_NAMESPACE::UniquePool;
        using Buffer            = VMA_HPP_NAMESPACE::UniqueBuffer;
        using Image             = VMA_HPP_NAMESPACE::UniqueImage;
        using Allocator         = VMA_HPP_NAMESPACE::UniqueAllocator;
        using VirtualBlock      = VMA_HPP_NAMESPACE::UniqueVirtualBlock;
        using Allocation        = VMA_HPP_NAMESPACE::UniqueAllocation;
        using VirtualAllocation = VMA_HPP_NAMESPACE::UniqueVirtualAllocation;
    } // namespace raii
#endif
} // namespace VMA_HPP_NAMESPACE
