// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/HashMacro.hpp>

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Gpu:Execution.Descriptors;

import std;

import stormkit.Core;

import :Core;
import :Resource;
import stormkit.Gpu.Vulkan;

export {
    namespace stormkit::gpu {
        struct BufferDescriptor {
            DescriptorType               type = DescriptorType::Uniform_Buffer;
            core::UInt32                 binding;
            core::NakedRef<const Buffer> buffer;
            core::UInt32                 range;
            core::UInt32                 offset;
        };

        struct ImageDescriptor {
            DescriptorType                  type = DescriptorType::Combined_Image_Sampler;
            core::UInt32                    binding;
            ImageLayout                     layout;
            core::NakedRef<const ImageView> image_view;
            core::NakedRef<const Sampler>   sampler;
        };

        using Descriptor = std::variant<BufferDescriptor, ImageDescriptor>;
        class DescriptorPool;

        class DescriptorPoolObject: public ParentRef<DescriptorPool> {
          public:
            using ParentRef<DescriptorPool>::ParentRef;

            [[nodiscard]] auto image() const noexcept -> const DescriptorPool&;
        };

        class STORMKIT_API DescriptorSet: public DeviceObject, public DescriptorPoolObject {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Descriptor_Set;

            ~DescriptorSet();

            DescriptorSet(const DescriptorSet&)                    = delete;
            auto operator=(const DescriptorSet&) -> DescriptorSet& = delete;

            DescriptorSet(DescriptorSet&&) noexcept;
            auto operator=(DescriptorSet&&) noexcept -> DescriptorSet&;

            auto update(std::span<const Descriptor> descriptors) -> void;

            [[nodiscard]] auto types() const noexcept -> const std::vector<DescriptorType>&;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::DescriptorSet&;

          private:
            using Deleter = std::function<void(vk::raii::DescriptorSet&)>;

            DescriptorSet(const DescriptorPool      & pool,
                          std::vector<DescriptorType> type,
                          vk::raii::DescriptorSet  && sets,
                          Deleter                     deleter);

            std::vector<DescriptorType> m_types;

            vk::raii::DescriptorSet m_vk_descriptor_set;

            Deleter m_deleter;
            friend class DescriptorPool;
        };

        struct DescriptorSetLayoutBinding {
            core::UInt32      binding;
            DescriptorType    type;
            ShaderStageFlag   stages;
            core::RangeExtent descriptor_count;
        };

        class STORMKIT_API DescriptorSetLayout: public DeviceObject {
            struct Tag {};

          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Descriptor_Set_Layout;

            DescriptorSetLayout(const Device                            & device,
                                std::vector<DescriptorSetLayoutBinding>&& bindings,
                                Tag);
            DescriptorSetLayout(const Device                              & device,
                                std::span<const DescriptorSetLayoutBinding> bindings,
                                Tag);
            ~DescriptorSetLayout();

            DescriptorSetLayout(const DescriptorSetLayout&)                    = delete;
            auto operator=(const DescriptorSetLayout&) -> DescriptorSetLayout& = delete;

            DescriptorSetLayout(DescriptorSetLayout&&) noexcept;
            auto operator=(DescriptorSetLayout&&) noexcept -> DescriptorSetLayout&;

            [[nodiscard]] auto hash() const noexcept -> core::Hash64;
            [[nodiscard]] auto bindings() const noexcept
                -> const std::vector<DescriptorSetLayoutBinding>&;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::DescriptorSetLayout&;

            [[nodiscard]] auto operator==(const DescriptorSetLayout& second) const noexcept -> bool;

          private:
            explicit DescriptorSetLayout(const Device& device);

            std::vector<DescriptorSetLayoutBinding> m_bindings;

            core::Hash64                                   m_hash = 0;
            core::DeferInit<vk::raii::DescriptorSetLayout> m_vk_descriptor_set_layout;
        };

        class STORMKIT_API DescriptorPool: public DeviceObject {
            struct Tag {};

          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Descriptor_Pool;

            struct Size {
                DescriptorType type;
                core::UInt32   descriptor_count;
            };

            DescriptorPool(const Device        & device,
                           std::span<const Size> sizes,
                           core::UInt32          max_sets,
                           Tag);
            ~DescriptorPool();

            DescriptorPool(const DescriptorPool&)                    = delete;
            auto operator=(const DescriptorPool&) -> DescriptorPool& = delete;

            DescriptorPool(DescriptorPool&&) noexcept;
            auto operator=(DescriptorPool&&) noexcept -> DescriptorPool&;

            [[nodiscard]] static auto create(const Device        & device,
                                             std::span<const Size> sizes,
                                             core::UInt32          max_sets) noexcept
                -> Expected<DescriptorPool>;

            [[nodiscard]] static auto allocate(const Device        & device,
                                               std::span<const Size> sizes,
                                               core::UInt32          max_sets) noexcept
                -> Expected<std::unique_ptr<DescriptorPool>>;

            [[nodiscard]] auto vkHandle() const noexcept -> const vk::raii::DescriptorPool&;

          private:
            auto createDescriptorSets(core::RangeExtent          count,
                                      const DescriptorSetLayout& layout) const
                -> std::pair<std::vector<vk::raii::DescriptorSet>, std::vector<DescriptorType>>;
            auto deleteDescriptorSet(vk::raii::DescriptorSet& set) const -> void;

            core::DeferInit<vk::raii::DescriptorPool> m_vk_descriptor_pool;
        };
    } // namespace stormkit::gpu

    template<>
    struct STORMKIT_API std::hash<stormkit::gpu::DescriptorSetLayout> {
        [[nodiscard]] auto
            operator()(const stormkit::gpu::DescriptorSetLayout& value) const noexcept
            -> stormkit::core::Hash64 {
            return value.hash();
        }
    };

    HASH_FUNC(stormkit::gpu::DescriptorSetLayoutBinding,
              value.binding,
              value.type,
              value.stages,
              value.descriptor_count)
    HASH_FUNC(stormkit::gpu::BufferDescriptor,
              value.type,
              value.binding,
              &value.buffer.get(),
              value.range,
              value.offset)
    HASH_FUNC(stormkit::gpu::ImageDescriptor,
              value.type,
              value.binding,
              value.layout,
              &value.image_view.get(),
              &value.sampler.get())

    template<>
    struct STORMKIT_API std::hash<stormkit::gpu::Descriptor> {
        [[nodiscard]] auto operator()(const stormkit::gpu::Descriptor& value) const noexcept
            -> stormkit::core::Hash64 {
            auto hash = stormkit::core::Hash64 { 0 };

            std::visit([&hash](auto& descriptor) { stormkit::core::hashCombine(hash, descriptor); },
                       value);

            return hash;
        }
    };
}

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorSet::DescriptorSet(const DescriptorPool      & pool,
                                                       std::vector<DescriptorType> type,
                                                       vk::raii::DescriptorSet  && set,
                                                       Deleter                     deleter)
        : DeviceObject { pool.device() }, DescriptorPoolObject { pool },
          m_types { std::move(type) }, m_vk_descriptor_set { std::move(set) },
          m_deleter { std::move(deleter) } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorSet::~DescriptorSet() {
        if (*m_vk_descriptor_set) [[likely]]
            m_deleter(m_vk_descriptor_set);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorSet::DescriptorSet(DescriptorSet&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorSet::operator=(DescriptorSet&&) noexcept
        -> DescriptorSet& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto DescriptorSet::update(std::span<const Descriptor> descriptors) -> void {
        const auto [buffers, images] = [&descriptors]() -> decltype(auto) {
            auto buffers = std::vector<vk::DescriptorBufferInfo> {};
            auto images  = std::vector<vk::DescriptorImageInfo> {};
            buffers.reserve(std::size(descriptors));
            images.reserve(std::size(descriptors));

            std::ranges::for_each(
                descriptors,
                core::monadic::either(
                    [&buffers](const BufferDescriptor& descriptor) noexcept -> decltype(auto) {
                        buffers.emplace_back(vk::DescriptorBufferInfo {}
                                                 .setBuffer(toVkHandle()(descriptor.buffer))
                                                 .setOffset(descriptor.offset)
                                                 .setRange(descriptor.range));
                    },
                    [&images](const ImageDescriptor& descriptor) noexcept -> decltype(auto) {
                        images.emplace_back(
                            vk::DescriptorImageInfo {}
                                .setSampler(toVkHandle()(descriptor.sampler))
                                .setImageView(toVkHandle()(descriptor.image_view))
                                .setImageLayout(core::narrow<vk::ImageLayout>(descriptor.layout)));
                    }));

            return std::pair { std::move(buffers), std::move(images) };
        }();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorSet::types() const noexcept
        -> const std::vector<DescriptorType>& {
        return m_types;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorSet::vkHandle() const noexcept
        -> const vk::raii::DescriptorSet& {
        return m_vk_descriptor_set;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorSetLayout::DescriptorSetLayout(const Device& device)
        : DeviceObject { device } {
        const auto vk_bindings =
            m_bindings | std::views::transform([](auto&& binding) noexcept {
                return vk::DescriptorSetLayoutBinding {}
                    .setBinding(binding.binding)
                    .setDescriptorType(core::narrow<vk::DescriptorType>(binding.type))
                    .setDescriptorCount(core::as<core::UInt32>(binding.descriptor_count))
                    .setStageFlags(core::narrow<vk::ShaderStageFlagBits>(binding.stages));
            }) |
            std::ranges::to<std::vector>();

        const auto create_info = vk::DescriptorSetLayoutCreateInfo {}.setBindings(vk_bindings);

        this->device()
            .vkHandle()
            .createDescriptorSetLayout(create_info)
            .transform(core::monadic::set(m_vk_descriptor_set_layout))
            .transform_error(core::monadic::map(core::monadic::as<Result>(), core::throwError()));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    DescriptorSetLayout::DescriptorSetLayout(const Device                            & device,
                                             std::vector<DescriptorSetLayoutBinding>&& bindings,
                                             Tag)
        : DescriptorSetLayout { device } {
        m_bindings = std::move(bindings);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    DescriptorSetLayout::DescriptorSetLayout(const Device                              & device,
                                             std::span<const DescriptorSetLayoutBinding> bindings,
                                             Tag)
        : DescriptorSetLayout { device } {
        m_bindings.reserve(std::ranges::size(bindings));
        std::ranges::copy(bindings, std::back_inserter(m_bindings));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorSetLayout::~DescriptorSetLayout() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE
    DescriptorSetLayout::DescriptorSetLayout(DescriptorSetLayout&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorSetLayout::operator=(DescriptorSetLayout&& other) noexcept
        -> DescriptorSetLayout& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorSetLayout::hash() const noexcept -> core::Hash64 {
        return m_hash;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorSetLayout::bindings() const noexcept
        -> const std::vector<DescriptorSetLayoutBinding>& {
        return m_bindings;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorSetLayout::vkHandle() const noexcept
        -> const vk::raii::DescriptorSetLayout& {
        return m_vk_descriptor_set_layout.get();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        DescriptorSetLayout::operator==(const DescriptorSetLayout& second) const noexcept -> bool {
        return m_hash == second.hash();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorPool::DescriptorPool(const Device        & device,
                                                         std::span<const Size> sizes,
                                                         core::UInt32          max_sets,
                                                         Tag)
        : DeviceObject { device } {
        const auto pool_sizes = sizes | std::views::transform([&](const auto& size) {
                                    return vk::DescriptorPoolSize {}
                                        .setType(core::narrow<vk::DescriptorType>(size.type))
                                        .setDescriptorCount(size.descriptor_count);
                                }) |
                                std::ranges::to<std::vector>();

        const auto create_info = vk::DescriptorPoolCreateInfo {}
                                     .setFlags(vk::DescriptorPoolCreateFlagBits::eFreeDescriptorSet)
                                     .setMaxSets(max_sets)
                                     .setPoolSizes(pool_sizes);

        this->device()
            .vkHandle()
            .createDescriptorPool(create_info)
            .transform(core::monadic::set(m_vk_descriptor_pool))
            .transform_error(core::monadic::map(core::monadic::as<Result>(), core::throwError()));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorPool::~DescriptorPool() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE DescriptorPool::DescriptorPool(DescriptorPool&& other) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorPool::operator=(DescriptorPool&& other) noexcept
        -> DescriptorPool& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorPool::create(const Device        & device,
                                                      std::span<const Size> extents,
                                                      core::UInt32          max_sets) noexcept
        -> Expected<DescriptorPool> try {
        return DescriptorPool { device, extents, max_sets, Tag {} };
    } catch (const Result& result) { return std::unexpected(result); }

    ////////////////////////////////////p/
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorPool::allocate(const Device        & device,
                                                        std::span<const Size> extents,
                                                        core::UInt32          max_sets) noexcept
        -> Expected<std::unique_ptr<DescriptorPool>> try {
        return std::make_unique<DescriptorPool>(device, extents, max_sets, Tag {});
    } catch (const Result& result) { return std::unexpected(result); }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto DescriptorPool::vkHandle() const noexcept
        -> const vk::raii::DescriptorPool& {
        return m_vk_descriptor_pool;
    }
} // namespace stormkit::gpu
