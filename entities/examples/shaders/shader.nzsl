[nzsl_version("1.0")]

module Shader;

struct VertIn
{
   [builtin(vertex_index)] vertex_id: i32
}

struct VertOut
{
    [builtin(position)] position: vec4[f32],
    [location(0)] uv: vec2[f32]
}

external
{
    [binding(0)] texture: sampler2D[f32]
}

[entry(vert)]
fn main(input: VertIn) -> VertOut
{
    let output: VertOut;

    let position: vec2[f32];
    let uv: vec2[f32];

    if(input.vertex_id == 0) {
        position = vec2[f32](-1., -1.);
        uv = vec2[f32](0., 0.);
    } else if(input.vertex_id == 1) {
        position = vec2[f32](1., -1.);
        uv = vec2[f32](1., 0.);
    } else if(input.vertex_id == 2) {
        position = vec2[f32](-1., 1.);
        uv = vec2[f32](0., 1.);
    } else if(input.vertex_id == 3) {
        position = vec2[f32](1., 1.);
        uv = vec2[f32](1., 1.);
    }

    output.position = vec4[f32](position, 0.0, 1.0);
    output.uv = uv;

    return output;
}

struct FragOut
{
    [location(0)] uv: vec4[f32]
}

[entry(frag)]
fn main(input: VertOut) -> FragOut
{
    let output: FragOut;
    output.uv = texture.Sample(input.uv);

    return output;
}
