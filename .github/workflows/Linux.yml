---
name: Linux

on:
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - .github/workflows/Windows-LLVM.yml
      - .github/workflows/Windows-MSVC.yml
      - .github/workflows/macOS.yml
      - .github/workflows/iOS.yml
      - .github/workflows/Android.yml
      - .github/workflows/AutoMerger.yml
      - .gitignore
      - LICENSE
      - README.md

  push:
    branches: [develop]
    paths-ignore:
      - .github/workflows/Windows-LLVM.yml
      - .github/workflows/Windows-MSVC.yml
      - .github/workflows/macOS.yml
      - .github/workflows/iOS.yml
      - .github/workflows/Android.yml
      - .github/workflows/AutoMerger.yml
      - .gitignore
      - LICENSE
      - README.md

jobs:
  build:
    name: Linux-${{ matrix.arch }} (${{ matrix.kind }}-${{ matrix.mode }})

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        arch: [x64, arm64]
        kind: [static, shared]
        mode: [release, debug]

    runs-on: ${{ matrix.os }}

    concurrency:
      group: ${{ github.ref }}-${{ github.base_ref }}-${{ github.head_ref }}-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.kind
        }}-${{ matrix.mode }}

    steps:
      - name: Get current date as package key
        id: cache_key
        run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Add LLVM apt repository
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/noble/ llvm-toolchain-noble main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key

      - name: Update apt repositories
        run: sudo apt update

      - name: Install system dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: build-essential cmake meson pkg-config clang libc++-dev libc++1 libc++abi-dev libc++abi1 mold llvm-runtime
            llvm libxkbcommon-x11-dev xutils-dev x11proto-dev libxcb1-dev libxcb-randr0-dev libxcb-xinput-dev libxcb-xf86dri0-dev
            libxcb-dri3-dev libxcb-xkb-dev libxcb-xfixes0-dev libxau-dev libzstd-dev ninja-build libjpeg-turbo8-dev libpng-dev
            zlib1g-dev
          version: 1.0

      - name: Set xmake env
        run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV
        shell: bash

      - name: Setup XMake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          xmake-version: latest
          actions-cache-folder: .xmake-cache${{ steps.cache_key.outputs.key }}

      - name: Update xmake repository
        run: xmake repo --update -v

      - name: Retrieve dependencies hash
        id: dep_hash
        run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Retrieve cached xmake dependencies
        id: restore-depcache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: ${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.mode }}-${{ steps.dep_hash.outputs.hash }}-${{ steps.cache_key.outputs.key
            }}

      - name: Configure & Install dependencies
        id: configure
        run: |
          xmake f -vD -a ${{ (matrix.arch  == 'x64') && 'x86_64' || (matrix.arch == 'arm64') && 'aarch64' || matrix.arch }} --yes -m ${{ (matrix.mode == 'release' || matrix.mode == 'debug') && matrix.mode || 'releasedbg' }} -k ${{ matrix.kind }} --sanitizers=${{ matrix.mode == 'debug' && 'y' || 'n' }} --examples=y --tests=y --toolchain=llvm --mold=y --runtimes="c++_shared"

      - name: Save cached xmake dependencies
        if: ${{ !steps.restore-depcache.outputs.cache-hit }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

      - name: Build
        id: build
        run: |
          xmake b -v

      - name: Run unit tests
        run: xmake test -v

      - name: Installation
        run: xmake install -v --installdir="${{ runner.workspace }}/output"

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: Linux-x64-${{ matrix.kind }}-${{ matrix.mode }}
          path: ${{ runner.workspace }}/output
