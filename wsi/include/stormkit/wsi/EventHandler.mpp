// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/MemoryMacro.hpp>
#include <stormkit/core/PlatformMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.wsi.eventhandler;

/////////// - STL - ///////////
import <functional>;
import <vector>;
import <memory>;
import <optional>;
import <span>;
import <array>;

/////////// - StormKit::core - ///////////
import stormkit.core.hashmap;
import stormkit.core.memory;

/////////// - StormKit::wsi - ///////////
import stormkit.wsi.key;
import stormkit.wsi.mousebutton;
import stormkit.wsi.window;

// clang-format on
export {
#else
    /////////// - STL - ///////////
    #include <array>
    #include <functional>
    #include <memory>
    #include <optional>
    #include <span>
    #include <vector>

    /////////// - StormKit::core - ///////////
    #include <stormkit/core/HashMap.mpp>
    #include <stormkit/core/Memory.mpp>

    /////////// - StormKit::wsi - ///////////
    #include <stormkit/wsi/Event.mpp>
    #include <stormkit/wsi/Fwd.hpp>
    #include <stormkit/wsi/Key.mpp>
    #include <stormkit/wsi/MouseButton.mpp>
#endif

    namespace stormkit::wsi {
        class STORMKIT_PUBLIC EventHandler {
          public:
            using Callback = std::function<void(const Event &)>;

            explicit EventHandler(Window &window);

            auto update() -> void;

            auto addCallback(EventType event_type, Callback callback) -> void;
            auto clearCallbacks(EventType event_type) -> void;

          private:
            WindowRef m_window;

            core::HashMap<EventType, std::vector<Callback>> m_callback;
        };
        DECLARE_PTR_AND_REF(EventHandler)
    } // namespace stormkit::wsi

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "EventHandler.inl"
