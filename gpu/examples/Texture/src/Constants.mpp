// Copryright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/MemoryMacro.hpp>
#include <stormkit/log/LogMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.triangle.constants;

// clang-format on
export {
#else
    /////////// - STL - ///////////
    #include <array>

    /////////// - StormKit::Log - ///////////
    #include <stormkit/core/Memory.mpp>

    /////////// - StormKit::Log - ///////////
    #include <stormkit/log/LogHandler.mpp>

    /////////// - StormKit::Render - ///////////
    #include <stormkit/gpu/core/Types.mpp>

    #include <stormkit/gpu/pipeline/VertexBindingDescription.mpp>
    #include <stormkit/gpu/pipeline/VertexInputAttributeDescription.mpp>
#endif

    struct Vertex {
        stormkit::core::Vector2f position;
        stormkit::core::Vector2f uv;
    };

    static constexpr auto WINDOW_TITLE  = "StormKit Texture Example";
    static constexpr auto MESH_VERTICES = std::array {
        Vertex { .position = { -0.75f, -0.75f }, .uv = { 0.f, 0.f } },
        Vertex { .position = { 0.75f, -0.75f }, .uv = { 1.f, 0.f } },
        Vertex { .position = { -0.75f, 0.75f }, .uv = { 0.f, 1.f } },
        Vertex { .position = { 0.75f, 0.75f }, .uv = { 1.f, 1.f } },
    };
    static constexpr auto MESH_VERTEX_BUFFER_SIZE = sizeof(Vertex) * std::size(MESH_VERTICES);
    static constexpr auto MESH_VERTEX_BINDING_DESCRIPTIONS =
        std::array { stormkit::gpu::VertexBindingDescription { .binding = 0,
                                                                  .stride  = sizeof(Vertex) } };
    static constexpr auto MESH_VERTEX_ATTRIBUTE_DESCRIPTIONS =
        std::array { stormkit::gpu::VertexInputAttributeDescription {
                         .location = 0,
                         .binding  = 0,
                         .format   = stormkit::gpu::Format::Float2,
                         .offset   = offsetof(Vertex, position) },
                     stormkit::gpu::VertexInputAttributeDescription {
                         .location = 1,
                         .binding  = 0,
                         .format   = stormkit::gpu::Format::Float2,
                         .offset   = offsetof(Vertex, uv) } };

    static constexpr auto VERTEX_SHADER_DATA = stormkit::core::makeStaticByteArray(
#include "vertex.vert.spv.h"
    );
    static constexpr auto FRAGMENT_SHADER_DATA = stormkit::core::makeStaticByteArray(
#include "fragment.frag.spv.h"
    );

    LOGGER("StormKit.Textures");
