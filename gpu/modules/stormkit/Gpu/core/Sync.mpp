// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Gpu:Core.Sync;

import std;

import stormkit.Core;

import :Core.Types;
import :Core.Vulkan;
import :Core.Device;

export namespace stormkit::gpu {
    class STORMKIT_API Fence: public DeviceObject {
      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Fence;

        enum class Status {
            Signaled,
            Unsignaled
        };

        explicit Fence(const Device& device, bool signaled = false);
        ~Fence();

        Fence(const Fence&)                    = delete;
        auto operator=(const Fence&) -> Fence& = delete;

        Fence(Fence&&) noexcept;
        auto operator=(Fence&&) noexcept -> Fence&;

        auto wait(std::chrono::milliseconds wait_for = std::chrono::milliseconds::max()) const
            -> Result;
        auto reset() -> void;

        [[nodiscard]] auto status() const noexcept -> Status;

        [[nodiscard]] operator VkFence() const noexcept;
        [[nodiscard]] auto vkHandle() const noexcept -> VkFence;

      private:
        VkFence m_fence = VK_NULL_HANDLE;
    };

    class STORMKIT_API Semaphore: public DeviceObject {
      public:
        static constexpr auto DEBUG_TYPE = DebugObjectType::Semaphore;

        explicit Semaphore(const Device& device);
        ~Semaphore();

        Semaphore(const Semaphore&)                    = delete;
        auto operator=(const Semaphore&) -> Semaphore& = delete;

        Semaphore(Semaphore&&) noexcept;
        auto operator=(Semaphore&&) noexcept -> Semaphore&;

        [[nodiscard]] operator VkSemaphore() const noexcept;
        [[nodiscard]] auto vkHandle() const noexcept -> VkSemaphore;

      private:
        VkSemaphore m_semaphore = VK_NULL_HANDLE;
    };
} // namespace stormkit::gpu

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    inline Fence::operator VkFence() const noexcept {
        return vkHandle();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Fence::vkHandle() const noexcept -> VkFence {
        core::expects(m_fence);
        return m_fence;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline Semaphore::operator VkSemaphore() const noexcept {
        return vkHandle();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto Semaphore::vkHandle() const noexcept -> VkSemaphore {
        core::expects(m_semaphore);

        return m_semaphore;
    }
} // namespace stormkit::gpu
