// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

#ifndef STORMKIT_NO_MODULES
export module stormkit.Gpu:Graphics:Raytracing;

import std;

import stormkit.Core;

import stormkit.Gpu:Core;

export {
#else
    #include <stormkit/std.hpp>

    #include <stormkit/Core.hpp>

    #include <stormkit/gpu/Core.hpp>
#endif

    namespace stormkit::gpu {
        struct AccelerationStructureDescription;

        class STORMKIT_API AccelerationStructure: public DeviceObject {
          public:
            // static constexpr auto DEBUG_TYPE = DebugObjectType::Render_Pass;

            AccelerationStructure(const Device& device,
                                  const AccelerationStructureDescription& description);
            ~AccelerationStructure();

            AccelerationStructure(const AccelerationStructure&)                    = delete;
            auto operator=(const AccelerationStructure&) -> AccelerationStructure& = delete;

            AccelerationStructure(AccelerationStructure&&) noexcept;
            auto operator=(AccelerationStructure&&) noexcept -> AccelerationStructure&;

            [[nodiscard]] operator VkAccelerationStructureKHR() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkAccelerationStructureKHR;

          private:
            VkAccelerationStructureKHR m_acceleration_structure = VK_NULL_HANDLE;
        };

        DECLARE_PTR_AND_REF(AccelerationStructure);
    } // namespace stormkit::gpu

#ifndef STORMKIT_NO_MODULES
}
#endif

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::gpu {
    /////////////////////////////////////
    /////////////////////////////////////
    inline AccelerationStructure::operator VkAccelerationStructureKHR() const noexcept {
        core::expects(m_acceleration_structure);

        return m_acceleration_structure;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto AccelerationStructure::vkHandle() const noexcept -> VkAccelerationStructureKHR {
        core::expects(m_acceleration_structure);

        return m_acceleration_structure;
    }
} // namespace stormkit::gpu
