// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

#pragma once

#include <stormkit/core/HashMacro.hpp>

#include <stormkit/core/Types.mpp>

#include <stormkit/gpu/core/Fwd.hpp>
#include <stormkit/gpu/core/Types.mpp>

namespace stormkit::gpu {
    struct AttachmentDescription {
        PixelFormat format;
        SampleCountFlag samples = SampleCountFlag::C1;

        AttachmentLoadOperation load_op   = AttachmentLoadOperation::Clear;
        AttachmentStoreOperation store_op = AttachmentStoreOperation::Store;

        AttachmentLoadOperation stencil_load_op   = AttachmentLoadOperation::Dont_Care;
        AttachmentStoreOperation stencil_store_op = AttachmentStoreOperation::Dont_Care;

        ImageLayout source_layout      = ImageLayout::Undefined;
        ImageLayout destination_layout = ImageLayout::Present_Src;

        bool resolve = false;
    };
    using AttachmentDescriptions = std::vector<AttachmentDescription>;

    struct Subpass {
        struct Ref {
            core::UInt32 attachment_id;

            ImageLayout layout = ImageLayout::Color_Attachment_Optimal;
        };

        PipelineBindPoint bind_point;
        std::vector<Ref> attachment_refs;
    };
    using Subpasses = std::vector<Subpass>;

    struct RenderPassDescription {
        AttachmentDescriptions attachments;
        Subpasses subpasses;

        auto isCompatible(const RenderPassDescription &description) const noexcept -> bool;
    };
} // namespace stormkit::gpu

HASH_FUNC(stormkit::gpu::AttachmentDescription)
HASH_FUNC(stormkit::gpu::Subpass::Ref)
HASH_FUNC(stormkit::gpu::Subpass)
HASH_FUNC(stormkit::gpu::RenderPassDescription)
