
// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/HashMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.gpu.pipeline.vertexbindingdescription;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/gpu/core/Fwd.hpp>
    #include <stormkit/gpu/core/Types.mpp>
#endif

    namespace stormkit::gpu {
        class STORMKIT_PUBLIC AccelerationStructure {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Render_Pass;

            AccelerationStructure(const Device &device,
                                  const AccelerationStructureDescription &description);
            ~AccelerationStructure();

            AccelerationStructure(const AccelerationStructure &) = delete;
            auto operator=(const AccelerationStructure &) -> AccelerationStructure & = delete;

            AccelerationStructure(AccelerationStructure &&) noexcept;
            auto operator=(AccelerationStructure &&) noexcept -> AccelerationStructure &;

            [[nodiscard]] operator VkAccelerationStructureKHR() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkAccelerationStructure;

            DEVICE_CONST_GETTER
          private:
            const Device *m_device = nullptr;

            VkAccelerationStructureKHR m_render_pass = VK_NULL_HANDLE;
        };
    } // namespace stormkit::gpu

#include "AccelerationStructure.inl"
