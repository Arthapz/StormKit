// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#include <stormkit/core/PlatformMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.gpu.pipeline.abstractpipeline;
// clang-format on
export {
#else
    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Memory.mpp>
    #include <stormkit/core/Types.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/gpu/core/Enums.mpp>
    #include <stormkit/gpu/core/Fwd.hpp>
    #include <stormkit/gpu/core/Vulkan.mpp>

    #include <stormkit/gpu/pipeline/Fwd.hpp>
#endif

    namespace stormkit::gpu {
        class STORMKIT_PUBLIC AbstractPipeline {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Pipeline;

            AbstractPipeline(const Device &device, const PipelineCache *cache = nullptr) noexcept;

            virtual ~AbstractPipeline();

            AbstractPipeline(const AbstractPipeline &) = delete;
            auto operator=(const AbstractPipeline &) -> AbstractPipeline & = delete;

            AbstractPipeline(AbstractPipeline &&) noexcept;
            auto operator=(AbstractPipeline &&) noexcept -> AbstractPipeline &;

            [[nodiscard]] auto baked() const noexcept -> bool;
            virtual auto bake() -> void = 0;

            [[nodiscard]] operator VkPipeline() const noexcept;
            [[nodiscard]] VkPipeline vkHandle() const noexcept;
            [[nodiscard]] VkPipelineLayout vkLayout() const noexcept;
            

            DEVICE_CONST_GETTER
          protected:
            const Device *m_device                = nullptr;
            const PipelineCache *m_pipeline_cache = nullptr;

            bool m_is_baked = false;

            VkPipeline m_pipeline              = VK_NULL_HANDLE;
            VkPipelineLayout m_pipeline_layout = VK_NULL_HANDLE;

          private:
            AbstractPipeline() = delete;
        };
    } // namespace stormkit::gpu

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "AbstractPipeline.inl"
