// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

/////////// - StormKit::core - ///////////
#include <stormkit/core/PlatformMacro.hpp>

/////////// - StormKit::render - ///////////
#include <stormkit/gpu/core/VulkanMacro.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.gpu.core.instance;

/////////// - STL - ///////////
import <span>;

    /////////// - StormKit::wsi - ///////////
#if STORMKIT_WSI_ENABLED
    import stormkit.wsi.window;
#endif

/////////// - StormKit::core - ///////////
import stormkit.core.strings;

/////////// - StormKit::render - ///////////
import stormkit.gpu.core.dynamicloader;
import stormkit.gpu.core.enums;
import stormkit.gpu.core.surface;
import stormkit.gpu.core.vulkan;

#if STORMKIT_WSI_ENABLED
/////////// - StormKit::wsi - ///////////
import stormkit.wsi.window;
#endif

// clang-format on
export {
#else
    /////////// - STL - ///////////
    #include <span>
    #include <string>
    #include <vector>

    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Strings.mpp>

    /////////// - StormKit::render - ///////////
    #include <stormkit/gpu/core/DynamicLoader.mpp>
    #include <stormkit/gpu/core/Enums.mpp>
    #include <stormkit/gpu/core/Fwd.hpp>
    #include <stormkit/gpu/core/Surface.mpp>
    #include <stormkit/gpu/core/Vulkan.mpp>

    /////////// - StormKit::wsi - ///////////
    #if STORMKIT_WSI_ENABLED
        #include <stormkit/wsi/Window.mpp>
    #endif
#endif

    namespace stormkit::gpu {
        class STORMKIT_PUBLIC Instance {
          public:
            static constexpr auto DEBUG_TYPE = DebugObjectType::Instance;

            explicit Instance(std::string app_name = "");
            ~Instance();

            Instance(const Instance &) = delete;
            auto operator=(const Instance &) -> Instance & = delete;

            Instance(Instance &&) noexcept;
            auto operator=(Instance &&) noexcept -> Instance &;

#ifdef STORMKIT_WSI_ENABLED
            [[nodiscard]] auto createWindowSurface(
                const wsi::Window &window,
                Surface::Buffering buffering = Surface::Buffering::Swapchain) const
                -> WindowSurface;
            [[nodiscard]] auto allocateWindowSurface(
                const wsi::Window &window,
                Surface::Buffering buffering = Surface::Buffering::Swapchain) const
                -> WindowSurfaceOwnedPtr;
            [[nodiscard]] auto allocateRefCountedWindowSurface(
                const wsi::Window &window,
                Surface::Buffering buffering = Surface::Buffering::Swapchain) const
                -> WindowSurfaceSharedPtr;
#endif

            [[nodiscard]] auto createOffscreenSurface(
                const core::ExtentU &extent,
                Surface::Buffering buffering = Surface::Buffering::Triple) const
                -> OffscreenSurface;
            [[nodiscard]] auto allocateOffscreenSurface(
                const core::ExtentU &extent,
                Surface::Buffering buffering = Surface::Buffering::Triple) const
                -> OffscreenSurfaceOwnedPtr;
            [[nodiscard]] auto allocateRefCountedOffscreenSurface(
                const core::ExtentU &extent,
                Surface::Buffering buffering = Surface::Buffering::Triple) const
                -> OffscreenSurfaceSharedPtr;

            [[nodiscard]] auto pickPhysicalDevice() const noexcept
                -> const gpu::PhysicalDevice &;
            [[nodiscard]] auto pickPhysicalDevice(const WindowSurface &surface) noexcept
                -> const gpu::PhysicalDevice &;

            [[nodiscard]] auto physicalDevices() -> std::span<const PhysicalDevice>;

            [[nodiscard]] auto loader() const noexcept -> const DynamicLoader &;

            [[nodiscard]] operator VkInstance() const noexcept;
            [[nodiscard]] auto vkHandle() const noexcept -> VkInstance;
            

          private:
            auto createInstance() noexcept -> void;
            auto createDebugReportCallback() noexcept -> void;
            auto retrievePhysicalDevices() noexcept -> void;

            auto checkValidationLayerSupport(bool enable_validation) noexcept -> bool;
            auto checkExtensionSupport(std::string_view extention) const noexcept -> bool;
            auto checkExtensionSupport(std::span<const std::string_view> extentions) const noexcept
                -> bool;

            static inline bool s_has_instance = 0;

            DynamicLoader m_loader;

            VkInstance m_instance                = VK_NULL_HANDLE;
            VkDebugUtilsMessengerEXT m_messenger = VK_NULL_HANDLE;

            std::vector<PhysicalDevice> m_physical_devices;

            std::string m_app_name;

            std::vector<std::string> m_extensions;
        };
    } // namespace stormkit::gpu

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "Instance.inl"
