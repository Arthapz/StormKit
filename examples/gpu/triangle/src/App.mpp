// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module App;

import std;

import stormkit.Core;
import stormkit.Gpu;
import stormkit.Wsi;

import Constants;

export class App: public stormkit::core::App {
  public:
    App();

    auto run(std::span<const std::string_view> args) -> stormkit::core::Int override;

  private:
    auto doInitWindow() -> void;
    auto doInitBaseRenderObjects() -> void;
    auto doInitMeshRenderObjects() -> void;
    auto doInitPerFrameObjects() -> void;

    std::unique_ptr<stormkit::wsi::Window> m_window;
    bool m_fullscreen_enabled = false;

    std::unique_ptr<stormkit::gpu::Instance> m_instance;
    std::unique_ptr<stormkit::gpu::Device> m_device;
    // std::unique_ptr<stormkit::gpu::Surface> m_surface;
    // const stormkit::gpu::Queue *m_queue = nullptr;
    // std::vector<stormkit::gpu::ImageView> m_surface_views;

    // std::unique_ptr<stormkit::gpu::Shader> m_vertex_shader;
    // std::unique_ptr<stormkit::gpu::Shader> m_fragment_shader;

    // std::unique_ptr<stormkit::gpu::RenderPass> m_render_pass;
    // std::unique_ptr<stormkit::gpu::RasterPipeline> m_pipeline;

    // struct Frame {
    // stormkit::gpu::FrameBuffer framebuffer;
    // stormkit::gpu::CommandBuffer commandbuffer;
    // };

    // std::vector<Frame> m_frame_datas;
};
