// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module App;

import std;

import stormkit.Core;
import stormkit.Engine;
import stormkit.Wsi;

import Constants;
import ShaderData;

export class App: public stormkit::core::App {
  public:
    App();

    auto run(std::span<const std::string_view> args) -> stormkit::core::Int override;

  private:
    auto doInitEngine() noexcept -> void;

    stormkit::core::DeferInit<stormkit::engine::Application> m_application;

    bool m_fullscreen_enabled = false;
};

module :private;

using namespace stormkit;

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

////////////////////////////////////////
////////////////////////////////////////
App::App() = default;

////////////////////////////////////////
////////////////////////////////////////
auto App::run([[maybe_unused]] std::span<const std::string_view> args) -> core::Int {
    doInitEngine();

    auto& window        = m_application->window();
    auto& event_handler = m_application->eventHandler();

    event_handler.setCallbacks(
        { { wsi::EventType::Closed,
            [&window]([[maybe_unused]] const wsi::Event& event) { window.close(); } },
          { wsi::EventType::KeyReleased, [this, &window](const wsi::Event& event) {
               const auto& event_data = core::as<wsi::KeyReleasedEventData>(event.data);

               if (event_data.key == wsi::Key::Escape) [[unlikely]]
                   window.close();

               if (event_data.key == wsi::Key::F11) {
                   window.setFullscreenEnabled(!m_fullscreen_enabled);
                   m_fullscreen_enabled = !m_fullscreen_enabled;
               }
           } } });

    m_application->update();

    return 0;
}

////////////////////////////////////////
////////////////////////////////////////
auto App::doInitEngine() noexcept -> void {
    m_application = engine::Application::create(APPLICATION_NAME, { 800u, 600u }, WINDOW_TITLE)
                        .transform_error(core::expects())
                        .value();
}
