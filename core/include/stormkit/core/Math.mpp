// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

/////////// - StormKit::core - ///////////
#include <stormkit/core/FormatMacro.hpp>

/////////// - GLM - ///////////
/// \exclude
#define GLM_FORCE_RADIANS

/// \exclude
#define GLM_FORCE_DEPTH_ZERO_TO_ONE

#include <glm/gtc/matrix_access.hpp>
#include <glm/gtc/matrix_integer.hpp>
#include <glm/gtc/quaternion.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/hash.hpp>
#include <glm/mat4x4.hpp>
#include <glm/vec2.hpp>
#include <glm/vec3.hpp>
#include <glm/vec4.hpp>

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.core.math;

/////////// - STL - ///////////
import <variant>;

/////////// - StormKit::core - ///////////
import stormkit.core.hash;
import stormkit.core.namedtype;
import stormkit.core.format;
import stormkit.core.numerics;

// clang-format on
export {
#else
    /////////// - STL - ///////////
    #include <variant>

    /////////// - StormKit::core - ///////////
    #include <stormkit/core/Format.mpp>
    #include <stormkit/core/Hash.mpp>
    #include <stormkit/core/NamedType.mpp>
    #include <stormkit/core/Numerics.mpp>
#endif

    namespace stormkit::core {
        using namespace glm;

        /// \exclude
        namespace details {
            struct Position2fTag;
            struct Position2uTag;
            struct Position2iTag;
            struct Position3fTag;
            struct Position3uTag;
            struct Position3iTag;

            struct MoveOffset2fTag;
            struct MoveOffset2uTag;
            struct MoveOffset2iTag;
            struct MoveExtentFOffsetTag;
            struct MoveExtentUOffsetTag;
            struct MoveOffsetTag;

            struct Scale2fTag;
            struct Scale2uTag;
            struct Scale2iTag;
            struct Scale3fTag;
            struct Scale3uTag;
            struct Scale3iTag;

            struct Orientation2fTag;
            struct Orientation2uTag;
            struct Orientation2iTag;
            struct Orientation3fTag;
            struct Orientation3uTag;
            struct Orientation3iTag;

            struct Rotation2fTag;
            struct Rotation2uTag;
            struct Rotation2iTag;
            struct Rotation3fTag;
            struct Rotation3uTag;
            struct Rotation3iTag;

            template<class T>
            struct ExtentOffsetTag;

        } // namespace details

        template<class T>
        struct VectorLike: Addable<T>,
                           Subtractable<T>,
                           Multiplicable<T>,
                           Divisible<T>,
                           Modulable<T>,
                           Comparable<T>,
                           MethodCallable<T>,
                           Dereferencable<T> {};

        /// \group vector-types Math vector types.
        ///
        /// Aliases to `glm::vec*` types.
        ///
        /// \unique_name Vector2<T>
        template<class T>
        using Vector2 = glm::vec<2, T, glm::defaultp>;

        /// \group vector-types
        /// \unique_name Vector3<T>
        template<class T>
        using Vector3 = glm::vec<3, T, glm::defaultp>;

        /// \group vector-types
        /// \unique_name Vector4<T>
        template<class T>
        using Vector4 = glm::vec<4, T, glm::defaultp>;

        /// \group vector-types
        /// \unique_name Vector2f
        using Vector2f = glm::vec2;

        /// \group vector-types
        /// \unique_name Vector3f
        using Vector3f = glm::vec3;

        /// \group vector-types
        /// \unique_name Vector4f
        using Vector4f = glm::vec4;

        /// \group vector-types
        /// \unique_name Vector2u
        using Vector2u = glm::uvec2;

        /// \group vector-types
        /// \unique_name Vector3u
        using Vector3u = glm::uvec3;

        /// \group vector-types
        /// \unique_name Vector4u
        using Vector4u = glm::uvec4;

        /// \group vector-types
        /// \unique_name Vector2i
        using Vector2i = glm::ivec2;

        /// \group vector-types
        /// \unique_name Vector3i
        using Vector3i = glm::ivec3;

        /// \group vector-types
        /// \unique_name Vector4i
        using Vector4i = glm::ivec4;

        /// \group matrices-types Math matrices types.
        ///
        /// Aliases to `glm::mat*`.
        ///
        /// \unique_name Matrix<T>
        template<class T>
        using MatrixBase = glm::mat<4, 4, T, glm::defaultp>;

        /// \group matrices-types
        /// \unique_name Matrixu
        using Matrixu = glm::umat4x4;

        /// \group matrices-types
        /// \unique_name Matrixi
        using Matrixi = glm::imat4x4;

        /// \group matrices-types
        /// \unique_name Matrixf
        using Matrixf = glm::mat4;
        using Matrix  = glm::mat4;

        /// \brief Quaternion.
        ///
        /// Alias to `glm::quat`.
        ///
        /// \unique_name Quaternion
        using Quaternion = glm::quat;

        /// \group position-types Position types
        ///
        /// Strongly typed vector type that represent a position.
        ///
        /// \unique_name Position2f
        using Position2f = core::NamedType<Vector2f, details::Position2fTag, VectorLike>;

        /// \group position-types
        /// \unique_name Position2u
        using Position2u = core::NamedType<Vector2u, details::Position2uTag, VectorLike>;

        /// \group position-types
        /// \unique_name Position2i
        using Position2i = core::NamedType<Vector2i, details::Position2iTag, VectorLike>;

        /// \group position-types
        /// \unique_name Position3f
        using Position3f = core::NamedType<Vector3f, details::Position3fTag, VectorLike>;

        /// \group position-types
        /// \unique_name Position3u
        using Position3u = core::NamedType<Vector3u, details::Position3uTag, VectorLike>;

        /// \group position-types
        /// \unique_name Position3i
        using Position3i = core::NamedType<Vector3i, details::Position3iTag, VectorLike>;

        /// \group move-offset-types Move offset types
        ///
        /// Strongly typed vector type that represent a move offset.
        ///
        /// \unique_name MoveOffset2f
        using MoveOffset2f = core::NamedType<Vector2f, details::MoveOffset2fTag, VectorLike>;

        /// \group move-offset-types
        /// \unique_name MoveOffset2u
        using MoveOffset2u = core::NamedType<Vector2u, details::MoveOffset2uTag, VectorLike>;

        /// \group move-offset-types
        /// \unique_name MoveOffset2i
        using MoveOffset2i = core::NamedType<Vector2i, details::MoveOffset2iTag, VectorLike>;

        /// \group move-offset-types
        /// \unique_name MoveExtentFOffset
        using MoveExtentFOffset =
            core::NamedType<Vector3f, details::MoveExtentFOffsetTag, VectorLike>;

        /// \group move-offset-types
        /// \unique_name MoveExtentUOffset
        using MoveExtentUOffset =
            core::NamedType<Vector3u, details::MoveExtentUOffsetTag, VectorLike>;

        /// \group move-offset-types
        /// \unique_name MoveOffset
        using MoveOffset = core::NamedType<Vector3i, details::MoveOffsetTag, VectorLike>;

        /// \group scale-types Scale types
        ///
        /// Strongly typed vector type that represent a scale.
        ///
        /// \unique_name Scale2f
        using Scale2f = core::NamedType<Vector2f, details::Scale2fTag, VectorLike>;

        /// \group scale-types
        /// \unique_name Scale2u
        using Scale2u = core::NamedType<Vector2u, details::Scale2uTag, VectorLike>;

        /// \group scale-types
        /// \unique_name Scale2i
        using Scale2i = core::NamedType<Vector2i, details::Scale2iTag, VectorLike>;

        /// \group scale-types
        /// \unique_name Scale3f
        using Scale3f = core::NamedType<Vector3f, details::Scale3fTag, VectorLike>;

        /// \group scale-types
        /// \unique_name Scale3u
        using Scale3u = core::NamedType<Vector3u, details::Scale3uTag, VectorLike>;

        /// \group scale-types
        /// \unique_name Scale3i
        using Scale3i = core::NamedType<Vector3i, details::Scale3iTag, VectorLike>;

        /// \group orientation-types Orientation types
        ///
        /// Strongly typed vector type that represent an orientation.
        ///
        /// \unique_name Orientation2f
        using Orientation2f = core::NamedType<Vector2f, details::Orientation2fTag, VectorLike>;

        /// \group orientation-types
        /// \unique_name Orientation2u
        using Orientation2u = core::NamedType<Vector2u, details::Orientation2uTag, VectorLike>;

        /// \group orientation-types
        /// \unique_name Orientation2i
        using Orientation2i = core::NamedType<Vector2i, details::Orientation2iTag, VectorLike>;

        /// \group orientation-types
        /// \unique_name Orientation3f
        using Orientation3f = core::NamedType<Vector3f, details::Orientation3fTag, VectorLike>;

        /// \group orientation-types
        /// \unique_name Orientation3u
        using Orientation3u = core::NamedType<Vector3u, details::Orientation3uTag, VectorLike>;

        /// \group orientation-types
        /// \unique_name Orientation3i
        using Orientation3i = core::NamedType<Vector3i, details::Orientation3iTag, VectorLike>;

        /// \group rotation-types Rotation types
        ///
        /// Strongly typed vector type that represent a rotation.
        ///
        /// \unique_name Rotation2f
        using Rotation2f = core::NamedType<Vector2f, details::Rotation2fTag, VectorLike>;

        /// \group rotation-types
        /// \unique_name Rotation2u
        using Rotation2u = core::NamedType<Vector2u, details::Rotation2uTag, VectorLike>;

        /// \group rotation-types
        /// \unique_name Rotation2i
        using Rotation2i = core::NamedType<Vector2i, details::Rotation2iTag, VectorLike>;

        /// \group rotation-types
        /// \unique_name Rotation3f
        using Rotation3f = core::NamedType<Vector3f, details::Rotation3fTag, VectorLike>;

        /// \group rotation-types
        /// \unique_name Rotation3u
        using Rotation3u = core::NamedType<Vector3u, details::Rotation3uTag, VectorLike>;

        /// \group rotation-types
        /// \unique_name Rotation3i
        using Rotation3i = core::NamedType<Vector3i, details::Rotation3iTag, VectorLike>;

        /// \brief Representation of an extent.
        /// \requires `T` need to be an arithmetic type (satisfy std::is_floating_point or
        /// std::is_integral).
        /// \unique_name ExtentBase<T>
        template<ArithmeticType T>
        struct STORMKIT_PUBLIC Extent {
            using UnderlyingType = T;

            using OrderingType = std::conditional_t<std::is_floating_point_v<T>,
                                                    std::weak_ordering,
                                                    std::strong_ordering>;

            /// \output_section Public Special Member Functions
            /// \brief Default construct an extent.
            ///
            /// `width` `height` and `depth` are default constructed to 1.
            constexpr Extent() noexcept = default;

            /// \brief Construct an extent from width, height and optionnaly depth
            /// \param red The amound of width.
            /// \param green The amound of height.
            constexpr Extent(UnderlyingType width,
                             UnderlyingType height,
                             UnderlyingType depth = UnderlyingType { 1 }) noexcept;

            /// \brief Copy constructor.
            ///
            /// Construct a copy of other.
            ///
            /// \param other UnderlyingType copied extent.
            constexpr Extent(const Extent<UnderlyingType> &other) noexcept = default;

            /// \brief Move constructor.
            ///
            /// Move-constructs a `Extent` instance, making it point at the same object that other
            /// was pointing to.
            ///
            /// \param other UnderlyingType moved extent.
            constexpr Extent(Extent<UnderlyingType> &&other) noexcept = default;

            /// \brief Assigns other to this extent and returns a reference to this extent.
            /// \param other UnderlyingType extent copied.
            /// \returns UnderlyingType reference of the copied extent.
            constexpr auto operator         =(const Extent<UnderlyingType> &other) noexcept
                -> Extent<UnderlyingType> & = default;

            /// \brief Move assign other to this Extent instance.
            /// \param other UnderlyingType extent moved.
            /// \returns UnderlyingType reference of the moved extent.
            constexpr auto operator         =(Extent<UnderlyingType> &&other) noexcept
                -> Extent<UnderlyingType> & = default;

            /// \brief Construct a extent from the convertion of an other extent.
            ///
            /// Values are converted with static_cast.
            ///
            /// \param other UnderlyingType extent converted.
            /// \requires `U` need to be an arithmetic type (satisfy std::is_floating_point or
            /// std::is_integral).
            template<ArithmeticType U>
            constexpr Extent(const Extent<U> &other) noexcept;

            /// \output_section Publics operators members
            /// \brief UnderlyingType the equality with an other extent.
            /// \param other UnderlyingType extent to test
            /// \returns true if this extent is equal to `other`, otherwise returns false.
            [[nodiscard]] constexpr auto
                operator<=>(const Extent<UnderlyingType> &other) const noexcept -> OrderingType;

            /// \brief UnderlyingType the equality with an other extent.
            /// \param other UnderlyingType extent to test
            /// \returns true if this extent is equal to `other`, otherwise returns false.
            [[nodiscard]] constexpr auto
                operator==(const Extent<UnderlyingType> &other) const noexcept -> bool;

            /// \brief Multiply an extent with a factor.
            /// \param factor UnderlyingType factor to multiply
            /// \returns A newly constructed extent equal to this extent multiplied with `factor`
            [[nodiscard]] constexpr auto operator*(UnderlyingType factor) const noexcept
                -> Extent<UnderlyingType>;

            /// \brief Divide an extent with a factor.
            /// \param factor UnderlyingType factor to divide
            /// \returns A newly constructed extent equal to this extent Divided with `factor`
            [[nodiscard]] constexpr auto operator/(UnderlyingType factor) const noexcept
                -> Extent<UnderlyingType>;

            /// \brief Multiply this extent with a factor.
            /// \param factor UnderlyingType factor to multiply
            /// \returns A reference to this after the multiplication with `factor`
            [[nodiscard]] constexpr auto operator*=(UnderlyingType factor) noexcept
                -> Extent<UnderlyingType> &;

            /// \brief Divide this extent with a factor.
            /// \param factor UnderlyingType factor to divide
            /// \returns A reference to this after the division with `factor`
            [[nodiscard]] constexpr auto operator/=(UnderlyingType factor) noexcept
                -> Extent<UnderlyingType> &;

            /// \output_section Publics member
            /// \brief Width attribute.
            UnderlyingType width = 0;

            /// \brief Height attribute.
            UnderlyingType height = 0;

            /// \brief Depth attribute.
            UnderlyingType depth = 1;
        };

        /// \brief Alias of `Extent<Int32>`.
        /// \unique_name ExtentI
        using ExtentI = Extent<Int32>;

        /// \brief Alias of `Extent<UInt32>`.
        /// \unique_name ExtentU
        using ExtentU = Extent<UInt32>;

        /// \brief Alias of `Extent<Int16>`.
        /// \unique_name ExtentI
        using ExtentI16 = Extent<Int16>;

        /// \brief Alias of `Extent<UInt16>`.
        /// \unique_name ExtentU
        using ExtentU16 = Extent<UInt16>;

        /// \brief Alias of `Extent<float>`.
        /// \unique_name ExtentF
        using ExtentF = Extent<float>;

        /// \group offset-types Offset types
        ///
        /// Strongly typed extent type that represent an Extent offset.
        ///
        /// \unique_name Offset
        template<class T>
        using ExtentOffset = core::NamedType<Extent<T>, details::ExtentOffsetTag<T>>;

        /// \group offset-types
        /// \unique_name Offseti
        using ExtentIOffset = ExtentOffset<core::Int32>;

        /// \group offset-types
        /// \unique_name Offseti
        using ExtentUOffset = ExtentOffset<core::UInt32>;

        /// \group offset-types
        /// \unique_name Offseti
        using ExtentFOffset = ExtentOffset<float>;

        FORMATTER(stormkit::core::Vector2f, "Vector2 {{ .x = {}, .y = {} }}", data.x, data.y)
        FORMATTER(stormkit::core::Position2f, "Position2 {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::MoveOffset2f,
                  "MoveOffset2 {{ .x = {}, .y = {} }}",
                  data->x,
                  data->y)
        FORMATTER(stormkit::core::Scale2f, "Scale2 {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::Orientation2f,
                  "Orientation2 {{ .x = {}, .y = {} }}",
                  data->x,
                  data->y)
        FORMATTER(stormkit::core::Rotation2f, "Rotation2 {{ .x = {}, .y = {} }}", data->x, data->y)

        FORMATTER(stormkit::core::Vector3f,
                  "Vector3 {{ .x = {}, .y = {}, .z = {} }}",
                  data.x,
                  data.y,
                  data.z)
        FORMATTER(stormkit::core::Position3f,
                  "Position3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::MoveExtentFOffset,
                  "MoveOffset3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Scale3f,
                  "Scale3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Orientation3f,
                  "Orientation3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Rotation3f,
                  "Rotation3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)

        FORMATTER(stormkit::core::Vector4f,
                  "Vector4 {{ .x = {}, .y = {}, .z = {}, .w = {} }}",
                  data.x,
                  data.y,
                  data.z,
                  data.w)

        FORMATTER(stormkit::core::Vector2u, "Vector2u {{ .x = {}, .y = {} }}", data.x, data.y)
        FORMATTER(stormkit::core::Position2u, "Position2u {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::MoveOffset2u,
                  "MoveInt322 {{ .x = {}, .y = {} }}",
                  data->x,
                  data->y)
        FORMATTER(stormkit::core::Scale2u, "Scale2 {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::Orientation2u,
                  "Orientation2 {{ .x = {}, .y = {} }}",
                  data->x,
                  data->y)
        FORMATTER(stormkit::core::Rotation2u, "Rotation2 {{ .x = {}, .y = {} }}", data->x, data->y)

        FORMATTER(stormkit::core::Vector3u,
                  "Vector3u {{ .x = {}, .y = {}, .z = {} }}",
                  data.x,
                  data.y,
                  data.z)
        FORMATTER(stormkit::core::Position3u, "Position3u {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::MoveExtentUOffset,
                  "MoveInt323 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Scale3u,
                  "Scale3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Orientation3u,
                  "Orientation3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Rotation3u,
                  "Rotation3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)

        FORMATTER(stormkit::core::Vector4u,
                  "Vector4u {{ .x = {}, .y = {}, .z = {}, .w = {} }}",
                  data.x,
                  data.y,
                  data.z,
                  data.w)

        FORMATTER(stormkit::core::Vector2i, "Vector2i {{ .x = {}, .y = {} }}", data.x, data.y)
        FORMATTER(stormkit::core::Position2i, "Position2i {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::MoveOffset2i,
                  "MoveOffset2 {{ .x = {}, .y = {} }}",
                  data->x,
                  data->y)
        FORMATTER(stormkit::core::Scale2i, "Scale2 {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::Orientation2i,
                  "Orientation2 {{ .x = {}, .y = {} }}",
                  data->x,
                  data->y)
        FORMATTER(stormkit::core::Rotation2i, "Rotation2 {{ .x = {}, .y = {} }}", data->x, data->y)

        FORMATTER(stormkit::core::Vector3i,
                  "Vector3i {{ .x = {}, .y = {}, .z = {} }}",
                  data.x,
                  data.y,
                  data.z)
        FORMATTER(stormkit::core::Position3i, "Position3i {{ .x = {}, .y = {} }}", data->x, data->y)
        FORMATTER(stormkit::core::MoveOffset,
                  "MoveOffset3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Scale3i,
                  "Scale3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Orientation3i,
                  "Orientation3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)
        FORMATTER(stormkit::core::Rotation3i,
                  "Rotation3 {{ .x = {}, .y = {}, .z = {} }}",
                  data->x,
                  data->y,
                  data->z)

        FORMATTER(stormkit::core::Vector4i,
                  "Vector4i {{ .x = {}, .y = {}, .z = {}, .w = {} }}",
                  data.x,
                  data.y,
                  data.z,
                  data.w)

        FORMATTER(stormkit::core::ExtentI,
                  "ExtentI {{ .width = {}, .height = {}, .depth = {} }}",
                  data.width,
                  data.height,
                  data.depth)
        FORMATTER(stormkit::core::ExtentU,
                  "ExtentU {{ .width = {}, .height = {}, .depth = {} }}",
                  data.width,
                  data.height,
                  data.depth)
        FORMATTER(stormkit::core::ExtentI16,
                  "ExtentI16 {{ .width = {}, .height = {}, .depth = {} }}",
                  data.width,
                  data.height,
                  data.depth)
        FORMATTER(stormkit::core::ExtentU16,
                  "ExtentU16 {{ .width = {}, .height = {}, .depth = {} }}",
                  data.width,
                  data.height,
                  data.depth)
        FORMATTER(stormkit::core::ExtentF,
                  "ExtentF {{ .width = {}, .height = {}. depth = {} }}",
                  data.width,
                  data.height,
                  data.depth)
    } // namespace stormkit::core

    template<stormkit::core::ArithmeticType T>
    struct std::hash<stormkit::core::Extent<T>> {
        [[nodiscard]] constexpr stormkit::core::Hash64
            operator()(const stormkit::core::Extent<T> &extent) const noexcept;
    };

    CUSTOM_FORMAT(stormkit::core::Vector2f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Position2f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::MoveOffset2f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Scale2f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Orientation2f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Rotation2f, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector3f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Position3f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::MoveExtentFOffset, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Scale3f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Orientation3f, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Rotation3f, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector4f, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector2u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Position2u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::MoveOffset2u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Scale2u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Orientation2u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Rotation2u, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector3u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Position3u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::MoveExtentUOffset, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Scale3u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Orientation3u, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Rotation3u, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector4u, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector2i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Position2i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::MoveOffset2i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Scale2i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Orientation2i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Rotation2i, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector3i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Position3i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::MoveOffset, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Scale3i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Orientation3i, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::Rotation3i, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::Vector4i, stormkit::core::toString(data))

    namespace stormkit::core {
        FORMATTER(stormkit::core::Matrix,
                  "Matrix {{\n    {},\n    {},\n    {},\n    {}\n}}",
                  data[0],
                  data[1],
                  data[2],
                  data[3])
    }

    CUSTOM_FORMAT(stormkit::core::Matrix, stormkit::core::toString(data))

    CUSTOM_FORMAT(stormkit::core::ExtentI, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::ExtentU, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::ExtentI16, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::ExtentU16, stormkit::core::toString(data))
    CUSTOM_FORMAT(stormkit::core::ExtentF, stormkit::core::toString(data))

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "Math.inl"
