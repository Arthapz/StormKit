// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.core.concepts;

/////////// - STL - ///////////
import <concepts>;
import <functional>;
import <variant>;

export {
// clang-format on
#else
    /////////// - STL - ///////////
    #include <concepts>
    #include <cstddef>
    #include <cstdint>
    #include <functional>
    #include <variant>
#endif

    namespace stormkit::core {
        template<class T>
        concept ColorComponentType = std::same_as<T, float> || std::same_as<T, std::uint8_t>;

        template<class T>
        concept ByteType = std::same_as<T, std::byte>;

        template<class T>
        concept NonByteType = !ByteType<T>;

        template<class T>
        concept EnumerationType = std::is_enum_v<T> && !std::same_as<T, std::byte>;

        template<class T>
        concept HashableType = requires(T &a) {
            { std::hash<T> {}(a) } -> std::convertible_to<std::size_t>;
        };

        template<class T>
        concept ArithmeticType = std::integral<T> || std::floating_point<T>;

        template<class T>
        concept SmartPointerType = requires(T &a) {
            a.operator->();
            a.operator*();
            a.get();
        };

        template<class T>
        concept RawPointerType = std::is_pointer_v<T>;

        template<class T>
        concept PointerType = RawPointerType<T> || SmartPointerType<T>;

        template<class T>
        concept NonPointerType = !PointerType<T>;

        template<class T>
        concept PreIncrementableType = requires(T &a) {
            a.operator--();
        };

        template<class T, class U>
        concept Is = std::same_as<std::remove_cvref_t<T>, std::remove_cvref_t<U>>;

        template<class T, class U>
        concept IsNot = !Is<T, U>;

        template<class T>
        concept StringLikeType = std::convertible_to<T, std::string_view>;

        template<class T>
        concept ReferenceType = std::is_lvalue_reference_v<T>;
    } // namespace stormkit::core

#if defined(STORMKIT_CXX20_MODULES)
}
#endif
