// Copyright (C) 2022 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#pragma once

#if defined(STORMKIT_CXX20_MODULES)
// clang-format off
export module stormkit.core.singleton;

/////////// - STL - ///////////
import <functional>;
import <memory>;
import <mutex>;
import <utility>;

// clang-format on
export {
#else
    /////////// - STL - ///////////
    #include <functional>
    #include <memory>
    #include <mutex>
    #include <utility>
#endif

    namespace stormkit::core {
        template<class T>
        class Singleton {
          public:
            template<class... Args>
            static auto instance(Args &&...args) -> T &;

            Singleton(Singleton &&)      = delete;
            Singleton(const Singleton &) = delete;

            auto operator=(Singleton &&) -> Singleton & = delete;
            auto operator=(const Singleton &) -> Singleton & = delete;

          protected:
            Singleton() noexcept  = default;
            ~Singleton() noexcept = default;

          private:
            static auto onceFlag() -> std::once_flag &;

            static inline std::unique_ptr<T> m_instance = nullptr;
        };
    } // namespace stormkit::core

#if defined(STORMKIT_CXX20_MODULES)
}
#endif

#include "Singleton.inl"
