// Copyright (C) 2024 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution
module;

#include <stormkit/Core/PlatformMacro.hpp>

export module stormkit.Engine:Systems.RenderSystem;

import std;

import stormkit.Core;
import stormkit.Entities;

import :Renderer;

namespace stormkit::engine {
    class RenderSystem final: public entities::System {
      public:
        RenderSystem(Renderer& renderer, entities::EntityManager& manager);
        ~RenderSystem() final;

        RenderSystem(const RenderSystem&)                    = delete;
        auto operator=(const RenderSystem&) -> RenderSystem& = delete;

        RenderSystem(RenderSystem&&) noexcept;
        auto operator=(RenderSystem&&) noexcept -> RenderSystem&;

        auto update(Secondf delta) -> void override;

      private:
        auto onMessageReceived(const entities::Message& message) -> void override;

        NakedRef<Renderer> m_renderer;
    };
} // namespace stormkit::engine

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::engine {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE RenderSystem::RenderSystem(Renderer& renderer, entities::EntityManager& manager)
        : System { manager, 0, {} }, m_renderer { renderer } {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE RenderSystem::~RenderSystem() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE RenderSystem::RenderSystem(RenderSystem&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto RenderSystem::operator=(RenderSystem&&) noexcept
        -> RenderSystem& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto RenderSystem::update(Secondf delta) -> void {
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_INLINE auto RenderSystem::onMessageReceived(const entities::Message& message) -> void {
    }
} // namespace stormkit::engine
