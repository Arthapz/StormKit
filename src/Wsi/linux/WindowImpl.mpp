// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module stormkit.Wsi:Linux.WindowImpl;

import std;

import stormkit.Core;

import :Window;
import :Types;

import :Common.WindowImplBase;
import :Linux.X11.WindowImpl;
import :Linux.Wayland.WindowImpl;

export namespace stormkit::wsi::linux {
    class WindowImpl: public ::stormkit::wsi::common::WindowImplBase {
      public:
        explicit WindowImpl(WM wm);
        WindowImpl(WM wm, std::string title, const core::math::ExtentU& size, WindowStyle style);
        ~WindowImpl();

        WindowImpl(const WindowImpl&) noexcept                    = delete;
        auto operator=(const WindowImpl&) noexcept -> WindowImpl& = delete;

        WindowImpl(WindowImpl&&) noexcept;
        auto operator=(WindowImpl&&) noexcept -> WindowImpl&;

        auto create(std::string title, const core::math::ExtentU& size, WindowStyle style) -> void;
        auto close() noexcept -> void;

        [[nodiscard]] auto pollEvent(Event& event) noexcept -> bool;
        [[nodiscard]] auto waitEvent(Event& event) noexcept -> bool;

        auto setTitle(std::string title) noexcept -> void;
        auto setExtent(const core::math::ExtentU& size) noexcept -> void;
        auto setFullscreenEnabled(bool enabled) noexcept -> void;

        auto lockMouse() noexcept -> void;
        auto unlockMouse() noexcept -> void;

        auto hideMouse() noexcept -> void;
        auto unhideMouse() noexcept -> void;

        [[nodiscard]] auto extent() const noexcept -> const core::math::ExtentU&;
        [[nodiscard]] auto title() const noexcept -> const std::string&;

        [[nodiscard]] auto isOpen() const noexcept -> bool;
        [[nodiscard]] auto visible() const noexcept -> bool;

        [[nodiscard]] auto nativeHandle() const noexcept -> NativeHandle;

        [[nodiscard]] auto mouseLocked() const noexcept -> bool;
        [[nodiscard]] auto mouseHidden() const noexcept -> bool;
        [[nodiscard]] auto fullscreen() const noexcept -> bool;

        auto setKeyRepeatEnabled(bool enabled) noexcept -> void;
        [[nodiscard]] auto keyRepeatEnabled() const noexcept -> bool;

        auto setVirtualKeyboardVisible(bool visible) noexcept -> void;

        auto setMousePosition(const core::math::Vector2I& position) noexcept -> void;
        static auto setMousePositionOnDesktop(WM wm, const core::math::Vector2U& position) noexcept
            -> void;

        [[nodiscard]] static auto getMonitorSettings(WM wm) -> std::vector<Monitor>;

      private:
        struct Sentinelle {};

        using BackendWindowImpl = std::variant<x11::WindowImpl, wayland::WindowImpl>;

        WM m_wm;

        core::DeferInit<BackendWindowImpl> m_impl;
    };
} // namespace stormkit::wsi::linux

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

#define CASE_DO(case_, namespace_, work) \
    case case_: core::as<namespace_::WindowImpl>(m_impl.get()).work; break
#define CASE_DO_RETURN(case_, namespace_, work) \
    case case_: return core::as<namespace_::WindowImpl>(m_impl.get()).work

namespace stormkit::wsi::linux {
    /////////////////////////////////////
    /////////////////////////////////////
    inline WindowImpl::WindowImpl(WM wm) : m_wm { wm } {
        if (m_wm == WM::X11) m_impl = x11::WindowImpl {};
        else if (m_wm == WM::Wayland)
            m_impl = wayland::WindowImpl {};
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline WindowImpl::~WindowImpl() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline WindowImpl::WindowImpl(WM wm,
                                  std::string title,
                                  const core::math::ExtentU& extent,
                                  WindowStyle style)
        : m_wm { wm } {
        if (m_wm == WM::X11) m_impl = x11::WindowImpl { std::move(title), extent, style };
        else if (m_wm == WM::Wayland)
            m_impl = wayland::WindowImpl { title, extent, style };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline WindowImpl::WindowImpl(WindowImpl&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::operator=(WindowImpl&&) noexcept -> WindowImpl& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::create(std::string title,
                                   const core::math::ExtentU& extent,
                                   WindowStyle style) -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, create(std::move(title), extent, style));
            CASE_DO(WM::Wayland, wayland, create(std::move(title), extent, style));

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::close() noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, close());
            CASE_DO(WM::Wayland, wayland, close());

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::pollEvent(Event& event) noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, pollEvent(event));
            CASE_DO_RETURN(WM::Wayland, wayland, pollEvent(event));

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::waitEvent(Event& event) noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, waitEvent(event));
            CASE_DO_RETURN(WM::Wayland, wayland, waitEvent(event));

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::setTitle(std::string title) noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, setTitle(std::move(title)));
            CASE_DO(WM::Wayland, wayland, setTitle(std::move(title)));

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::setExtent(const core::math::ExtentU& extent) noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, setExtent(extent));
            CASE_DO(WM::Wayland, wayland, setExtent(extent));

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::setFullscreenEnabled(bool enabled) noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, setFullscreenEnabled(enabled));
            CASE_DO(WM::Wayland, wayland, setFullscreenEnabled(enabled));

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::lockMouse() noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, lockMouse());
            CASE_DO(WM::Wayland, wayland, lockMouse());

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::unlockMouse() noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, unlockMouse());
            CASE_DO(WM::Wayland, wayland, unlockMouse());

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::hideMouse() noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, hideMouse());
            CASE_DO(WM::Wayland, wayland, hideMouse());

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::unhideMouse() noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, unhideMouse());
            CASE_DO(WM::Wayland, wayland, unhideMouse());

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::extent() const noexcept -> const stormkit::core::math::ExtentU& {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, extent());
            CASE_DO_RETURN(WM::Wayland, wayland, extent());

            default: break;
        }

        constinit static const auto empty = core::math::ExtentU {};
        return empty;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::title() const noexcept -> const std::string& {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, title());
            CASE_DO_RETURN(WM::Wayland, wayland, title());

            default: break;
        }

        static const auto empty = std::string {};
        return empty;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::isOpen() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, isOpen());
            CASE_DO_RETURN(WM::Wayland, wayland, isOpen());

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::visible() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, visible());
            CASE_DO_RETURN(WM::Wayland, wayland, visible());

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::nativeHandle() const noexcept -> NativeHandle {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, nativeHandle());
            CASE_DO_RETURN(WM::Wayland, wayland, nativeHandle());

            default: break;
        }

        return nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::mouseLocked() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, mouseLocked());
            CASE_DO_RETURN(WM::Wayland, wayland, mouseLocked());

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::mouseHidden() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, mouseHidden());
            CASE_DO_RETURN(WM::Wayland, wayland, mouseHidden());

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::fullscreen() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, fullscreen());
            CASE_DO_RETURN(WM::Wayland, wayland, fullscreen());

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::setKeyRepeatEnabled(bool enabled) noexcept -> void {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, setKeyRepeatEnabled(enabled));
            CASE_DO_RETURN(WM::Wayland, wayland, setKeyRepeatEnabled(enabled));

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::keyRepeatEnabled() const noexcept -> bool {
        switch (m_wm) {
            CASE_DO_RETURN(WM::X11, x11, keyRepeatEnabled());
            CASE_DO_RETURN(WM::Wayland, wayland, keyRepeatEnabled());

            default: break;
        }

        return false;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::setVirtualKeyboardVisible(bool visible) noexcept -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, setVirtualKeyboardVisible(visible));
            CASE_DO(WM::Wayland, wayland, setVirtualKeyboardVisible(visible));

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::setMousePosition(const core::math::Vector2I& position) noexcept
        -> void {
        switch (m_wm) {
            CASE_DO(WM::X11, x11, setMousePosition(position));
            CASE_DO(WM::Wayland, wayland, setMousePosition(position));

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::setMousePositionOnDesktop(WM wm,
                                                      const core::math::Vector2U& position) noexcept
        -> void {
        switch (wm) {
            case WM::X11: x11::WindowImpl::setMousePositionOnDesktop(position); break;
            case WM::Wayland: wayland::WindowImpl::setMousePositionOnDesktop(position); break;

            default: break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    inline auto WindowImpl::getMonitorSettings(WM wm) -> std::vector<Monitor> {
        switch (wm) {
            case WM::X11: return x11::WindowImpl::getMonitorSettings(); break;
            case WM::Wayland: return wayland::WindowImpl::getMonitorSettings(); break;
            default: break;
        }

        return {};
    }
} // namespace stormkit::wsi::linux

#undef CASE_DO
#undef CASE_DO_RETURN
