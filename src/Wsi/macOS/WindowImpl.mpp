// Copyright (C) 2023 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include "macOSWindow.hpp"

export module stormkit.Wsi:MacOS.WindowImpl;

import std;

import stormkit.Core;

import <stormkit/Core/PlatformMacro.hpp>;

import :Types;

import :Common.WindowImplBase;

export namespace stormkit::wsi::macos {
    class WindowImpl: public ::stormkit::wsi::common::WindowImplBase {
      public:
         WindowImpl(WM wm) noexcept;
         WindowImpl(WM wm, std::string title, const core::math::ExtentU& size, WindowStyle style);
        ~WindowImpl();

             WindowImpl(const WindowImpl&) noexcept               = delete;
        auto operator=(const WindowImpl&) noexcept -> WindowImpl& = delete;

             WindowImpl(WindowImpl&&) noexcept;
        auto operator=(WindowImpl&&) noexcept -> WindowImpl&;

        auto create(std::string title, const core::math::ExtentU& size, WindowStyle style) -> void;
        auto close() noexcept -> void;

        [[nodiscard]] auto pollEvent(Event& event) noexcept -> bool;
        [[nodiscard]] auto waitEvent(Event& event) noexcept -> bool;

        auto setTitle(std::string title) noexcept -> void;

        auto setExtent(const core::math::ExtentU& extent) noexcept -> void;

        auto setFullscreenEnabled(bool enabled) noexcept -> void;

        auto lockMouse() noexcept -> void;
        auto unlockMouse() noexcept -> void;

        auto hideMouse() noexcept -> void;
        auto unhideMouse() noexcept -> void;

        [[nodiscard]] auto extent() const noexcept -> core::math::ExtentU;
        [[nodiscard]] auto title() const noexcept -> const std::string&;

        [[nodiscard]] auto isOpen() const noexcept -> bool;
        [[nodiscard]] auto visible() const noexcept -> bool;

        [[nodiscard]] auto nativeHandle() const noexcept -> NativeHandle;

        [[nodiscard]] auto mouseLocked() const noexcept -> bool;
        [[nodiscard]] auto mouseHided() const noexcept -> bool;
        [[nodiscard]] auto fullscreen() const noexcept -> bool;

        auto               setKeyRepeatEnabled(bool enabled) noexcept -> void;
        [[nodiscard]] auto keyRepeatEnabled() const noexcept -> bool;

        auto setVirtualKeyboardVisible(bool visible) noexcept -> void;

        auto        setMousePosition(const core::math::Vector2I& position) noexcept -> void;
        static auto setMousePositionOnDesktop(WM wm, const core::math::Vector2U& position) noexcept
            -> void;

        [[nodiscard]] static auto getMonitorSettings(WM wm) -> std::vector<Monitor>;

      private:
        std::unique_ptr<macOSWindow> m_window;
    };
} // namespace stormkit::wsi::macos

////////////////////////////////////////////////////////////////////
///                      IMPLEMENTATION                          ///
////////////////////////////////////////////////////////////////////

namespace stormkit::wsi::macos {
    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE WindowImpl::WindowImpl([[maybe_unused]] WM wm) noexcept {};

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE WindowImpl::WindowImpl(WM                         wm,
                                                 std::string                title,
                                                 const core::math::ExtentU& size,
                                                 WindowStyle                style)
        : WindowImpl { wm } {
        create(std::move(title), size, style);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE WindowImpl::~WindowImpl() = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE WindowImpl::WindowImpl(WindowImpl&&) noexcept = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::operator=(WindowImpl&&) noexcept
        -> WindowImpl& = default;

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::create(std::string                title,
                                                  const core::math::ExtentU& size,
                                                  WindowStyle                style) -> void {
        m_window = std::make_unique<macOSWindow>(std::move(title),
                                                 size.width,
                                                 size.height,
                                                 core::narrow<int>(core::as<core::Underlying>(style)));

        m_window->mouseDownEvent = [this](int button, core::Int32 x, core::Int32 y) noexcept {
            WindowImplBase::mouseDownEvent(core::as<MouseButton>(core::narrow<core::UInt8>(button)), x, y);
        };
        m_window->mouseUpEvent = [this](int button, core::Int32 x, core::Int32 y) noexcept {
            WindowImplBase::mouseUpEvent(core::as<MouseButton>(core::narrow<core::UInt8>(button)), x, y);
        };
        m_window->mouseMoveEvent = [this](core::Int32 x, core::Int32 y) noexcept {
            WindowImplBase::mouseMoveEvent(x, y);
        };
        m_window->mouseEnteredEvent = [this]() noexcept {
            WindowImplBase::mouseEnteredEvent();
        };
        m_window->mouseExitedEvent = [this]() noexcept {
            WindowImplBase::mouseExitedEvent();
        };
        m_window->keyDownEvent = [this](int key, char c) noexcept {
            WindowImplBase::keyDownEvent(core::as<Key>(core::narrow<core::UInt8>(key)), c);
        };
        m_window->keyUpEvent = [this](int key, char c) noexcept {
            WindowImplBase::keyUpEvent(core::as<Key>(core::narrow<core::UInt8>(key)), c);
        };
        m_window->closeEvent = [this]() noexcept {
            WindowImplBase::closeEvent();
        };
        m_window->resizeEvent = [this](core::UInt32 width, core::UInt32 height) noexcept {
            WindowImplBase::resizeEvent(width, height);
        };
        m_window->minimizeEvent = [this]() noexcept {
            WindowImplBase::minimizeEvent();
        };
        m_window->maximizeEvent = [this]() noexcept {
            WindowImplBase::maximizeEvent();
        };
        m_window->lostFocusEvent = [this]() noexcept {
            WindowImplBase::lostFocusEvent();
        };
        m_window->gainedFocusEvent = [this]() noexcept {
            WindowImplBase::gainedFocusEvent();
        };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::pollEvent(Event& event) noexcept -> bool {
        core::expects(m_window != nullptr);
        m_window->pollEvent();

        return WindowImplBase::pollEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::waitEvent(Event& event) noexcept -> bool {
        core::expects(m_window != nullptr);
        m_window->waitEvent();

        return WindowImplBase::waitEvent(event);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::setTitle(std::string title) noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->setTitle(std::move(title));
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::setExtent(const core::math::ExtentU& extent) noexcept
        -> void {
        core::expects(m_window != nullptr);
        m_window->setExtent(extent.width, extent.height);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::setFullscreenEnabled(bool enabled) noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->setFullscreenEnabled(enabled);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::lockMouse() noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->lockMouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::unlockMouse() noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->unlockMouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::hideMouse() noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->hideMouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::unhideMouse() noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->unhideMouse();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::extent() const noexcept -> core::math::ExtentU {
        core::expects(m_window != nullptr);
        return { m_window->width(), m_window->height() };
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::setKeyRepeatEnabled(bool enabled) noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->setKeyRepeatEnabled(enabled);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::setVirtualKeyboardVisible(bool visible) noexcept
        -> void {
        core::expects(m_window != nullptr);
        m_window->setVirtualKeyboardVisible(visible);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        WindowImpl::setMousePosition(const core::math::Vector2I& position) noexcept -> void {
        core::expects(m_window != nullptr);
        m_window->setMousePosition(position.x, position.y);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto
        WindowImpl::setMousePositionOnDesktop([[maybe_unused]] WM         wm,
                                              const core::math::Vector2U& position) noexcept
        -> void {
        macOSWindow::setMousePositionOnDesktop(position.x, position.y);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::getMonitorSettings([[maybe_unused]] WM wm)
        -> std::vector<Monitor> {
        return macOSWindow::getMonitorSettings() |
               std::views::transform([](auto&& monitor) noexcept {
                   return Monitor {
                       .flags   = core::as<Monitor::Flags>(monitor.flags),
                       .name    = std::move(monitor.name),
                       .extents = monitor.extents |
                                  std::views::transform([](auto&& extent) noexcept {
                                      return core::math::ExtentU { extent.width, extent.height };
                                  }) |
                                  std::ranges::to<std::vector>(),
                       .handle  = monitor.handle,
                   };
               }) |
               std::ranges::to<std::vector>();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::close() noexcept -> void {
        m_window.reset();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::title() const noexcept -> const std::string& {
        core::expects(m_window != nullptr);
        return m_window->title();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::isOpen() const noexcept -> bool {
        return m_window != nullptr;
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::visible() const noexcept -> bool {
        core::expects(m_window != nullptr);
        return m_window->visible();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::mouseLocked() const noexcept -> bool {
        core::expects(m_window != nullptr);
        return m_window->mouseLocked();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::mouseHided() const noexcept -> bool {
        core::expects(m_window != nullptr);
        return m_window->mouseHided();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::fullscreen() const noexcept -> bool {
        core::expects(m_window != nullptr);
        return m_window->fullscreen();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::keyRepeatEnabled() const noexcept -> bool {
        core::expects(m_window != nullptr);
        return m_window->keyRepeatEnabled();
    }

    /////////////////////////////////////
    /////////////////////////////////////
    STORMKIT_FORCE_INLINE auto WindowImpl::nativeHandle() const noexcept -> NativeHandle {
        core::expects(m_window != nullptr);
        return std::bit_cast<NativeHandle>(&m_window->macOSHandles());
    }
} // namespace stormkit::wsi::macos
