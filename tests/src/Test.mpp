// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

module;

#include <stormkit/Core/PlatformMacro.hpp>

#ifdef STORMKIT_OS_WINDOWS
    #include <windows.h>
#endif

export module Test;

import std;

export namespace test {
    struct TestFunc {
        std::string           name;
        std::function<void()> func;
    };

    struct TestSuiteHolder {
        auto                  hasTest(std::string_view name) noexcept;
        auto                  runTest(std::string_view name) noexcept;
        auto                  runTests() noexcept;
        std::string           name;
        std::vector<TestFunc> tests;
        std::source_location  location;
    };

    struct TestSuite {
        TestSuite(std::string&&               name,
                  std::vector<TestFunc>&&     tests,
                  const std::source_location& location = std::source_location::current()) noexcept;
    };

    auto expects(bool                        cond,
                 std::string_view            message,
                 const std::source_location& location = std::source_location::current()) noexcept;

    auto parseArgs(std::span<const std::string_view> args) noexcept -> void;
    auto runTests() noexcept -> int;
} // namespace test

module :private;

namespace test {
    enum class Status {
        PASSED,
        NOTPASSED,
        CHECKMARK,
        CROSSMARK,
        FAIL
    };

    struct TestState {
        std::vector<std::unique_ptr<TestSuiteHolder>> test_suites;
        bool                                          verbose        = false;
        bool                                          failed         = false;
        bool                                          plain          = false;
        std::optional<std::string>                    requested_test = std::nullopt;
    };

    auto state = TestState {};

    auto colorifyBegin(Status) noexcept -> void;
    auto colorifyEnd() noexcept -> void;

    auto TestSuiteHolder::hasTest(std::string_view name) noexcept {
        for (auto&& test : tests) {
            if (test.name == name) return true;
        }

        return false;
    }

    auto TestSuiteHolder::runTest(std::string_view name) noexcept {
        for (auto&& test : tests) {
            if (test.name == name) {
                if (state.verbose) std::println("     running test {}", test.name);
                test.func();
                if (not state.failed) {
                    if (state.verbose) {
                        std::print("     ");
                        colorifyBegin(Status::PASSED);
                        std::print("PASSED");
                        colorifyEnd();
                        std::println("");
                    }
                } else {
                    if (state.verbose) {
                        std::print("     ");
                        colorifyBegin(Status::NOTPASSED);
                        std::print("NOT PASSED");
                        colorifyEnd();
                        std::println("");
                    }
                }
                return not state.failed;
            }
        }
        return true;
    }

    auto TestSuiteHolder::runTests() noexcept {
        if (state.verbose) { std::println("   > file: {}", location.file_name()); }

        auto passed_tests = 0;
        auto failed_tests = 0;
        for (auto&& test : tests) {
            state.failed = false;
            if (state.verbose) std::println("     running test {}", test.name);
            test.func();

            if (not state.failed) {
                ++passed_tests;
                if (state.verbose) {
                    std::print("     ");
                    colorifyBegin(Status::PASSED);
                    std::print("PASSED");
                    colorifyEnd();
                    std::println("");
                }
            } else {
                ++failed_tests;
                if (state.verbose) {
                    std::print("     ");
                    colorifyBegin(Status::NOTPASSED);
                    std::print("NOT PASSED");
                    colorifyEnd();
                    std::println("");
                }
            }
        }

        colorifyBegin(Status::CHECKMARK);
        if (not state.plain) std::print("✔ ");
        colorifyEnd();
        std::print("{} test passed", passed_tests);
        if (failed_tests > 0) {
            std::print(", ");
            colorifyBegin(Status::CROSSMARK);
            if (not state.plain) std::print("❌");
            colorifyEnd();
            std::print("{} test state.failed", failed_tests);
        }
        std::println("");

        return failed_tests == 0;
    }

    TestSuite::TestSuite(std::string&&               name,
                         std::vector<TestFunc>&&     tests,
                         const std::source_location& location) noexcept {
        state.test_suites.emplace_back(
            std::make_unique<TestSuiteHolder>(std::move(name), std::move(tests), location));
    }

    auto expects(bool                        cond,
                 std::string_view            message,
                 const std::source_location& location) noexcept {
        if (not cond) [[unlikely]] {
            state.failed = true;
            if (state.verbose) {
                std::print("       ");
                colorifyBegin(Status::FAIL);
                std::print("FAILURE");
                colorifyEnd();

                std::println(" on expression \"{}\" \n"
                             "          > line: {}",
                             message,
                             location.line());
            }
        }
    }

    auto split(std::string_view string, char delim) noexcept -> std::vector<std::string> {
        auto output = std::vector<std::string> {};
        auto first  = std::size_t { 0u };

        while (first < string.size()) {
            const auto second = string.find_first_of(delim, first);

            if (first != second) output.emplace_back(string.substr(first, second - first));

            if (second == std::string_view::npos) break;

            first = second + 1;
        }

        return output;
    }

    auto parseArgs(std::span<const std::string_view> args) noexcept -> void {
        for (auto&& arg : args) {
            if (arg == "--verbose" or arg == "-v") state.verbose = true;
            else if (arg == "--plain" or arg == "-p")
                state.plain = true;
            else if (arg.starts_with("--test_name=")) { state.requested_test = split(arg, '=')[1]; }
        }
    }

    auto runTests() noexcept -> int {
        auto return_code = 0;

        if (state.requested_test) {
            for (auto&& suite : state.test_suites) {
                if (suite->hasTest(*state.requested_test)) {
                    if (not suite->runTest(*state.requested_test)) return_code = -1;
                    break;
                }
            }
        } else
            for (auto&& suite : state.test_suites) {
                std::println("Running test suite {} ({} tests)",
                             suite->name,
                             std::size(suite->tests));
                if (not suite->runTests()) return_code = -1;
            }

        return return_code;
    }

#ifdef STORMKIT_OS_WINDOWS
    namespace {
        constexpr auto KBLA = 0;
        constexpr auto KRED = 12;
        constexpr auto KGRN = 2;
        constexpr auto KWHT = 15;
        constexpr auto KYEL = 14;
    } // namespace

    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyBegin(Status status) noexcept -> void {
        if (state.plain) return;
        auto output = GetStdHandle(STD_OUTPUT_HANDLE);

        auto background = KBLA;
        auto text       = KBLA;
        switch (status) {
            case Status::PASSED: background = KGRN; break;
            case Status::FAIL: background = KRED; break;
            case Status::CHECKMARK: text = KGRN; break;
            case Status::CROSSMARK: text = KRED; break;
            case Status::NOTPASSED: background = KYEL; break;
            default: std::unreachable();
        }

        SetConsoleTextAttribute(output, (background << 4) + text);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyEnd() noexcept -> void {
        if (state.plain) return;
        auto output = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(output, (KBLA << 4) + KWHT);
    }
#else
    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyBegin(Status status) noexcept -> void {
        if (state.plain) return;
        switch (status) {
            case Status::PASSED: std::print("\033[30;42m"); break;
            case Status::FAIL: std::print("\033[30;43m"); break;
            case Status::CHECKMARK: std::print("\033[32m"); break;
            case Status::CROSSMARK: std::print("\033[33m"); break;
            case Status::NOTPASSED: std::print("\033[30;41m"); break;
            default: std::unreachable();
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyEnd() noexcept -> void {
        if (state.plain) return;
        std::print("\033[0m");
    }
#endif
} // namespace test
