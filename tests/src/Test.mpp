// Copyright (C) 2021 Arthur LAURENT <arthur.laurent4@gmail.com>
// This file is subject to the license terms in the LICENSE file
// found in the top-level of this distribution

export module Test;

import <stormkit/Core/PlatformMacro.hpp>;

import std;

export namespace test {
    struct TestFunc {
        std::string           name;
        std::function<void()> func;
    };

    struct TestSuiteHolder {
        auto                  runTests() noexcept;
        std::string           name;
        std::vector<TestFunc> tests;
        std::source_location  location;
    };

    struct TestSuite {
        TestSuite(std::string              && name,
                  std::vector<TestFunc>    && tests,
                  const std::source_location& location = std::source_location::current()) noexcept;
    };

    auto expects(bool                        cond,
                 std::string_view            message,
                 const std::source_location& location = std::source_location::current()) noexcept;

    auto parseArgs(std::span<const std::string_view> args) noexcept -> void;
    auto runTests() noexcept -> int;
} // namespace test

module :private;

namespace test {
    enum class State {
        PASSED,
        NOTPASSED,
        CHECKMARK,
        CROSSMARK,
        FAIL
    };

    struct TestState {
        std::vector<std::unique_ptr<TestSuiteHolder>> test_suites;
        bool                                          verbose = false;
        bool                                          failed  = false;
    };

    auto state = TestState {};

    auto colorifyBegin(State) noexcept -> void;
    auto colorifyEnd() noexcept -> void;

    auto TestSuiteHolder::runTests() noexcept {
        if (state.verbose) { std::println("   > file: {}", location.file_name()); }

        auto passed_tests = 0;
        auto failed_tests = 0;
        for (auto&& test : tests) {
            state.failed = false;
            if (state.verbose) std::println("     running test {}", test.name);
            test.func();

            if (not state.failed) {
                ++passed_tests;
                if (state.verbose) {
                    std::print("     ");
                    colorifyBegin(State::PASSED);
                    std::print("PASSED");
                    colorifyEnd();
                    std::println("");
                }
            } else {
                ++failed_tests;
                if (state.verbose) {
                    std::print("     ");
                    colorifyBegin(State::NOTPASSED);
                    std::print("NOT PASSED");
                    colorifyEnd();
                    std::println("");
                }
            }
        }

        colorifyBegin(State::CHECKMARK);
        std::print("✔ ");
        colorifyEnd();
        std::print("{} test passed", passed_tests);
        if (failed_tests > 0) {
            std::print(", ");
            colorifyBegin(State::CROSSMARK);
            std::print("❌");
            colorifyEnd();
            std::print("{} test state.failed", failed_tests);
        }
        std::println("");

        return failed_tests == 0;
    }

    TestSuite::TestSuite(std::string              && name,
                         std::vector<TestFunc>    && tests,
                         const std::source_location& location) noexcept {
        state.test_suites.emplace_back(
            std::make_unique<TestSuiteHolder>(std::move(name), std::move(tests), location));
    }

    auto expects(bool                        cond,
                 std::string_view            message,
                 const std::source_location& location) noexcept {
        if (not cond) [[unlikely]] {
            state.failed = true;
            if (state.verbose) {
                std::print("       ");
                colorifyBegin(State::FAIL);
                std::print("FAILURE");
                colorifyEnd();

                std::println(" on expression \"{}\" \n"
                             "          > line: {}",
                             message,
                             location.line());
            }
        }
    }

    auto parseArgs(std::span<const std::string_view> args) noexcept -> void {
        for (auto&& arg : args) {
            if (arg == "--verbose" or arg == "-v") state.verbose = true;
        }
    }

    auto runTests() noexcept -> int {
        auto return_code = 0;
        for (auto&& suite : state.test_suites) {
            std::println("Running test suite {} ({} tests)", suite->name, std::size(suite->tests));
            if (not suite->runTests()) return_code = -1;
        }

        return return_code;
    }
#ifdef STORMKIT_OS_WINDOWS
    namespace {
        constexpr auto KBLA = 0;
        constexpr auto KRED = 12;
        constexpr auto KGRN = 2;
        constexpr auto KWHT = 15;
    } // namespace

    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyBegin(bool fail) noexcept -> void {
        auto output = GetStdHandle(STD_OUTPUT_HANDLE);

        auto background = (fail) ? KRED : KRGN;
        auto text       = KBLA;

        SetConsoleTextAttribute(output, (background << 4) + text);
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyEnd() noexcept -> void {
        auto output = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(output, (KBLA << 4) + KWHT);
    }
#else
    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyBegin(State state) noexcept -> void {
        switch (state) {
            case State::PASSED: std::print("\033[30;42m"); break;
            case State::FAIL: std::print("\033[30;43m"); break;
            case State::CHECKMARK: std::print("\033[32m"); break;
            case State::CROSSMARK: std::print("\033[33m"); break;
            case State::NOTPASSED: std::print("\033[30;41m"); break;
        }
    }

    /////////////////////////////////////
    /////////////////////////////////////
    auto colorifyEnd() noexcept -> void {
        std::print("\033[0m");
    }
#endif
} // namespace test
